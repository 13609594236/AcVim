()|,



WIN32 API
AbortPathBOOL00tbHDChdcHDC hdc	//Handle of device context
AbortPrinterBOOL00tbHANDLEhPrinterHANDLE hPrinter	//Handle of printer object
AbortProcBOOLCALLBACK00tbHDChdcHDC hdc,	//Handle of device contexttbintiErrorint iError	//Error value
AbortSystemShutdown00tbLPTSTRlpszMachineNameLPTSTR lpszMachineName	//Address of name of computer to abort shutdown on
AccessCheckBOOL00tbPSECURITY_DESCRIPTORpSDPSECURITY_DESCRIPTOR pSD,	//Address of security descriptortbHANDLEhClientTokenHANDLE hClientToken,	//Handle of client access tokentbDWORDdwDesiredAccessDWORD dwDesiredAccess,	//Access mask to requesttbPGENERIC_MAPPINGpgmPGENERIC_MAPPING pgm,	//Address of generic-mapping structuretbPPRIVILEGE_SETppsPPRIVILEGE_SET pps,	//Address of privilege-set structuretbLPDWORDcbpsLPDWORD cbps,	//Size of privilege-set structuretbLPDWORDlpdwGrantedAccessLPDWORD lpdwGrantedAccess,	//address of granted access masktbLPBOOLlpfStatusLPBOOL lpfStatus	//Address of flag indicating whether access granted
AccessCheckAndAuditAlarmBOOL00tbLPCSTRlpszSubsystemLPCSTR lpszSubsystem,	//Address of string for subsystem nametbLPVOIDlpvHandleIdLPVOID lpvHandleId,	//address of handle identifiertbLPTSTRlpszObjectTypeLPTSTR lpszObjectType,	//Address of string for object typetbLPTSTRlpszObjectLPTSTR lpszObject,	//Address of string for object nametbPSECURITY_DESCRIPTOR  psdPSECURITY_DESCRIPTOR   psz,	//Address of security descriptortbDWORDdwDesiredAccessDWORD dwDesiredAccess,	//Mask for requested access rightstbPGENERIC_MAPPINGpgmPGENERIC_MAPPING pgm,	//Address of GENERIC_MAPPINGtbBOOLfObjectCreationBOOL fObjectCreation,	//Object-creation flagtbLPDWORDlpdwGrantedAccesLPDWORD lpdwGrantedAccess,	//Address of mask for granted rightstbLPBOOLlpfAccessStatusLPBOOL lpfAccessStatus,	//Address of flag for resultstbLPBOOLlpfGenerateOnCloseLPBOOL lpfGenerateOnClose	//Address of flag for audit generation
AcsLanACSLAN_STATUS00tbPLLC_CBpCcbPLLC_CB pCcb,	//CCB control blocktbPLLC_CCB *ppBadCcbPLLC_CCB *ppBadCcb	//Pointer or invalid CCB control blocks
ActivateKeyboardLayoutBOOL00cbHKLhklHKL_NEXTHKL_PREVIOUSHKL hkl,	//Handle of keyboard layoutcbUINTfuFlagsKLF_REORDERKLF_UNLOADPREVIOUSUINT fuFlags	//Keyboard layout flags
AddAccessAllowedAceBOOL00tbPACLpAclPACL pAcl,	//Address of access-control listtbDWORD dwAclRevisionDWORD dwAclRevision,	//ACL revision leveltbDWORDdwAccessMaskDWORD dwAccessMask,	//Access MasktbPSIDpSidPSID pSid,	//Address of security identifier
AddAccessDeniedAce00tbPACLpAclPACL pAcl,	//Address of access-control listcbDWORDdwAclRevcionACL_REVISIONDWORD dwAclRevision,	//ACL revision leveltbDWORDdwAccessMaskDWORD dwAccessMask,	//Access masktbPSIDpSidPSID pSid	//Address of security identifier
AddAceBOOL00tbPACLpAclPACL pAcl,	//Address of access-control listcbDWORDdwAclRevisionACL_REVISIONDWORD dwAclRevision,	//ACL revision levelcbDWORDdwStartingAceIndex0MAXDWORDDWORD dwStartingAceIndex,//	Index of ACE position in ACLtbLPVOIDlpvAceListLPVOID lpvAceList,	//Address of one or more ACEstbDWORD cbAceListDWORD  cbAceList,	//size of buffer for ACEs
AddAtomATOM00tbLPCSTRlpszNameLPCSTR lpszName	//Adress of string to add
AddAuditAccessAceBOOL00tbPACLpAclPACL pAcl,	//address of access-control listtbDWORDdwAclRevisionDWORD dwAclRevision,	//ACL revision levelcbDWORDdwAclRevisionACL_REVISIONDWORD dwAccessMask,	//Access masktbPSIDpSidPSID pSid,	//Address of security identifiercbBOOLfAuditSuccessTRUEFALSEBOOL fAuditSuccess,	//Flag for auditing successful accesscbBOOLfAuditFailureTRUEFALSEBOOL fAuditFailure	//Flag for auditing unsuccessful access attempts
AddFontResourceint00tbLPCTSTRlpszFilenameLPCTSTR lpszFilename	//Address of font-resource filename
AddFormBOOL00tbHANDLEhPrinterHANDLE hPrinter,	//Handle of printer objectcbDWORD1cLevelDWORD cLevel,	//data-structure leveltbLPBYTEpFormLPBYTE pForm	//Address of data structure
AddJobBOOL00tbHANDLEhPrinterHANDLE hPrinter,	//Handle of printer objectcbDWORD1cLevelDWORD cLevel,	//data-structure leveltbLPBYTEpDataLPBYTE pData,	//Address of data-structure arraytbDWORDcbBufDWORD cbBuf,	//Count of bytes in arraytbLPDWORDpdbNeededLPDWORD pcbNeeded	//Address of variable that contains count of bytes required
AddMonitorBOOL00cbLPTSTRNULLlpszNameLPTSTR pName,	//Address of server namecbDWORD2LevelDWORD Level,	//Monitor info structure leveltbLPBYTE pMonitorspMonitorsLPBYTE pMonitors	//Address of monitor info structure
AddPortBOOL00cbLPTSTRlpszNameNULLLPTSTR lpszName,	//Address of a server nametbHWNDhwndHWND hwnd,	//Handle of parent windowtbLPTSTRlpszMonitorNameLPTSTR lpszMonitorName	//Address of a monitor name
AddPrinterHANDLE00cbLPTSTRlpszNameNULLLPTSTR lpszName,	//Address of server namecbDWORD2dwLevelDWORD dwLevel,	//Printer info structure leveltbLPBYTElpbPrinterLPBYTE lpbPrinter	//Address of structure
AddPrinterConnectionBOOL00tbLPTSTRpNameLPTSTR pName	//address of printer name
AddPrinterDriverBOOL00cbLPTSTRlpszNameNULLLPTSTR lpszName,	//Address of server namecbDWORD2dwLevelDWORD dwLevel,	//Pinter info structure leveltbLPBYTElpbDriverInfoLPBYTE lpbDriverInfo,	//Address of structure
AddPrintProcessorBOOL00cbLPTSTRlpszServerNULLLPTSTR lpszServer,	//Address of server namecbLPTSTRlpszEnvirNULLLPTSTR lpszEnvir,	//Address of environment nametbLPTSTRlpszPathLPTSTR lpszPath,	//Address of pathtbLPTSTRlpszPPNameLPTSTR lpszPPName	//Address of print-processor name
AdjustTokenGroupsBOOL00tbHANDLEhTokenHANDLE hToken,	//Handle of token that contains groupscbBOOLfResetToDefaultTRUEFALSEBOOL fResetToDefault,	//Flag for default settingstbPTOKEN_GROUPSptgNewPTOKEN_GROUPS ptgNew,	//Address of new group informationcbDWORDptgPreviousNULLDWORD cbtgPrevious,	//Size of buffer for previous informationcbPTOKEN_GROUPSptgPreviousNULLPTOKEN_GROUPS ptgPrevious,	//Address of previous group informationcbPDWORDpcbtgPreviousRequiredNULLPDWORD pcbtgPreviousRequired	//Address of required buffer size
AdjustTokenPrivilegesBOOL00tbHANDLEhTokenHandle hToken,	//Handle of token that contains privilegescbBOOLTRUEFALSEBOOL fDisableAll,	//Flag for disabling all privilegescbPTOKEN_PRIVILEGESptpNewNULLPTOKEN_PRIVILEGES ptpNew,	//Address of new privilege informationcbDWORDcbtpPreviousNULLDWORD cbtpPrevious,	//Size of previous information buffercbPTOKEN_PRIVILEGESptpPreviousNULLPTOKEN_PRIVILEGES ptpPrevious,	//Address of previous informationcbPDWORDpcbtpPreviousRequiredNULLPDWORD pcbtpPreviousRequired	//Address of required buffer size
AdjustWindowRectBOOL00tbLPRECTlprcLPRECT lprc,	//Address of client-rectangle structuretbDWORDfdwStyleDWORD fdwStyle,	//Window stylestbBOOLfMenuBOOL fMenu	//Menu-present flag
AdjustWindowRectExBOOL00tbLPRECTlprcLPRECT lprc,	//Address of client-rectangle structuretbDWORDfdwStyleDWORD fdwStyle,	//Window stylestbBOOLfMenuBOOL fMenu,	//Menu-present flagtbDWORDfdwExStyleDWORD fdwExStyle	//Extended style
AdvancedDocumentPropertiesLONG00tbHWNDhwndHWND hwnd,	//Handle of dialog box's parent windowtbHANDLEhPrinterHANDLE hPrinter,	//Handle of printer objecttbLPTSTRlpszDevNameLPTSTR lpszDevName	//Address of driver nametbPDEVMODEpdmOutputPDEVMODE pdmOutput,	//Address of modified device mode structuretbPDEVMODEpdmInputPDEVMODE pdmInput	//Address of original device mode structure
AllocateAndInitializeSidBOOL00cbPSID_IDENTIFIER_AUTHORITYcSubAuthorities12345678PSID_IDENTIFIER_AUTHORITY psia,	//Address of identifier authoritytbDWORDdwSubAutority0DWORD dwSubAuthority0,	//Subauthority 0tbDWORDdwSubAuthority1DWORD dwSubAuthority1,	//Subauthority 1tbDWORDdwSubAuthority2DWORD dwSubAuthority2,	//Subauthority 2tbDWORDdwSubAuthority3DWORD dwSubAuthority3,	//Subauthority 3tbDWORDdwSubAuthority4DWORD dwSubAuthority4,	//Subauthority 4tbDWORDdwSubAuthority5DWORD dwSubAuthority5,	//Subauthority 5tbDWORDdwSubAuthority6DWORD dwSubAuthority6,	//Subauthority 6tbDWORDdwSubAuthority7DWORD dwSubAuthority7,	//Subauthority 7tbPSIDlppsidPSID *lppsid	//Address of pointer to SID
AllocateLocallyUniqueIdBOOL00tbPLUIDpluidPLUID pluid	//Address of locally unique identifier
AnimatePaletteBOOL00tbHPALETTEhpalHPALETTE hpal,	//Handle of logical color palettetbUINTiStartIndexUINT iStartIndex,	//First entry in logical palettetbUINTcEntriesUINT cEntries,	//Count of entries in logical palettetbCONST PALETTEENTRYppeCONST PALETTEENTRY *ppe	//Address of first replacement
ArcBOOL00tbHDChdcHDC hdc,	//Handleof device contexttbintnLeftRectint nLeftRect,	//x-coord. of upper-left corner of bounding rectangletbintnTopRectint nTopRect,	//y-coord. of upper-left corner of bounding rectangletbintnRightRectint nRightRect,	//x-coord. of lower-right corner of bounding rectangletbintnBottomRectint nBottomRect,	//y-coord. of lower-right corner of bounding rectangletbintnXStartArcint nXStartArc,	//First radial ending pointtbintnYStartArcint nYStartArc,	/First radial ending pointtbintnXEndArcint nXEndArc,	//Second radial ending pointtbintnYEndArcint nYEndArc	//Second radial ending point
ArcToBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbintnLeftRectint nLeftRect,	//x-coord. of upper-left corner of bounding rectangletbintnTopRectint nTopRect,	//y-coord. of upper-left corner of bounding rectangletbintnRightRectint nRightRect,	//x-coord. of lower-right corner of bounding rectangletbintnBottomRectint nBottomRect,	//y-coord. of lower-right corner of bounding rectangletbintnXRadial1int nXRadial1,	//First radial ending pointtbintnYRadial1int nYRadial1,	/First radial ending pointtbintnXRadial2int nXRadial2,	//Second radial ending pointtbintnYRadial2int nYRadial2	//Second radial ending point
AreAllAccessesGrantedBOOL00tbDWORDdwGrantedAccessDWORD dwGrantedAccess,	//Access mask for granted access rightstbDWORDdwDesiredAccessDWORD dwDesiredAccess	//Access mask for requested access rights
AreAnyAccessesGrantedBOOL00tbDWORDdwGrantedAccessDWORD dwGrantedAccess,	//Access mask for granted access rightstbDWORDdwDesiredAccessDWORD dwDesiredAccess	//Access mask for requested access rights
AttachThreadInputBOOL00tbDWORDidAttachDWORD idAttach,	//Thread to attachtbDWORDidAttachToDWORD idAttachTo,	//Thread to attach tocbBOOLfAttachTRUEFALSEBOOL fAttach	//Attach or detach
auxGetDevCapsMMRESULT00tbUINTIDAuxDevUINT IDAuxDev,	/Ientifier of aux device to querytbLPAUXCAPSlpauxcLPAUXCAPS lpauxc,	/Address of AUXCAPS structure for resultstbUINTcbAuxcUINT cbAuxc	//Size of AUXCAPS structure, in bytes
auxOutMessageMMRESULT00tbUINTIDAuxDevUINT IDAuxDev,	//Identifier of aux device to send message totbUINTUINT uMsg,	//MessagetbDWORDdwParam1DWORD dwParam1,	//Message-specific parametertbDWORDdwParam2DWORD dwParam2,	//Message-specific parameter
auxSetVolumeMMRESULT00tbUINTIDAuxDevUINT IDAuxDev,	//Identifier of aux device to set volume fortbDWORDdwVolumeDWORD dwVolume	//New volume setting
BackupEventLogBOOL00tbHANDLEhEventLogHANDLE hEventLog,	//Handle to event logtbLPCTSTRlpszBackupFileNameLPCTSTR lpszBackupFileName	//Name of backup file
BackupRead00tbHANDLEhFileHandleHANDLE hFileHandle,	//Handle of open filetbLPBYTElpBufferLPBYTE lpBuffer,	//Address of buffer to read totbDWORDdwNumberOfBytesToReadDWORD dwNumberOfBytesToRead,	//Number of bytes to readtbLPDWORDlpdwNumberOfBytesReadLPDWORD lpdwNumberOfBytesRead,	//Address of no. of bytes readcbBOOLbAbortTRUEFALSEBOOL bAbort,	//Termination typecbBOOLbProcessSecurityTRUEFALSEBOOL bProcessSecurity,	//Termination typetbLPVOIDlpContextLPVOID *lpContext	//Internal context information
BackupSeekBOOL00tbHANDLEhFileHANDLE hFile,	//Handle of open filetbDWORDdwLowBytesToSeekDWORD dwLowBytesToSeek	//Low-order 32 bits of number of bytestbDWORDdwHighBytesToSeekDWORD dwHighBytesToSeek,	//High-order 32 bits of number of bytestbLPDWORDlpdwLowBytesSeekedLPDWORD lpdwLowBytesSeeked,	//Address of no. of bytes func. seekstbLPDWORDlpdwHighBytesSeekedLPDWORD lpdwHighBytesSeeked,	/'Address of no. of bytes func. seekstbLPVOIDlpContextLPVOID * lpContext	//Internal context information
BackupWriteBOOL00tbHANDLEhFileHandleHANDLE hFileHandle,	//Handle of open filetbLPBYTElpBufferLPBYTE lpBuffer,	//Address of buffer to writetbDWORDdwNumberOfBytesToWriteDWORD dwNumberOfBytesToWrite,	//Number of bytes to writetbBOOLbAbortBOOL bAbort,	//Termination typetbBOOLbProcessSecurityBOOL bProcessSecurity,	//Process securitytbLPVOIDlpContextLPVOID *lpContext	//Internal context information
Beep00tbDWORDdwFreqDWORD dwFreq,	//Sound frequency, in hertztbDWORDdwDurationDWORD dwDuration	//Sound duration, in milliseconds
BeginDeferWindowPosHDWP00tbintcWindowsint cWindows	//Number of windows 
BeginPaintHDC00tbHWNDhwndHWND hwnd,	//Handle of windowcbLPPAINTSTRUCTlpps&psLPPAINTSTRUCT lpps	//Address of structure for paint information
BeginPathBOOL00tbHDChdcHDC hdc	//Handle of device context
BeginUpdateResourceHANDLE00tbLPCTSTRlpszExeFileLPCTSTR lpszExeFile,	//Addr. of file in which to update resourcescbBOOLbDeleteExistingResourcesTRUEFALSEBOOL bDeleteExistingResources	//deletion option
BitBlt00tbHDChdcDestHDC hdcDest,	//Handle of destination device contexttbintnXDestint nXDest,	//x-coordinate of destination rect. upper left cornertbintnYDestint nYDest,	//y-coordinate of destination rect. upper left cornertbintnWidthint nWidth,	//Width of destination rect.tbintnHeightint nHeight,	//Height of destination rect.tbHDChdcSrcHDC hdcSrc,	//Handle of source device contexttbintnXSrcint nXSrc,	//x-coordinate of source rect. upper left cornertbintnYSrcint nYSrc,	//y-coordinate of source rect. upper left cornercbDWORDdwRopBLACKNESSDSTINVERTMERGECOPYMERGEPAINTNOTSRCCOPYNOTSRCERASEPATCOPYPATINVERTPATPAINTSRCANDSRCCOPYSRCERASESRCINVERTSRCPAINTWHITENESSDWORD dwRop	//Raster operation code
BringWindowToTopBOOL00tbHWNDhwnd;HWND hwnd,	//Handle of window 
BuildCommDCB00tbLPCTSTRlpszDefLPCTSTR lpszDef,	//address of device-control stringtbLPDCBlpdcbLPDCB lpdcb	//address of device-control block
BuildCommDCBAndTimeoutsBOOL00tbLPCTSTRlpDefLPCTSTR lpDef,	//address of a device control stringtbLPDCBlpDCBLPDCB lpDCB,	//address of a device control blocktbLPCOMMTIMEOUTSlpCommTimeoutsLPCOMMTIMEOUTS lpCommTimeouts	//address of a comm timeout structure
CallMsgFilterBOOL00tbLPMSGlpmsgLPMSG lpmsg,	//address of structure with message datatbintnCodeint nCode	//hook code
CallNamedPipeBOOL00tbLPCTSTRlpszPipeNameLPCTSTR lpszPipeName,	//address of pipe nametbLPVOIDlpvWriteBufLPVOID lpvWriteBuf,	//address of write buffertbDWORDcbWriteBufDWORD cbWriteBuf,	//size in bytes of write buffertbLPVOIDlpvReadBufLPVOID lpvReadBuf,	//address of read buffertbDWORDcbReadBufDWORD cbReadBuf,	//size in bytes of read buffertbLPDWORDlpcbReadLPDWORD lpcbRead,	//number of bytes readcbDWORDdwTimeoutNMPWAIT_NOWAITNMPWAIT_WAIT_FOREVERNMPWAIT_USE_DEFAULT_WAITDWORD dwTimeout	//time-out time in milliseconds
CallNextHookExLRESULT00tbHHOOKhhookHHOOK hhook,	//handle of current hooktbintnCodeint nCode,	//hook code passed to hook proceduretbWPARAMwParamWPARAM wParam,	//value passed to hook proceduretbLPARAMlParamLPARAM lParam	//value passed to hook procedure
CallWindowProcLRESULT00tbWNDPROCwndprcPrevWNDPROC wndprcPrev,	//Address of previous proceduretbHWNDhwndHWND hwnd,	//Handle of windowtbUINTuMsgUINT uMsg,	//MessagetbWPARAMwParamWPARAM wParam,	//First message parametertbLPARAMlParamLPARAM lParam	//Second message parameter
CancelDCBOOL00tbHDChdcHDC hdc	//Handle of device context
CancelDC00
CBTProcLRESULT00cbintnCodeHCBT_ACTIVATEHCBT_CLICKSKIPPEDHCBT_CREATEWNDHCBT_DESTROYWNDHCBT_KEYSKIPPEDHCBT_MINMAXHCBT_MOVESIZEHCBT_QSHCBT_SETFOCUSHCBT_SYSCOMMANDint nCode,	//Hook codetbWPARAMwParamWPARAM wParam,	//Depends on hook codetbLPARAMlParamLPARAM lParam,	//Depends on hook code
ChangeClipboardChainBOOL00tbHWNDhwndRemoveHWND hwndRemove,	//Handle of window to removetbHWNDhwndNextHWND hwndNext	//Handle of next window
ChangeServiceConfig00tbSC_HANDLEschServiceSC_HANDLE schService,	//Handle of servicecbDWORDfdwServiceTypeSERVICE_WIN32_OWN_PROCESSSERVICE_WIN32_SHARE_PROCESSSERVICE_KERNEL_DRIVERSERVICE_FILE_SYSTEM_DRIVERDWORD fdwServiceType,	//Type of servicecbDWORDfdwStartTypeSERVICE_BOOT_STARTSERVICE_SYSTEM_STARTSERVICE_AUTO_STARTSERVICE_DEMAND_STARTSERVICE_DISABLEDDWORD fdwStartType,	//When to start servicecbDWORDfdwErrorControlSERVICE_ERROR_IGNORESERVICE_ERROR_NORMALSERVICE_ERROR_SEVERESERVICE_ERROR_CRITICALSERVICE_NO_CHANGEDWORD fdwErrorControl,	//Severity if service fails to startcbLPCTSTRlpszBinaryPathNameNULLLPCTSTR lpszBinaryPathName,	//Address of service binary file namecbLPCTSTRlpszLoadOrderGroupNULLLPCTSTR lpszLoadOrderGroup,	//Address of load ordering group namecbLPDWORDlpdwTagIDNULLLPDWORD lpdwTagID,	//Address of variable to get tag identifiercbLPCTSTRlpszDependenciesNULLLPCTSTR lpszDependencies,	//Address of array of dependency namescbLPCTSTRlpszServiceStartNameNULLLPCTSTR lpszServiceStartName,	//Address of account name of servicecbLPCTSTRlpszPasswordNULL""LPCTSTR lpszPassword,	//Address of password for service accounttbLPCTSTRlpszDisplayNameLPCTSTR lpszDisplayName	//Address of display name
CharLowerLPTSTR00tbLPTSTRlpszStringLPTSTR lpszString	//Address of string or single character
CharLowerBuffDWORD00tbLPTSTRlpszStringLPTSTR lpszString,	//Address of string to converttbDWORDcchStringDWORD cchString	//Number of characters to convert
CharNextLPTSTR00tbLPCTSTRlpszCurrentCharLPCTSTR lpszCurrentChar	//Address of current character
CharPrevLPTSTR00tbLPCTSTRlpszStartLPCTSTR lpszStart,	//Address of first charactertbLPCTSTRlpszCurrentCharLPCTSTR lpszCurrentChar	//Address of current character
CharToOemBOOL00tbLPCTSTRlpszSrcLPCTSTR lpszSrc,	//Address of string to translatetbLPTSTRlpszDestLPTSTR lpszDest	//Address of translated string
CharUpperLPTSTR00tbLPTSTRlpszStringLPTSTR lpszString	//Address of string or single character
CharUpperBuffDWORD00tbLPTSTRlpszStringLPTSTR lpszString,	//Address of string to converttbDWORDcchStringDWORD cchString	//Number of characters to convert
CheckDlgButtonBOOL00tbHWNDhwndDlgHWND hwndDlg,	//Handle of dialog boxtbintidButtonint idButton,	//Button-control identifiercbUINTuCheck012UINT uCheck	//Check state
CheckMenuItemDWORD00tbHMENUhmenuHMENU hmenu,	//Handle of menutbUINTidCheckItemUINT idCheckItem,	//Menu item to check or uncheckcbUINTfuFlagsMF_BYCOMMANDMF_BYPOSITIONMF_CHECKEDMF_UNCHECKEDUINT fuFlags	//Menu item flags
CheckRadioButtonBOOL00tbHWNDhwndDlgHWND hwndDlg,	//Handle of dialog boxtbintidFirstButtonint idFirstButton,	//Identifier of first radio button in grouptbintidLastButtonint idLastButton,	//Identifier of last radio button in grouptbintidCheckButtonint idCheckButton	//Identifier of radio button to select
ChildWindowFromPointHWND00tbHWNDhwndParentHWND hwndParent,	//Handle of parent windowtbPOINTptPOINT pt	//Structure with point coordinates
ChooseColorBOOL00cbLPCHOOSECOLORlpcc&pccLPCHOOSECOLOR lpcc	//Address of structure with initialization data
ChooseFontBOOL00tbLPCHOOSEFONTlpcfLPCHOOSEFONT lpcf	//Pointer to structure with initialization data
Chord00tbHDChdcHDC hdc,	//Handleof device contexttbintnLeftRectint nLeftRect,	//X-coord. of bounding rect. upper-left cornertbintnTopRectint nTopRect,	//Y-coord. of bounding rect. upper-left cornertbintnRightRectint nRightRect,	//X-coord. of bounding rect. lower-right cornertbintnBottomRectint nBottomRect,	//Y-coord. of bounding rect. lower-right cornertbintnXRadial1int nXRadial1,	//X-coord. of first radial's endpointtbintnYRadial1int nYRadial1,	//Y-coord. of first radial's endpointtbintnXRadial2int nXRadial2,	//X-coord. of second radial's endpointtbintnYRadial2int nYRadial2	//Y-coord. of second radial's endpoint
ClearCommBreakBOOL00tbHANDLEhCommDevHANDLE hCommDev	//Handle of the communications device
ClearCommErrorBOOL00tbHANDLEhCommDevHANDLE hCommDev,	//Handle of the communications devicetbLPDWORDlpdwErrorsLPDWORD lpdwErrors,	//Address of variable to receive error codestbLPCOMSTATlpcstLPCOMSTAT lpcst	//Address of buffer for communication status
ClearEventLogBOOL00tbHANDLEhEventLogHANDLE hEventLog,	//Handle to event logtbLPCTSTRlpszBackupFileLPCTSTR lpszBackupFile	//Name of backup file
ClientToScreenBOOL00tbHWNDhwndHWND hwnd,	//Window handle for source coordinatestbLPPOINTlpptLPPOINT lppt	//Address of structure containing screen coordinates
ClipCursorBOOL00tbCONSTRECT*lprcCONST RECT *lprc	//Address of structure with rectangle
CloseEventLogBOOL00tbHANDLEhEventLogHANDLE hEventLog	//Handle to event log
CloseFigureBOOL00tbHDChdcHDC hdc	//Handle of device context
CloseHandleBOOL00tbHANDLEhObjectHANDLE hObject	//Handle of object to close
CloseMetaFileHMETAFILE00tbHDChdcHDC hdc	//Handle of metafile device context
ClosePrinterBOOL00tbHANDLEhPrinterHANDLE hPrinter	//Handle of printer object
CloseServiceHandleBOOL00tbSC_HANDLEschSCObjectSC_HANDLE schSCObject	//Handle of service or service control manager database
CloseWindowBOOL00tbHWNDhwndHWND hwnd	//Handle of window to minimize
CombineRgnint00tbHRGNhrgnDestHRGN hrgnDest,	//Handle of destination regiontbHRGNhrgnSrc1HRGN hrgnSrc1,	//Handle of source regiontbHRGNhrgnSrc2HRGN hrgnSrc2,	//Handle of source regioncbintfnCombineModeRGN_ANDRGN_COPYRGN_DIFFRGN_ORRGN_XORint fnCombineMode	//Region combining mode
CombineTransformBOOL00tbLPXFORMlpxformResultLPXFORM lpxformResult,	//Address of combined transformationtbCONST XFORM *lpxform1CONST XFORM * lpxform1,	//Address of first transformationtbCONST XFORM *lpxform2CONST XFORM * lpxform2	//Address of second transformation
CommandLineToArgvWLPWSTR*00tbLPWSTRlpCmdLineLPWSTR lpCmdLine,	//Pointer to a command-line stringtbLPINTpArgcLPINT pArgc	//Pointer to a variable that receives the argument count
CompareStringint00tbLCIDlcidLCID lcid,	//locale identifiertbDWORDdwCmpFlagsDWORD  dwCmpFlags,	//comparison-style optionstbLPCTSTRlpString1LPCTSTR  lpString1,	//address of first stringtbintcchCount1int  cchCount1,	//number of characters in first stringtbLPCTSTRlpString2LPCTSTR  lpString2,	//address of second stringtbintcchCount2int  cchCount2	//number of characters in second string
CompareStringWint00tbLCIDlcidLCID lcid,	//Locale identifierxbDWORDNORM_IGNORECASENORM_IGNORENONSPACENORM_IGNORESYMBOLSSORT_STRINGSORTfdwStyleDWORD fdwStyle,	//Comparison-style optionstbLPCWSTRlpString1LPCWSTR lpString1,	//Address of first stringtbintcch1int cch1,	//Number of characters in first stringtbLPCWSTRlpString2LPCWSTR lpString2,	//Address of second stringtbintcch2int cch2	//Number of characters in second string
ConfigurePortBOOL00tbLPTSTRlpszNameLPTSTR lpszName,	//Address of server nametbHWNDhwndHWND hwnd,	//Handle of window that displays dialog boxtbLPTSTRlpszPortNameLPTSTR lpszPortName	//Address of port name
ConnectNamedPipeBOOL00tbHANDLEhNamedPipeHANDLE hNamedPipe,	//Handle of named pipe to connectcbLPOVERLAPPEDlpoNULLLPOVERLAPPED lpo	//Address of overlapped structure
ConnecttoPrinterDlgHANDLE00tbHWNDhwndHWND hwnd,	//Parent window of dialog boxcbDWORD0FlagsDWORD Flags	//Reserved for future use, must be zero
ContinueDebugEventBOOL00tbDWORDidProcessDWORD idProcess,	//Process to continuetbDWORDidThreadDWORD idThread,	//Thread to continuecbDWORDfdwContinueStatusDBG_CONTINUEDBG_EXCEPTION_NOT_HANDLEDDWORD fdwContinueStatus	//Continuation status
ControlServiceBOOL00tbSC_HANDLEschServiceSC_HANDLE schService,	//Handle of servicecbDWORDfdwControlSERVICE_CONTROL_STOPSERVICE_CONTROL_PAUSESERVICE_CONTROL_CONTINUESERVICE_CONTROL_INTERROGATESERVICE_CONTROL_SHUTDOWNDWORD fdwControl,	//Control codetbLPSERVICE_STATUSlpssServiceStatusLPSERVICE_STATUS lpssServiceStatus	//Address of service status structure
ConvertDefaultLocaleBOOL00tbSC_HANDLEschServiceSC_HANDLE  schService,	//handle of servicetbDWORDfdwControlDWORD  fdwControl,	//control codetbLPSERVICE_STATUSlpssServiceStatus\t//address of service status structureLPSERVICE_STATUS  lpssServiceStatus	//address of service status structure
CopyAcceleratorTableint00tbHACCELhacclOriginalHACCEL hacclOriginal,	//Handle of accelerator table to copytbLPACCELlpacclCopyLPACCEL lpacclCopy,	//Address of structure receiving copytbintcAccelint cAccel,	//Number of entries in table being copied
CopyCursorHCURSOR00tbHCURSORhcurHCURSOR hcur	//Handle of cursor to copy
CopyEnhMetaFileHENMETAFILE00tbHENHMETAFILEhemfSrcHENHMETAFILE hemfSrc,	//Handle of an enhanced metafilecbLPCTSTRlpszFileNULLLPCTSTR lpszFile,	//Address of a filename string
CopyFileBOOL00tbLPCTSTRlpszExistingFileLPCTSTR lpszExistingFile,	//Address of name of an existing filetbLPCTSTRlpszNewFileLPCTSTR lpszNewFile,	//Address of filename to copy tocbBOOLfFailIfExistsTRUEFALSEBOOL fFailIfExists,	//Flag for operation if file exists
CopyIconHICON00tbHICONhiconHICON hicon	//Handle of icon to copy
CopyMemoryVOID00tbPVOIDDestinationPVOID Destination,	//Address of copy destinationtbCONST VOID *SourceCONST VOID * Source,	//Address of block to copytbDWORDLengthDWORD Length	//Size in bytes of block to copy
CopyMetaFileHMETAFILE00tbHMETAFILEhmfSrcHMETAFILE hmfSrc,	//Handle of a Windows format metafilecbLPCTSTRlpszFileNULLLPCTSTR lpszFile	//Address of a filename string
CopyRectBOOL00tbLPRECTlprcDstLPRECT lprcDst,	//Address of struct. for destination rectangletbCONST RECT *lprcSrcCONST RECT *lprcSrc	//Address of struct. with source rectangle
CopySidBOOL00tbDWORDcbDestinationSidDWORD cbDestinationSid,	//Size of buffer for copied SIDtbPSIDpsidDestinationPSID psidDestination,	//Address of buffer for copied SIDtbPSIDpsidSourcePSID psidSource	//Address of source SID
CreateAcceleratorTableHACCEL00tbLPACCELlpacclLPACCEL lpaccl,	//Address of structure array with accelerator datatbintcEntriesint cEntries	//Number of structures in the array
CreateBitmapHBITMAP00tbintnWidthint nWidth,	//Bitmap width, in pixelstbintnHeightint nHeight,	//Bitmap height, in pixelstbUINTcPlanesUINT cPlanes,	//Number of color planes used by devicetbUINTcBitsPerPelUINT cBitsPerPel,	//Number of bits required to identify a colortbCONST VOID *lpvBitsCONST VOID *lpvBits	//Address of array containing color data
CreateBitmapIndirectHBITMAP00tbCONSTBITMAP *lpbmCONST BITMAP * lpbm	//Address of the bitmap data
CreateBrushIndirectHBRUSH00tbCONSTLOGBRUSH *lplbCONST LOGBRUSH * lplb,	//Address of structure describing brush
CreateCHDC00tbLPCTSTRlpszDriverLPCTSTR  lpszDriver,	//address of string specifying driver nametbPCTSTRlpszDevicePCTSTR  lpszDevice,	//address of string specifying device nametbLPCTSTRlpszOutputLPCTSTR  lpszOutput,	//address of string specifying port or file nametbCONST DEVMODE *lpdvmInitCONST DEVMODE *  lpdvmInit	//address of optional initialization data
CreateCaretBOOL00cbHWNDhwndHWND hwnd,	//Handle of owner windowcbHBITMAPhbmpNULLHBITMAP hbmp,	//Handle of bitmap for caret shapecbintnWidthNULLint nWidth,	//Caret widthcbintnHeightNULLint nHeight	//Caret height
CreateCompatibleBitmapHBITMAP00tbHDChdcHDC hdc,	//Handle of device contexttbintnWidthint nWidth,	//Width of bitmap, in pixelstbintnHeightint nHeight	//Height of bitmap, in pixels
CreateCompatibleDCHDC00tbHDChdcHDC hdc	//Handle of memory device context
CreateConsoleScreenBufferHANDLE00tbDWORDfdwAccessDWORD fdwAccess,	//Access flagcbDWORDfdwShareModeGENERIC_READGENERIC_WRITEDWORD fdwShareMode,	//Buffer share modecbLPSECURITY_ATTRIBUTESlpsaFILE_SHARE_READFILE_SHARE_WRITE0LPSECURITY_ATTRIBUTES lpsa,	//Address of security attributestbDWORDfdwTypeDWORD fdwType,	//Type of buffer to createcbPVOIDpvReservedNULLPVOID pvReserved	//Reserved
CreateCursorHCURSOR00tbHINSTANCEhinstHINSTANCE hinst,	//Handle of application instancetbintxHotSpotint xHotSpot,	//Horizontal position of hot spottbintyHotSpotint yHotSpot,	//Vertical position of hot spottbintnWidthint nWidth,	//Cursor widthtbintnHeightint nHeight,	//Cursor heighttbCONST VOID *pvANDplaneCONST VOID *pvANDplane,	//Address of AND bitmask arraytbCONST VOID *pvXORplaneCONST VOID *pvXORplane	//Address of XOR bitmask array
CreateDialogHWND00tbHANDLEhinstHANDLE hinst,	//Handle of application instancetbLPCTSTRlpszTemplateLPCTSTR lpszTemplate,	//Identifies dialog box template nametbHWNDhwndOwnerHWND hwndOwner,	//Handle of owner windowtbDLGPROCdlgprcDLGPROC dlgprc	//Address of dialog box procedure
CreateDialogIndirectHANDLE00tbHANDLEhinstHANDLE hinst,	//Handle of application instancetbLPCDLGTEMPLATElpTemplateLPCDLGTEMPLATE lpTemplate,	//Address of dialog box templatetbHWNDhwndOwnerHWND hwndOwner,	//Handle of owner windowtbDLGPROCdlgprcDLGPROC dlgprc	//Address of dialog box procedure
CreateDialogIndirectParamHWND00tbHINSTANCEhinstHINSTANCE hinst,	//Handle of application instancetbLPCDLGTEMPLATElpTemplateLPCDLGTEMPLATE lpTemplate,	//Address of dialog box templatetbHWNDhwndOwnerHWND hwndOwner,	//Handle of owner windowtbDLGPROCdlgprcDLGPROC dlgprc,	//Address of dialog box proceduretbLPARAMlParamInitLPARAM lParamInit	//Initialization value
CreateDialogParamHWND00tbHINSTANCEhinstHINSTANCE hinst,	//Handle of application instancetbLPCTSTRlpszTemplateLPCTSTR lpszTemplate,	//Identifies dialog box templatetbHWNDhwndOwnerHWND hwndOwner,	//Handle of owner windowtbDLGPROCdlgprcDLGPROC dlgprc,	//Address of dialog box proceduretbLPARAMlParamInitLPARAM lParamInit	//Initialization value
CreateDIBitmapHBITMAP00tbHDChdcHDC hdc,	//Handle of device contexttbCONST BITMAPINFOHEADER *lpbmihCONST BITMAPINFOHEADER * lpbmih,	//Address of bitmap size and format datacbDWORDfdwInitCBM_CREATEDIBCBM_INITDWORD fdwInit,	//Initialization flagtbCONST VOID *lpbInitCONST VOID *lpbInit,	//Address of initialization datatbCONST BITMAPINFO *BITMAPINFO * lpbmiCONST BITMAPINFO * lpbmi,	//Address of bitmap color-format datacbUINTfuUsageDIB_PAL_COLORSDIB_PAL_INDICESDIB_RGB_COLORSUINT fuUsage	//Color-data usage
CreateDIBPatternBrushHBRUSH00tbHGLOBALhglbDIBPackedHGLOBAL hglbDIBPacked,	//handle of device-independent bitmapcbUINTfuColorSpecDIB_PAL_COLORSDIB_RGB_COLORSDIB_PAL_INDICESUINT fuColorSpec	//color table data
CreateDIBPatternBrushPtHBRUSH00tbCONST VOID *lpPackedDIBCONST VOID * lpPackedDIB,	//address of structure and bitmap bitscbUINTiUsageDIB_PAL_COLORSDIB_RGB_COLORSDIB_PAL_INDICESUINT iUsage	//usage flags
CreateDIBSectionHBITMAP00tbHDChdcHDC hdc,	//Handle of device contexttbCONST BITMAPINFO *pbmiCONST BITMAPINFO *pbmi,	/Address of structure containing bitmap size, format, and color datatbUINTiUsageUINT iUsage,	//Color data type indicator: RGB values or palette indicestbVOID **ppvBitsVOID **ppvBits,	//Pointer to variable to receive a pointer to the bitmap's bit valuestbHANDLE hSectionhSectionHANDLE hSection,	//Optional handle to a file mapping objecttbDWORDdwOffsetDWORD dwOffset	//offset to the bitmap bit values within the file mapping object
CreateDirectoryBOOL00tbLPCTSTRlpszPathLPCTSTR lpszPath,	//address of path of directory to createtbLPSECURITY_ATTRIBUTESlpsaLPSECURITY_ATTRIBUTES lpsa	//address of security descriptor
CreateDirectoryExBOOL00tbLPCTSTRlpTemplateDirectoryLPCTSTR lpTemplateDirectory,	//pointer to path string of template directorytbLPCTSTRlpNewDirectoryLPCTSTR lpNewDirectory,	//pointer to path string of directory to createcbLPSECURITY_ATTRIBUTESlpSecurityAttributesNULLLPSECURITY_ATTRIBUTES lpSecurityAttributes	//pointer to security descriptor
CreateDiscardableBitmapHBITMAP00tbHDChDCHDC hDC,	//handle of device contexttbintnWidthint nWidth,	//bitmap widthtbintnHeightint nHeight	//bitmap height
CreateEllipticRgnHGRN00tbintnLeftRectint nLeftRect,	//x-coordinate upper left corner bounding rectangletbintnTopRectint nTopRect,	//y-coordinate upper left corner bounding rectangletbintnRightRectint nRightRect,	//x-coordinate lower right corner bounding rectangletbintnBottomRectint nBottomRect	//y-coordinate lower right corner bounding rectangle
CreateEllipticRgnIndirectHGRN00tbCONST RECT *lprcCONST RECT *lprc	//address of structure defining bounding rectangle
CreateEnhMetaFileHDC00tbHDChdcRefHDC hdcRef,	//handle of a reference device contextcbLPCTSTRlpFilenameNULLLPCTSTR lpFilename,	//address of a filename stringtbCONST RECT *lpRectCONST RECT * lpRect,	//address of a bounding rectangletbLPCTSTRlpDescriptionLPCTSTR lpDescription,	//address of an optional description string
CreateEventHANDLE00tbLPSECURITY_ATTRIBUTESlpsaLPSECURITY_ATTRIBUTES lpsa,	//address of security attributescbBOOLfManualResetTRUEFALSEBOOL fManualReset,	//flag for manual-reset eventcbBOOLfInitialStateTRUEFALSEBOOL fInitialState,	//flag for initial statecbLPCTSTRlpszEventNameNULLLPCTSTR lpszEventName,	//address of event-object name
CreateFileHANDLE00tbLPCTSTRlpszNameLPCTSTR lpszName,	//address of name of the filecbDWORDfdwAccess0GENERIC_READGENERIC_WRITEDWORD fdwAccess,	//access (read-write) modecbDWORDfdwShareMode0FILE_SHARE_READFILE_SHARE_WRITEDWORD fdwShareMode,	//share modetbLPSECURITY_ATTRIBUTESlpsaLPSECURITY_ATTRIBUTES lpsa,	//address of security descriptorrbDWORDCREATE_NEWCREATE_ALWAYSOPEN_EXISTINGOPEN_ALWAYSTRUNCATE_EXISTINGDWORD fdwCreate,	//how to createxbDWORDFILE_ATTRIBUTE_ARCHIVEFILE_ATTRIBUTE_NORMALFILE_ATTRIBUTE_HIDDENFILE_ATTRIBUTE_READONLYFILE_ATTRIBUTE_SYSTEMFILE_ATTRIBUTE_TEMPORARYFILE_ATTRIBUTE_ATOMIC_WRITEFILE_FLAG_WRITE_THROUGHFILE_FLAG_OVERLAPPEDFILE_FLAG_NO_BUFFERINGFILE_FLAG_RANDOM_ACCESSFILE_FLAG_SEQUENTIAL_SCANFILE_FLAG_DELETE_ON_CLOSEFILE_FLAG_BACKUP_SEMANTICSFILE_FLAG_POSIX_SEMANTICSSECURITY_ANONYMOUSSECURITY_IDENTIFICATIONSECURITY_IMPERSONATIONSECURITY_DELEGATIONSECURITY_CONTEXT_TRACKINGSECURITY_EFFECTIVE_ONLYDWORD fdwAttrsAndFlags,	//file attributestbHANDLEhTemplateFileHANDLE hTemplateFile	//handle of file with attrs. to copy
CreateFileMappingHANDLE00cbHANDLEhFile0xFFFFFFFFHANDLE hFile,	//handle of file to mapcbLPSECURITY_ATTRIBUTESlpsa&psaNULLLPSECURITY_ATTRIBUTES lpsa,	//optional security attributesrbDWORDPAGE_READONLYPAGE_READWRITEPAGE_WRITECOPYDWORD fdwProtect,	//protection for mapping objecttbDWORDdwMaximumSizeHighDWORD dwMaximumSizeHigh,	//high-order 32 bits of object sizetbDWORDdwMaximumSizeLowDWORD dwMaximumSizeLow,	//low-order 32 bits of object sizecbLPCTSTRlpszMapNameNULLLPCTSTR lpszMapName	//name of file-mapping object
CreateFontHFONT00cbintnHeight0intnHeight,	//logical height of fontcbintnWidth0int nWidth,	//logical average character widthtbintnEscapementint nEscapement,	//angle of escapementtbintnOrientationint nOrientation,	//base-line orientation anglerbint0FW_DONTCAREFW_THINFW_EXTRALIGHTFW_LIGHTFW_NORMALFW_MEDIUMFW_SEMIBOLDFW_BOLDFW_EXTRABOLDFW_HEAVYint fnWeight,	//font weight	rbDWORDTRUEFALSEDWORD fdwItalic,	//italic attribute flagrbDWORDTRUEFALSEDWORD fdwUnderline,	//underline attribute flagrbDWORDTRUEFALSEDWORD fdwStrikeOut,	//strikeout attribute flagcbDWORDfdwCharSetANSI_CHARSET UNICODE_CHARSET SYMBOL_CHARSET SHIFTJIS_CHARSET HANGEUL_CHARSET CHINESEBIG5_CHARSET OEM_CHARSET DWORD fdwCharSet,	//character set identifiertbDWORDfdwOutputPrecisionDWORD fdwOutputPrecision,	//output precisionxbDWORDCLIP_DEFAULT_PRECIS CLIP_CHARACTER_PRECIS CLIP_STROKE_PRECIS CLIP_MASK CLIP_LH_ANGLES CLIP_TT_ALWAYS CLIP_EMBEDDED CLIP_ENCAPSULATECLIP_LH_ANGLES DWORD fdwClipPrecision,	//clipping precisionrbDWORDDEFAULT_QUALITYDRAFT_QUALITYPROOF_QUALITYDWORD fdwQuality,	//output qualitytbDWORDfdwPitchAndFamilyDWORD fdwPitchAndFamily,	//pitch and familytbLPCTSTRlpszFaceLPCTSTR lpszFace	//address of typeface name string
CreateFontIndirectHFONT00tbCONSTLOGFONT *lplflplfCONST LOGFONT *lplf	//address of logical font structure
CreateHalftonePaletteHPALETTE00tbHDChdcHDC hdc	//handle of device context
CreateHatchBrushHBRUSH00rbintHS_BDIAGONALHS_CROSSHS_DIAGCROSSHS_FDIAGONALHS_HORIZONTALHS_VERTICALint fnStyle,	//hatch styletbCOLORREFclrrefCOLORREF clrref	//color value
CreateIconHICON00tbHINSTANCEhinstHINSTANCE hinst,	//handle of application instancetbintnWidthint nWidth,	//icon widthtbintnHeightint nHeight,	//icon heighttbBYTEcPlanesBYTE cPlanes,	//number of planes in XOR bitmasktbBYTEcBitsPixelBYTE cBitsPixel,	//number of bits per pixel in XOR bitmasktbCONST BYTE *lpbANDbitsCONST BYTE *lpbANDbits,	//address of AND bitmask arraytbCONST BYTE *lpbXORbitsCONST BYTE *lpbXORbits	//address of XOR bitmask array
CreateIconFromResourceHICON00tbPBYTEpbIconBitsPBYTE pbIconBits,	//address of icon or cursor bitstbDWORDcbIconBitsDWORD cbIconBits,	//number of bytes in bit buffercbBOOLfIconTRUEFALSEBOOL fIcon,	//icon or cursor flagrbDWORD0x00020000 - Windows 2.x0x00030000 - Windows 3.x and Win32DWORD dwVersion	//Windows format version
CreateIconIndirectHICON00tbPICONINFOpiciPICONINFO pici	//address of icon information structure
CreateIoCompletionPort00tbHANDLEFileHandleHANDLE FileHandle,	//File handle to associate with I/O completion porttbHANDLEExistingCompletionPortHANDLE ExistingCompletionPort,	//Optional handle to existing I/O completion porttbDWORDCompletionKeyDWORD CompletionKey,	//Per-file completion key for I/O completion packetstbDWORDNumberOfConcurrentThreadsDWORD NumberOfConcurrentThreads	//Number of threads allowed to execute concurrently
CreateMailslotHANDLE00tbLPCTSTRlpszNameLPCTSTR lpszName,	//address of string for mailslot nametbDWORDcbMaxMsgDWORD cbMaxMsg,	//maximum message sizecbDWORDdwReadTimeout0DWORD dwReadTimeout,	//milliseconds before read time-outcbLPSECURITY_ATTRIBUTESlpsaNULLLPSECURITY_ATTRIBUTES lpsa,	//address of security structure
CreateMDIWindowHWND00tbLPTSTRlpszClassNameLPTSTR lpszClassName,	//address of registered child class nametbLPTSTRlpszWindowNameLPTSTR lpszWindowName,	//address of window namexbDWORDWS_MINIMIZEWS_MAXIMIZEWS_HSCROLLWS_VSCROLLDWORD dwStyle,	//window stylecbintxCW_USEDEFAULTint x,	//horizontal position of windowcbintyCW_USEDEFAULTint y,	//vertical position of windowcbintnWidthCW_USEDEFAULTint nWidth,	//width of windowcbintnHeightCW_USEDEFAULTint nHeight,	//height of windowtbHWNDhwndParentHWND hwndParent,	//handle of parent window (MDI clienttbHINSTANCEhinstHINSTANCE hinst,	//handle of application instancetbLPARAMlParamLPARAM lParam	//application-defined value
CreateMutexHANDLE00cbLPSECURITY_ATTRIBUTESlpsaNULLLPSECURITY_ATTRIBUTES lpsa,	//Address of security attributescbBOOLfInitialOwnerTRUEFALSEBOOL fInitialOwner,	//Flag for initial ownershipcbLPCTSTRlpszMutexNameNULLLPCTSTR lpszMutexName,	//address of mutex-object name
CreateNamedPipeHANDLE00tbLPCTSTRlpNameLPCTSTR lpName,	//Address of pipe namexbDWORDPIPE_ACCESS_DUPLEXPIPE_ACCESS_INBOUNDPIPE_ACCESS_OUTBOUNDFILE_FLAG_OVERLAPPEDWRITE_DACWRITE_OWNERACCESS_SYSTEM_SECURITYDWORD dwOpenMode,	//Pipe open modexbDWORD0PIPE_TYPE_BYTEPIPE_TYPE_MESSAGEPIPE_READMODE_BYTEPIPE_READMODE_MESSAGEPIPE_WAITPIPE_NOWAITDWORD dwPipeMode,	//Pipe-specific modescbDWORDnMaxInstancesPIPE_UNLIMITED_INSTANCES1DWORD nMaxInstances,	//Maximum number of instancestbDWORDnOutBufferSizeDWORD nOutBufferSize,	//Out buffer size in bytestbDWORDnInBufferSizeDWORD nInBufferSize,	//In buffer size in bytestbDWORDnDefaultTimeOutDWORD nDefaultTimeOut,	//time-out time in millisecondstbLPSECURITY_ATTRIBUTESlpSecurityAttributesLPSECURITY_ATTRIBUTES lpSecurityAttributes	//security attributes
CreatePaletteHPALETTE00tbCONSTLOGPALETTE *lplgplCONST LOGPALETTE *lplgpl	//Address of logical color palette
CreatePatternBrushHBRUSH00tbHBITMAPhbmpHBITMAP hbmp	//handle of bitmap
CreatePenHPEN00rbintPS_SOLIDPS_DASHPS_DOTPS_DASHDOTPS_DASHDOTDOTPS_NULLPS_INSIDEFRAMEint fnPenStyle,	//Pen stylecbintnWidth0int nWidth,	//Pen widthtbCOLORREFcrColorCOLORREF crColor,	//Pen color
CreatePenIndirectHPEN00tbCONSTLOGPEN*lplgpnCONST LOGPEN * lplgpn,	//Address of LOGPEN structure
CreatePipeBOOL00tbPHANDLEphReadPHANDLE phRead,	//Address of variable for read handletbPHANDLEphWritePHANDLE phWrite,	//Address of variable for write handlecbLPSECURITY_ATTRIBUTESlpsaNULLLPSECURITY_ATTRIBUTES lpsa,	//Address of security attributestbDWORDcbPipeDWORD cbPipe	//Number of bytes reserved for pipe
CreatePolygonRgnHGRN00tbCONSTPOINT*lpptlpptCONST POINT *lppt,	//Address of array of pointstbintcPointsint cPoints,	//Number of points in arraycbintfnPolyFillModeALTERNATEWINDINGint fnPolyFillMode	//Polygon-filling mode
CreatePolyPolygonRgnHGRN00tbCONSTPOINT *lpptlpptCONST POINT *lppt,	//Address of array of pointstbCONST INT *cPointsCONST INT *lpPolyCounts,	//Address of array that contains vertex countstbintnCountint nCount,	//Number of integers in array of vertex countscbintfnPolyFillModeALTERNATEWINDINGint fnPolyFillMode	//Polygon-filling mode
CreateProcessBOOL00cbLPCTSTRlpszImageNameNULLzLPCTSTR lpszImageName,	//Address of module namecbLPCTSTRlpszCommandLineNULLLPCTSTR lpszCommandLine,	//Address of command linecbLPSECURITY_ATTRIBUTESlpsaProcessNULLLPSECURITY_ATTRIBUTES lpsaProcess,	//Address of process security attrscbLPSECURITY_ATTRIBUTESlpsaThreadNULLLPSECURITY_ATTRIBUTES lpsaThread,	//Address of thread security attrscbBOOLfInheritHandlesTRUEFALSEBOOL fInheritHandles,	//New process inherits handlesxbDWORDDEBUG_PROCESSDEBUG_ONLY_THIS_PROCESSCREATE_SUSPENDEDDETACHED_PROCESSCREATE_NEW_CONSOLECREATE_NEW_PROCESS_GROUPIDLE_PRIORITY_CLASSNORMAL_PRIORITY_CLASSHIGH_PRIORITY_CLASSREALTIME_PRIORITY_CLASSDWORD fdwCreate,	//Creation flagscbLPVOIDlpvEnvironmentNULLLPVOID lpvEnvironment,	//Address of new environment blockcbLPCTSTRlpszCurDirNULLLPCTSTR lpszCurDir,	//Address of current directory nametbLPSTARTUPINFOlpsiStartInfoLPSTARTUPINFO lpsiStartInfo,	//Address of STARTUPINFOtbLPPROCESS_INFORMATIONlppiProcInfoLPPROCESS_INFORMATION lppiProcInfo	//Address of PROCESS_INFORMATION
CreateRectRgnHGRN00tbintnLeftRectint nLeftRect,	//X-coordinate of upper left cornertbintnTopRectint nTopRect,	//Y-coordinate of upper left cornertbintnRightRectint nRightRect,	//X-coordinate of lower right cornertbintnBottomRectint nBottomRect	//Y-coordinate of lower right corner
CreateRectRgnIndirectHRGN00tbCONSTRECT *lprcCONST RECT *lprc	//Address of the rectangle
CreateRemoteThreadHANDLE00tbHANDLEhProcessHANDLE hProcess,	//Handle to process to create thread incbLPSECURITY_ATTRIBUTESlpsaNULLLPSECURITY_ATTRIBUTES lpsa,	//Address of thread security attrstbDWORDcbStackDWORD cbStack,	//Initial thread stack sizetbLPTHREAD_START_ROUTINElpStartAddrLPTHREAD_START_ROUTINE lpStartAddr,	//Address of thread functiontbLPVOIDlpvThreadParmLPVOID lpvThreadParm,	//Address of argument for new threadcbDWORDfdwCreate0CREATE_SUSPENDEDDWORD fdwCreate,	//Creation flagstbLPDWORDlpIDThreadLPDWORD lpIDThread	//Address of returned thread identifier
CreateRoundRectRgnHRGN00tbintnLeftRectint nLeftRect,	//X-coordinate upper left corner of regiontbintnTopRectint nTopRect,	//Y-coordinate upper left corner of regiontbintnRightRectint nRightRect,	//X-coordinate lower right corner of regiontbintnBottomRectint nBottomRect,	//Y-coordinate lower right corner of regiontbintnWidthEllipseint nWidthEllipse,	//Height of ellipse for rounded cornerstbintnHeightEllipseint nHeightEllipse	//Width of ellipse for rounded corners
CreateScalableFontResourceBOOL00rbDWORD0 - Font has read-write permission1 - Font has read-only permissionDWORD fdwHidden,	//Flag for read-only embedded fonttbLPCTSTRlpszFontResLPCTSTR lpszFontRes,	//Address of filename for font resourcetbLPCTSTRlpszFontFileLPCTSTR lpszFontFile,	//Address of filename for scalable fonttbLPCTSTRlpszCurrentPathLPCTSTR lpszCurrentPath	//Address of path to font file
CreateSemaphoreHANDLE00cbLPSECURITY_ATTRIBUTESlpsaNULLLPSECURITY_ATTRIBUTES lpsa,	//Address of security attributescbLONGcSemInitial0LONG cSemInitial,	//Initial counttbLONGcSemMaxLONG cSemMax,	//Maximum countcbLPCTSTRlpszSemNameNULLLPCTSTR lpszSemName	//Address of semaphore-object name
CreateServiceSC_HANDLE00tbSC_HANDLEschSCManagerSC_HANDLE schSCManager,	//Handle of service control manager databasetbLPCTSTRlpszServiceNameLPCTSTR lpszServiceName,	//Address of name of service to starttbLPCTSTRlpszDisplayNameLPCTSTR lpszDisplayName,	//Address of display namexbDWORDSERVICE_ALL_ACCESSSERVICE_CHANGE_CONFIGSERVICE_ENUMERATE_DEPENDENTSSERVICE_INTERROGATESERVICE_PAUSE_CONTINUESERVICE_QUERY_CONFIGSERVICE_QUERY_STATUSSERVICE_STARTSERVICE_STOPSERVICE_USER_DEFINE_CONTROLDELETEREAD_CONTROLWRITE_DAC|WRITE_OWNERGENERIC_READGENERIC_WRITEGENERIC_EXECUTEDWORD fdwDesiredAccess,	//Type of access to servicerbDWORDSERVICE_WIN32_OWN_PROCESSSERVICE_WIN32_SHARE_PROCESSSERVICE_KERNEL_DRIVERSERVICE_FILE_SYSTEM_DRIVERDWORD fdwServiceType,	//Type of servicerbDWORDSERVICE_BOOT_STARTSERVICE_SYSTEM_STARTSERVICE_AUTO_STARTSERVICE_DEMAND_STARTSERVICE_DISABLEDDWORD fdwStartType,	//When to start servicerbDWORDSERVICE_ERROR_IGNORESERVICE_ERROR_NORMALSERVICE_ERROR_SEVERESERVICE_ERROR_CRITICALDWORD fdwErrorControl,	//Severity if service fails to starttbLPCTSTRlpszBinaryPathNameLPCTSTR lpszBinaryPathName,	//Address of name of binary filecbLPCTSTRlpszLoadOrderGroupNULLLPCTSTR lpszLoadOrderGroup,	//Address of name of load ordering groupcbLPDWORDlpdwTagIDNULLLPDWORD lpdwTagID,	//Address of variable to get tag identifiercbLPCTSTRlpszDependenciesNULLLPCTSTR lpszDependencies,	//Address of array of dependency namescbLPCTSTRlpszServiceStartNameNULLLPCTSTR lpszServiceStartName,	//Address of account name of servicetbLPCTSTRlpszPasswordLPCTSTR lpszPassword	//Address of password for service account
CreateSolidBrushHBRUSH00tbCOLORREFcrColorCOLORREF crColor	//Brush color value
CreateTapePartitionDWORD00tbHANDLEhDeviceHANDLE hDevice,	//Handle of open devicerbDWORDTAPE_FIXED_PARTITIONSTAPE_INITIATOR_PARTITIONSTAPE_SELECT_PARTITIONSDWORD dwPartitionMethod,	//Type of new partitiontbDWORDdwCountDWORD dwCount,	//Number of new partitions to createtbDWORDdwSizeDWORD dwSize	//Size of new partition, in megabytes
CreateThreadHANDLE00cbLPSECURITY_ATTRIBUTESlpsaNULLLPSECURITY_ATTRIBUTES lpsa,	//Address of thread security attrscbDWORDcbStack0DWORD cbStack,	//Initial thread stack sizetbLPTHREAD_START_ROUTINElpStartAddrLPTHREAD_START_ROUTINE lpStartAddr,	//Address of thread functiontbLPVOIDlpvThreadParmLPVOID lpvThreadParm,	//Argument for new threadtbDWORDfdwCreateDWORD fdwCreate,	//Creation flagstbLPDWORDlpIDThreadLPDWORD lpIDThread	//Address of returned thread ID
CreateWindowHWND00cbLPCTSTRlpszClassName"COMBOBOX""EDIT""LISTBOX""MDICLIENT""SCROLLBAR""STATIC""BUTTON"LPCTSTR lpszClassName,	//address of registered class nametbLPCSTRlpszWindowNameLPCTSTR lpszWindowName,	//address of window namexbDWORDWS_BORDERWS_CAPTIONWS_CHILDWS_CHILDWINDOWWS_CLIPCHILDRENWS_CLIPSIBLINGSWS_DISABLEDWS_DLGFRAMEWS_GROUPWS_HSCROLLWS_MAXIMIZEWS_MAXIMIZEBOXWS_MINIMIZEWS_MINIMIZEBOXWS_OVERLAPPEDWS_OVERLAPPEDWINDOWWS_POPUPWS_POPUPWINDOWWS_SYSMENUWS_TABSTOPWS_THICKFRAMEWS_VISIBLEWS_VSCROLLDWORD dwStyle,	//window stylecbintxCW_USEDEFAULTint x,	//horizontal position of windowcbintyCW_USEDEFAULTint y,	//vertical position of windowcbintCW_USEDEFAULTnWidthint nWidth,	//window widthcbintCW_USEDEFAULTnHeightint nHeight,	//window heighttbHWNDhwndParentHWND hwndParent,	//handle of parent or owner windowtbHMENUhmenuHMENU hmenu,	//handle of menu, or child-window identifiertbHANDLEhinstHANDLE hinst,	//handle of application instancetbLPVOIDlpvParamLPVOID lpvParam	//address of window-creation data
CreateWindowExHWND00rbDWORDWS_EX_ACCEPTFILESWS_EX_DLGMODALFRAMEWS_EX_NOPARENTNOTIFYWS_EX_TOPMOSTWS_EX_TRANSPARENTDWORD dwExStyle,	//Extended window stylecbLPCTSTRlpszClassName"COMBOBOX""EDIT""LISTBOX""MDICLIENT""SCROLLBAR""STATIC""BUTTON"LPCTSTR lpszClassName,	//address of registered class nametbLPCSTRlpszWindowNameLPCTSTR lpszWindowName,	//address of window namexbDWORDWS_BORDERWS_CAPTIONWS_CHILDWS_CHILDWINDOWWS_CLIPCHILDRENWS_CLIPSIBLINGSWS_DISABLEDWS_DLGFRAMEWS_GROUPWS_HSCROLLWS_MAXIMIZEWS_MAXIMIZEBOXWS_MINIMIZEWS_MINIMIZEBOXWS_OVERLAPPEDWS_OVERLAPPEDWINDOWWS_POPUPWS_POPUPWINDOWWS_SYSMENUWS_TABSTOPWS_THICKFRAMEWS_VISIBLEWS_VSCROLLDWORD dwStyle,	//window stylecbintxCW_USEDEFAULTint x,	//horizontal position of windowcbintyCW_USEDEFAULTint y,	//vertical position of windowcbintCW_USEDEFAULTnWidthint nWidth,	//window widthcbintCW_USEDEFAULTnHeightint nHeight,	//window heighttbHWNDhwndParentHWND hwndParent,	//handle of parent or owner windowtbHMENUhmenuHMENU hmenu,	//handle of menu, or child-window identifiertbHANDLEhinstHANDLE hinst,	//handle of application instancetbLPVOIDlpvParamLPVOID lpvParam	//address of window-creation data
DdeAbandonTransactionBOOL00tbDWORDidInstDWORD idInst,	//Instance identifiertbHCONVhconvHCONV hconv,	//Handle of conversationtbDWORDidTransactionDWORD idTransaction	//Transaction identifier
DdeAccessDataLPBYTE00tbHDDEDATAhdataHDDEDATA hdata,	//Handle of DDE objectcbLPDWORDlpcbDataNULLLPDWORD lpcbData	//Pointer to variable that receives data length
DdeAddDataHDDEDATA00tbHDDEDATAhdataHDDEDATA hdata,	//Handle of DDE data objecttbLPBYTElpbSrcBufLPBYTE lpbSrcBuf,	//Address of source buffertbDWORDcbAddDataDWORD cbAddData,	//Length of datatbDWORDoffObjDWORD offObj	//Offset within DDE data object
DdeCallbackHDDEDATACALLBACK00tbUINTXCLASS_BOOLXTYP_ADVSTARTXTYP_CONNECTXCLASS_DATAXTYP_ADVREQXTYP_REQUESTXTYP_WILDCONNECTXCLASS_FLAGSXTYP_ADVDATAXTYP_EXECUTEXTYP_POKEXCLASS_NOTIFICATIONXTYP_ADVSTOPXTYP_CONNECT_CONFIRMXTYP_DISCONNECTXTYP_ERRORXTYP_MONITORXTYP_REGISTERXTYP_XACT_COMPLETEXTYP_UNREGISTERUINT uType,	//Transaction typetbUINTuFmtUINT uFmt,	//Clipboard data formattbHCONVhconvHCONV hconv,	//Handle of the conversationtbHSZhsz1HSZ hsz1,	//Handle of a stringtbHSZhsz2HSZ hsz2,	//Handle of a stringtbHDDEDATAhdataHDDEDATA hdata,	//Handle of a global memory objecttbDWORDdwData1DWORD dwData1,	//Transaction-specific datatbDWORDdwData2DWORD dwData2	//Transaction-specific data
DdeClientTransactionHDDEDATA00cbLPBYTElpbDataNULL&pbDataLPBYTE lpbData,	//Address of data to pass to servercbDWORDcbData0xFFFFFFFFDWORD cbData,	//Length of datatbHCONVhconvHCONV hconv,	//Handle of conversationcbHSZhszItem0LHSZ hszItem,	//Handle of item-name stringcbUINTuFmt0UINT uFmt,	//Clipboard data formatrbUINTXTYP_ADVSTARTXTYPF_NODATAXTYPF_ACKREQXTYP_ADVSTOPXTYP_EXECUTEXTYP_POKEXTYP_REQUESTUINT uType,	//Transaction typetbDWORDTIMEOUT_ASYNCDWORD uTimeout,	//Time-out durationcbLPDWORDlpdwResultNULLLPDWORD lpdwResult,	//Points to transaction result
DdeCmpStringHandlesint00tbHSZhsz1HSZ hsz1,	//Handle of first stringtbHSZhsz2HSZ hsz2	//Handle of second string
DdeConnectHCONV00tbDWORDidInstDWORD idInst,	//Instance identifiercbHSZhszService0LHSZ hszService,	//Handle of service-name stringcbHSZhszTopic0LHSZ hszTopic,	//Handle of topic-name stringcbPCONVCONTEXTpCCNULLPCONVCONTEXT pCC	//Address of structure with context data
DdeConnectListHCONVLIST00tbDWORDidInstDWORD idInst,	//Instance identifiercbHSZhszServiceOLHSZ hszService,	//Handle of service-name stringcbSZhszTopic0LSZ hszTopic,	//Handle of topic-name stringcbHCONVLISThConvList0LHCONVLIST hConvList,	//Handle of conversation listcbPCONVCONTEXTpCCNULLPCONVCONTEXT pCC,	//Address of structure with context data
DdeCreateDataHandleHDDEDATA00tbDWORDidInstDWORD idInst,	//Instance identifiercbLPBYTElpbSrcBufNULLLPBYTE lpbSrcBuf,	//Address of source buffercbDWORDcbInitData0DWORD cbInitData,	//Length of DDE objecttbDWORDoffSrcBufDWORD offSrcBuf,	//Offset from beginning of source buffertbDWORDoffSrcBufDWORD offSrcBuf,	//Offset from beginning of source buffercbHSZhszItem0LHSZ hszItem,	//Handle of item-name stringtbUINTuFmtUINT uFmt,	//Clipboard data formatcbUINTafCmdHDATA_APPOWNEDUINT afCmd	//Creation flags
DdeCreateStringHandleHSZ00tbDWORDidInstDWORD idInst,	//Instance identifiertbLPTSTRlpszStringLPTSTR lpszString,	//Address of null-terminated stringrbintCP_WINANSICP_WINUNICODEint codepage,	//Code page identifier
DdeDisconnectBOOL00tbHCONVhconvHCONV hconv	//Handle of conversation
DdeDisconnectListBOOL00tbHCONVLISThConvListHCONVLIST hConvList	//Handle of conversation list
DdeEnableCallbackBOOL00tbDWORDidInstDWORD idInst,	//Instance identifiercbHCONVhconv0LHCONV hconv,	//Handle of conversationrbUINTEC_ENABLEALLEC_ENABLEONEEC_DISABLEEC_QUERYWAITINGUINT uCmd	//The enable/disable function code
DdeFreeDataHandleBOOL00tbHDDEDATAhdataHDDEDATA hdata	//Handle of DDE object
DdeFreeStringHandleBOOL00tbDWORDidInstDWORD idInst,	//Instance identifiertbHSZhszHSZ hsz	//Handle of string
DdeGetDataDWORD00tbHDDEDATAhdataHDDEDATA hdata,	//Handle of DDE objectcbLPBYTElpbDestNULLLPBYTE lpbDest,	//Address of destination buffertbDWORDcbMaxDWORD cbMax,	//Amount of data to copytbDWORDoffSrcDWORD offSrc	//Offset to beginning of data
DdeGetLastErrorUINT00tbDWORDidInstDWORD idInst	//Instance identifier
DdeImpersonateClientBOOL00tbHCONVhConvHCONV hConv	//Handle of DDE conversation
DdeInitializeUINT00tbLPDWORDlpidInstLPDWORD lpidInst,	//Address of instance identifiertbPFNCALLBACKpfnCallbackPFNCALLBACK pfnCallback,	//Address of callback functionxbDWORDAPPCLASS_MONITORAPPCLASS_STANDARDAPPCMD_CLIENTONLYAPPCMD_FILTERINITSCBF_FAIL_ALLSVRXACTIONSCBF_FAIL_ADVISESCBF_FAIL_CONNECTIONSCBF_FAIL_EXECUTESCBF_FAIL_POKESCBF_FAIL_REQUESTSCBF_FAIL_SELFCONNECTIONSCBF_SKIP_ALLNOTIFICATIONSCBF_SKIP_CONNECT_CONFIRMSCBF_SKIP_DISCONNECTSCBF_SKIP_REGISTRATIONSCBF_SKIP_UNREGISTRATIONSMF_CALLBACKSMF_CONVMF_ERRORSMF_HSZ_INFOMF_LINKSMF_POSTMSGSMF_SENDMSGSDWORD afCmd,	//Set of command and filter flagscbDWORD0uResDWORD uRes	//Reserved
DdeKeepStringHandleBOOL00tbDWORDidInstDWORD idInst,	//Instance identifiertbHSZhszHSZ hsz	//Handle of string
DdeNameServiceHDDEDATA00tbDWORDidInstDWORD idInst,	//Instance identifiertbHSZhsz1HSZ hsz1,	//Handle of service-name stringcbHSZ0hszResHSZ hszRes,	//ReservedxbUINTDNS_REGISTERDNS_UNREGISTERDNS_FILTERONDNS_FILTEROFFUINT afCmd	//Service-name flags
DdePostAdviseBOOLl00tbDWORDidInstDWORD idInst,	//Instance identifiercbHSZhszTopic0LHSZ hszTopic,	//Handle of topic-name stringcbHSZhszItem0LHSZ hszItem	//Handle of item-name string
DdeQueryConvInfoUINT00tbHCONVhconvHCONV hconv,	//Handle of conversationcbDWORDidTransactionQID_SYNCDWORD idTransaction,	//Transaction identifiertbPCONVINFOlpConvInfoPCONVINFO lpConvInfo	//Address of structure with conversation data
DdeQueryNextServerHCONV00tbHCONVLISThConvListHCONVLIST hConvList,	//Handle of conversation listcbHCONV0LhConvPrevHCONV hConvPrev	//Previous conversation handle
DdeQueryStringDWORD00tbDWORDidInstDWORD idInst,	//Instance identifiertbHSZhszHSZ hsz,	//Handle of stringcbLPTSTRlpszNULLLPTSTR lpsz,	//Address of destination buffertbDWORDcchMaxDWORD cchMax,	//Length of bufferrbintCP_WINANSICP_WINUNICODEint codepage	//Code page identifier
DdeReconnectHCONV00tbHCONVhconvHCONV hconv	//Handle of conversation to reestablish
DdeSetQualityOfServiceBOOL00tbHWNDhwndClientHWND hwndClient,	//Window that will start DDE conversationstbCONSTpqosNewCONST SECURITY_QUALITY_OF_SERVICE * pqosNew,	//Desired quality of servicecbPSECURITY_QUALITY_OF_SERVICEpqosPrevNULLPSECURITY_QUALITY_OF_SERVICE pqosPrev	//Prior quality of service	
DdeSetUserHandleBOOL00tbHCONVhconvHCONV hconv,	//Handle of conversationcbDWORDidQID_SYNCDWORD id,	//Transaction identifiertbDWORDhUserDWORD hUser	//Application-defined value
DdeUnaccessDataBOOL00tbHDDEDATAhDataHDDEDATA hData	//Handle of DDE object
DdeUninitializeBOOL00tbDWORDidInstDWORD idInst	//Instance identifier
DebugActiveProcessBOOL00tbDWORDidProcessDWORD idProcess	//Process to be debugged
DefDlgProcLRESULT00tbHWNDhwndDlgHWND hwndDlg,	//Handle of dialog boxtbUINTuMsgUINT uMsg,	//MessagetbWPARAMwParamWPARAM wParam,	//First message parametertbLPARAMlParamLPARAM lParam	//Second message parameter
DeferWindowPosHDWP00tbHDWPhdwpHDWP hdwp,	//Handle of internal structuretbHWNDhwndHWND hwnd,	//Handle of window to positioncbHWNDhwndInsertAfterHWND_BOTTOMHWND_NOTOPMOSTHWND_TOPHWND_TOPMOSTHWND hwndInsertAfter,	//Placement-order handletbintxint x,	//Horizontal positiontbintyint y,	//Vertical positiontbintcxint cx,	//Widthtbintcyint cy,	//HeightxbUINTSWP_DRAWFRAMESWP_HIDEWINDOWSWP_NOACTIVATESWP_NOMOVESWP_NOREDRAWSWP_NOSIZESWP_NOZORDERSWP_SHOWWINDOWUINT dwFlags	//Window-positioning flags
DefFrameProcLRESULT00tbHWNDhwndFrameHWND hwndFrame,	//Handle of MDI frame windowtbHWNDhwndMDIClientHWND hwndMDIClient,	//Handle of MDI client windowtbUINTuMsgUINT uMsg,	//MessagetbWPARAMwParamWPARAM wParam,	//First message parametertbLPARAMlParamLPARAM lParam	//Second message parameter
DefineDosDeviceBOOL00xbDWORDDDD_RAW_TARGET_PATHDDD_REMOVE_DEFINITIONDDD_EXACT_MATCH_ON_REMOVEDWORD dwFlags,	//Flags specifying aspects of device definitiontbLPCTSTRlpDeviceNameLPCTSTR lpDeviceName,	//Pointer to DOS device name stringtbLPCTSTRlpTargetPathLPCTSTR lpTargetPath	//Pointer to DOS or Windows NT path string
DefMDIChildProcLRESULT00tbHWNDhwndChildHWND hwndChild,	//Handle of MDI child windowtbUINTuMsgUINT uMsg,	//MessagetbWPARAMwParamWPARAM wParam,	//First message parametertbLPARAMlParamLPARAM lParam	//Second message parameter
DefScreenSaverProcLONG00tbHWNDhwndHWND hwnd,	//Handle of screen saver windowtbUINTuMsgUINT uMsg,	//MessagetbWPARAMwParamWPARAM wParam,	//First message parametertbLPARAMlParamLPARAM lParam	//Second message parameter
DefWindowProcLRESULT00tbHWNDhwndHWND hwnd,	//Handle of windowtbUINTuMsgUINT uMsg,	//Message identifiertbWPARAMwParamWPARAM wParam,	//First message parametertbLPARAMlParamLPARAM lParam	//Second message parameter
DeleteAceBOOL00tbPACLpAclPACL pAcl,	//Address of access-control listtbDWORDdwAceIndexDWORD dwAceIndex	//Index of ACE position in ACL
DeleteAtom00tbATOMatmATOM atm	//Atom to delete
DeleteCriticalSectionVOID00tbLPCRITICAL_SECTIONlpcsCriticalSectionLPCRITICAL_SECTION lpcsCriticalSection	//Address of critical section object
DeleteDCBOOL00tbLPCRITICAL_SECTIONlpcsCriticalSectionLPCRITICAL_SECTION lpcsCriticalSection	//Address of critical section object
DeleteEnhMetaFileBOOL00tbHENHMETAFILEhemfHENHMETAFILE hemf	//Handle of an enhanced metafil
DeleteFileBOOL00tbLPCTSTRlpszFileNameLPCTSTR lpszFileName	//Address of the name of the file to delete
DeleteFormBOOL00tbHANDLEhPrinterHANDLE hPrinter,	//Handle of printer objecttbLPTSTRlpszFormNameLPTSTR lpszFormName	//Address of form name
DeleteMenuBOOL00tbHMENUhmenuHMENU hmenu,	//Handle of menutbUINTuItemUINT uItem,	//Menu item identifier or positionrbUINTMF_BYCOMMANDMF_BYPOSITIONUINT fuFlags	//Menu item flag
DeleteMetaFileBOOL00tbHMETAFILEhmfHMETAFILE hmf	//Handle of Windows-format metafile
DeleteMonitorBOOL00cbLPTSTRpNameNULLLPTSTR pName,	//Server namecbLPTSTRpEnvironmentNULLLPTSTR pEnvironment,	//Environment stringtbLPTSTRpMonitorNameLPTSTR pMonitorName	//Monitor name
DeleteObjectBOOL00tbHGDIOBJhObjectHGDIOBJ hObject	//Handle of graphic object
DeletePortBOOL00cbLPTSTRlpszNameNULLLPTSTR lpszName,	//Address of server nametbHWNDhwndHWND hwnd,	//Handle of window that displays dialog boxtbLPTSTRlpszPortNameLPTSTR lpszPortName	//Address of port name
DeletePrinterBOOL00tbHANDLEhPrinterHANDLE hPrinter	//Handle of printer object
DeletePrinterConnectionBOOL00tbLPTSTRpNameLPTSTR pName	//Address of printer name
DeletePrinterDriverBOOL00cbLPTSTRlpszNameNULLLPTSTR lpszName,	//Address of server namecbLPTSTRlpszEnvironmentNULLLPTSTR lpszEnvironment,	//Address of environmenttbLPTSTRlpszDriverNameLPTSTR lpszDriverName	//Address of driver name
DeletePrintProcessorBOOL00cbLPTSTRpNameNULLPTSTR pName,	//Server namecbLPTSTRpEnvironmentNULLLPTSTR pEnvironment,	//Environment stringtbLPTSTRpPrintProcessorNameLPTSTR pPrintProcessorName	//Processor name
DeletePrintProvidorBOOL00cbLPTSTRpNameNULLLPTSTR pName,	//Server namecbLPTSTRpEnvironmentNULLLPTSTR pEnvironment,	//Environment stringtbLPTSTRpPrintProvidorNameLPTSTR pPrintProvidorName	//Providor name
DeleteServiceBOOL00tbSC_HANDLEschServiceSC_HANDLE schService	//Handle of service
DeregisterEventSourceBOOL00tbHANDLEhEventLogHANDLE hEventLog	//Handle to event log
DestroyAcceleratorTableBOOL00tbHACCELhacclHACCEL haccl	//Handle of accelerator table
DestroyIconBOOL00tbHICONhiconHICON hicon	//Handle of icon to destroy
DestroyMenuBOOL00tbHMENUhmenuHMENU hmenu	//Handle of menu to destroy
DestroyPrivateObjectSecurityBOOL00tbPSECURITY_DESCRIPTOR *lppsdObjectPSECURITY_DESCRIPTOR *lppsdObject	//Address of pointer to SD
DestroyWindowBOOL00tbHWNDhwndHWND hwnd	//Handle of window to destroy
DeviceCapabilitiesDWORD00tbLPCTSTRpDeviceLPCTSTR pDevice,	//Address of device-name stringtbLPCTSTRpPortLPCTSTR pPort,	//Address of port-name stringrbWORDDC_BINNAMESDC_BINSDC_COPIESDC_DRIVERDC_DUPLEXDC_ENUMRESOLUTIONSDC_EXTRADC_FIELDSDC_FILEDEPENDENCIESDC_MAXEXTENTDC_MINEXTENTDC_ORIENTATIONDC_PAPERNAMESDC_PAPERSDC_PAPERSIZEDC_SIZEDC_TRUETYPEDC_VERSIONWORD fwCapability,	//Device capability to querycbLPTSTRpOutputNULLLPTSTR pOutput,	//Address of the outputcbCONST DEVMODE *pDevModeNULLCONST DEVMODE * pDevMode	//Address of structure with device data
DeviceIoControlBOOL00tbHANDLEhDeviceHANDLE hDevice,	//Handle of the devicerbDWORDIOCTL_DISK_CHECK_VERIFYIOCTL_DISK_EJECT_MEDIAIOCTL_DISK_FORMAT_TRACKSIOCTL_DISK_GET_DRIVE_GEOMETRYIOCTL_DISK_GET_DRIVE_LAYOUTIOCTL_DISK_GET_MEDIA_TYPESIOCTL_DISK_GET_PARTITION_INFOIOCTL_DISK_LOAD_MEDIAIOCTL_DISK_MEDIA_REMOVALIOCTL_DISK_PERFORMANCEIOCTL_DISK_REASSIGN_BLOCKSIOCTL_DISK_SET_DRIVE_LAYOUTIOCTL_DISK_SET_PARTITION_INFOIOCTL_DISK_VERIFYIOCTL_SERIAL_LSRMST_INSERTDWORD dwIoControlCode,	//Control code of operation to performcbLPVOIDlpvInBufferNULLLPVOID lpvInBuffer,	//Address of buffer for input datatbDWORDcbInBufferDWORD cbInBuffer,	//Size of input buffercbLPVOIDlpvOutBufferNULLLPVOID lpvOutBuffer,	//Address of output buffertbDWORDcbOutBufferDWORD cbOutBuffer,	//Size of output buffertbLPDWORDlpcbBytesReturnedLPDWORD lpcbBytesReturned,	//Address of actual bytes of outputtbLPOVERLAPPEDlpoOverlappedLPOVERLAPPED lpoOverlapped	//Address of overlapped structure
DialogBoxint00tbHANDLEhinstHANDLE hinst,	//Handle of application instancetbLPCTSTRlpszTemplateLPCTSTR lpszTemplate,	//Identifies dialog box templatetbHWNDhwndOwnerHWND hwndOwner,	//Handle of owner windowtbDLGPROCdlgprcDLGPROC dlgprc	//Address of dialog box procedure
DialogBoxIndirectint00tbHANDLEhinstHANDLE hinst,	//Handle of application instancetbLPDLGTEMPLATEhTemplateLPDLGTEMPLATE hTemplate,	//Identifies dialog box templatetbHWNDhwndOwnerHWND hwndOwner,	//Handle of owner windowtbDLGPROCdlgprcDLGPROC dlgprc	//Address of dialog box procedure
DialogBoxIndirectParamint00tbHINSTANCEhinstHINSTANCE hinst,	//Handle of application instancetbLPCDLGTEMPLATEhTemplateLPCDLGTEMPLATE hTemplate,	//Identifies dialog box templatetbHWNDhwndOwnerHWND hwndOwner,	//Handle of owner windowtbDLGPROCdlgprcDLGPROC dlgprc,	//Address of dialog box proceduretbLPARAMlParamInitLPARAM lParamInit	//Initialization value
DialogBoxParamint00tbHINSTANCEhinstHINSTANCE hinst,	//Handle of application instancetbLPCTSTRlpszTemplateLPCTSTR lpszTemplate,	//Identifies dialog box templatetbHWNDhwndOwnerHWND hwndOwner,	//Handle of owner windowtbDLGPROCdlgprcDLGPROC dlgprc,	//Address of dialog box proceduretbLPARAMlParamInitLPARAM lParamInit	//Initialization value
DialogProcBOOL00tbHWNDhwndDlgHWND hwndDlg,	//Handle of dialog boxtbUINTuMsgUINT uMsg,	//MessagetbWPARAMwParamWPARAM wParam,	//First message parametertbLPARAMlParamLPARAM lParam	//Second message parameter
DisableThreadLibraryCallsBOOL00tbHMODULEhLibModuleHMODULE  hLibModule	// dynamic-link library for which calls are to be disabled
DisconnectNamedPipeBOOL00tbHANDLEhNamedPipeHANDLE hNamedPipe	//Handle of named pipe
DispatchMessageLONG00tbCONSTMSG*lpmsgCONST MSG *lpmsg	//Address of structure with message
DlgDirListint00tbHWNDhwndDlgHWND hwndDlg,	//Handle of dialog box with list boxtbLPTSTRlpszPathLPTSTR lpszPath,	//Address of path or filename stringcbintidListBox0int idListBox,	//Identifier of list boxcbintidStaticPath0int idStaticPath,	//Identifier of static controlxbUINTDDL_ARCHIVEDDL_DIRECTORYDDL_DRIVESDDL_EXCLUSIVEDDL_HIDDENDDL_READONLYDDL_READWRITEDDL_SYSTEMDDL_POSTMSGSUINT uFileType	//File attributes to display
DlgDirListComboBoxint00tbHWNDhwndDlgHWND hwndDlg,	//Handle of dialog box with combo boxtbLPTSTRlpPathSpecLPTSTR lpPathSpec,	//Address of path or filename stringcbintnIDComboBox0int nIDComboBox,	//Identifier of combo boxtbintnIDStaticPathint nIDStaticPath,	//Identifier of static controlxbUINTDDL_ARCHIVEDDL_DIRECTORYDDL_DRIVESDDL_EXCLUSIVEDDL_HIDDENDDL_READONLYDDL_READWRITEDDL_SYSTEMDDL_POSTMSGSUINT uFiletype	//File attributes to display
DlgDirSelectComboBoxExBOOL00tbHWNDhwndDlgHWND hwndDlg,	//Handle of dialog box with list boxtbLPTSTRlpszPathLPTSTR lpszPath,	//Address of buffer for path stringtbintcchStringint cchString,	//Number of characters in path stringtbintnIDComboBoxint nIDComboBox	//Identifier of combo box
DlgDirSelectExBOOL00tbHWNDhwndDlgHWND hwndDlg,	//Handle of dialog box with list boxtbLPTSTRlpStringLPTSTR lpString,	//Address of buffer for path stringtbintcchStringint cchString,	//Number of characters in path stringtbintnIDListBoxint nIDListBox	//Identifier of list box
DllEntryPointBOOL00tbHINSTANCEhinstDLLHINSTANCE hinstDLL,	//Handle of DLL modulerbDWORDDLL_PROCESS_ATTACHDLL_THREAD_ATTACHDLL_THREAD_DETACHDLL_PROCESS_DETACHDWORD fdwReason,	//Why function was calledcbLPVOIDNULLlpvReservedLPVOID lpvReserved	//Reserved, must be NULL
DocumentPropertiesLONG00tbHWNDhwndHWND hwnd,	//Handle of window that displays dialog boxtbHANDLEhPrinterHANDLE hPrinter,	//Handle of printer objecttbLPTSTRpDeviceNameLPTSTR pDeviceName,	//Address of device nametbPDEVMODEpdmOutputPDEVMODE pdmOutput,	//Address of modified device mode structuretbPDEVMODEpdmInputPDEVMODE pdmInput,	//Address of original device mode structurexbDWORD0DM_IN_BUFFERDM_IN_PROMPTDM_OUT_BUFFERDWORD fMode	//Mode flag
DosDateTimeToFileTimeBOOL00tbWORDwDOSDateWORD wDOSDate,	//16-bit MS-DOS datetbWORDwDOSTimeWORD wDOSTime,	//16-bit MS-DOS timetbLPFILETIMElpftLPFILETIME lpft	//Address of buffer for 64-bit file time
DPtoLPBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbLPPOINTlpPointsLPPOINT lpPoints,	//Address of array of pointstbintnCountint nCount	//Count of points
DragAcceptFilesVOID00tbHWNDhWndHWND hWnd,	//Handle of the registering windowcbBOOLfAcceptTRUEFALSEBOOL fAccept	//Acceptance option
DragFinishVOID00tbHDROPhDropHDROP hDrop	//Handle of memory to free
DragQueryFileUINT00tbHDROPhDropHDROP hDrop,	//Handle of structure for dropped filestbUINTiFileUINT iFile,	//Index of file to querycbLPTSTRlpszFileNULLLPTSTR lpszFile,	//Buffer for returned filenametbUINTcbUINT cb	//Size of buffer for filename
DragQueryPointBOOL00tbHDROPhDropHDROP hDrop,	//Handle of structure for dropped filetbLPPOINTlpptLPPOINT lppt	//Address of structure for mouse coordinates
DrawEscapeint00tbHDChdcHDC hdc,	//Handle of device contexttbintnEscapeint nEscape,	//Specifies escape functiontbintcbInputint cbInput,	//Size of structure for inputtbLPCSTRlpszInDataLPCSTR lpszInData	//Address of structure for input
DrawFocusRectBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbCONST RECT *RECT *lprcCONST RECT *lprc	//Address of structure with rectangle
DrawIconBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbintXint X,	//X-coordinate of upper left cornertbintYint Y,	//Y-coordinate of upper left cornertbHICONhiconHICON hicon	//Handle of icon to draw
DrawMenuBarBOOL00tbHWNDhwndHWND hwnd	//Handle of window with menu bar to redraw
DrawTextint00tbHDChdcHDC hdc,	//Handle of device contextcbLPCTSTRlpszStr-1LPCTSTR lpszStr,	//Address of string to drawcbintcchStr-1int cchStr,	//String length, in characterstbLPRECTlprcLPRECT lprc,	//Address of structure with formatting dimensionsxbUINTDT_BOTTOMDT_CALCRECTDT_CENTERDT_EXPANDTABSDT_EXTERNALLEADINGDT_LEFTDT_NOCLIPDT_NOPREFIXDT_RIGHTDT_SINGLELINEDT_TABSTOPDT_TOPDT_VCENTERDT_WORDBREAKUINT wFormat	//Text-drawing flags
DuplicateHandleBOOL00tbHANDLEhSourceProcessHANDLE hSourceProcess,	//Handle of process to duplicate fromtbHANDLEhSourceHANDLE hSource,	//Handle to duplicatetbHANDLEhTargetProcessHANDLE hTargetProcess,	//Handle of process to duplicate tocbLPHANDLElphTargetNULLLPHANDLE lphTarget,	//Address of duplicate handletbDWORDfdwAccessDWORD fdwAccess,	//Access for duplicate handlecbBOOLfInheritTRUEFALSEBOOL fInherit,	//Handle inherited by child processxbDWORDDUPLICATE_CLOSE_SOURCEDUPLICATE_SAME_ACCESSDWORD fdwOptions	//Optional actions
DuplicateTokenBOOL00tbHANDLEhSourceTokenHANDLE hSourceToken,	//Handle of token to duplicatetbSECURITY_IMPERSONATION_LEVELsilSECURITY_IMPERSONATION_LEVEL sil,	//Impersonation leveltbPHANDLEhDuplicateTokenPHANDLE hDuplicateToken	//Handle of duplicated token
EditWordBreakProc00tbHANDLEhSourceProcessHANDLE  hSourceProcess,	// handle of process with handle to duplicatetbHANDLEhSourceHANDLE  hSource,	// handle to duplicatetbHANDLEhTargetProcessHANDLE  hTargetProcess,	// handle of process to duplicate totbLPHANDLElphTargetLPHANDLE  lphTarget,	// address of duplicate handletbDWORDfdwAccessDWORD  fdwAccess,	// access for duplicate handletbBOOLfInheritBOOL  fInherit,	// handle inheritance flagtbDWORDfdwOptionsDWORD  fdwOptions	// optional actions
EllipseBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbintnLeftRectint nLeftRect,	//X-coord. of bounding rect. upper-left cornertbintnTopRectint nTopRect,	//Y-coord. of bounding rect. upper-left cornertbintnRightRectint nRightRect,	//X-coord. of bounding rect. lower-right cornertbintnBottomRectint nBottomRect	//Y-coord. of bounding rect. lower-right corner
EnableScrollBarBOOL00tbHWNDhwndHWND hwnd,	//Handle of window or scroll barrbUINTSB_BOTHSB_CTLSB_HORZSB_VERTUINT fuSBFlags,	//Scroll bar type flagrbUINTESB_ENABLE_BOTHESB_DISABLE_LTUPESB_DISABLE_RTDNESB_DISABLE_BOTHUINT fuArrowFlags	//Scroll bar arrow flag
EnableWindowBOOL00tbHWNDhwndHWND hwnd,	//Handle of windowcbBOOLfEnableTRUEFALSEBOOL fEnable	//Flag for enabling or disabling input
EndDeferWindowPosBOOL00tbHDWPhdwpHDWP hdwp	//Handle of internal structure
EndDialogBOOL00tbHWNDhwndDlgHWND hwndDlg,	//Handle of dialog boxtbintnResultint nResult	//Value to return
EndDoc00tbHDChdcHDC hdc	//handleof device context
EndDocPrinterBOOL00tbHANDLEhPrinterHANDLE hPrinter	//Handle of printer object
EndPageint00tbHDChdcHDC hdc	//Handle of device context
EndPagePrinterBOOL00tbHANDLEhPrinterHANDLE hPrinter	//Handle of printer object
EndPaintBOOL00tbHWNDhwndHWND hwnd,	//Handle of windowtbCONST PAINTSTRUCT *lpPaintCONST PAINTSTRUCT *lpPaint	//Address of structure for paint data
EndPathBOOL00tbHDChdcHDC hdc	//Handle of device context
EndUpdateResourceBOOL00tbHANDLEhUpdateFileHANDLE hUpdateFile,	//Update-file handlecbBOOLfDiscardTRUEFALSEBOOL fDiscard	//Write flag
EnhMetaFileProcint00tbHDChDCHDC hDC,	//Handle of device contexttbHANDLETABLE FAR *lpHTableHANDLETABLE FAR *lpHTable,	//Address of metafile handle tabletbENHMETARECORD FAR *lpEMFRENHMETARECORD FAR *lpEMFR,	//Address of metafile recordtbintnObjint nObj,	//Count of objectstbLPARAMlpDataLPARAM lpData	//Address of optional data
EnterCriticalSectionVOID00tbLPCRITICAL_SECTIONlpcsCriticalSectionLPCRITICAL_SECTION lpcsCriticalSection	//Address of critical section object
EnumCalendarInfo00tbHDChDCHDC hDC,	//Handle of device contexttbHANDLETABLE FAR *lpHTableHANDLETABLE FAR  *lpHTable,	//Address of metafile handle tabletbENHMETARECORD FAR  *lpEMFRENHMETARECORD FAR  *lpEMFR,	//Address of metafile recordtbintnObjint  nObj,	//Count of objectstbLPARAMlpDataLPARAM  lpData	// address of optional data
EnumCalendarInfoProc00tbLPTSTRlpCalendarInfoStringLPTSTR  lpCalendarInfoString	//Pointer to calendar information string
EnumChildProcBOOL00tbHWNDhwndHWND hwnd,	//Handle of child windowtbLPARAMlParamLPARAM lParam	//Application-defined value
EnumChildWindowsBOOL00tbHWNDhwndParentHWND hwndParent,	//Handle of parent windowtbWNDENUMPROCwndenmprcWNDENUMPROC wndenmprc,	//Address of callback functiontbLPARAMlParamLPARAM lParam	//Application-defined value
EnumClipboardFormatsUINT00tbUINTuFormatUINT uFormat	//Known clipboard format
EnumCodePagesProc00tbLPWSTRlpCodePageStringLPWSTR  lpCodePageString	//Pointer to time format string
EnumDateFormats00tbDATEFMT_ENUMPROClpDateFmtEnumProcDATEFMT_ENUMPROC  lpDateFmtEnumProc,	//Pointer to enumeration callback functiontbLCIDlcidLCID  lcid,	//Locale whose date formats are of interesttbDWORDdwFlagsDWORD  dwFlags	//Which date format is of interest
EnumDateFormatsProc00tbLPTSTRlpDateFormatStringLPTSTR  lpDateFormatString	//Pointer to date format string
EnumDependantServices00tbSC_HANDLEschServiceSC_HANDLE  schService,	// handle of servicetbDWORDfdwServiceStateDWORD  fdwServiceState,	// state of services to enumeratetbLPENUM_SERVICE_STATUSlpessServicesLPENUM_SERVICE_STATUS  lpessServices,	// address of service status buffertbDWORDcbBufSizeDWORD  cbBufSize,	// size of service status buffertbLPDWORDlpcbBytesNeededLPDWORD  lpcbBytesNeeded,	// address of variable for bytes neededtbLPDWORDlpdwServicesReturnedLPDWORD  lpdwServicesReturned	// address of variable for number returned
EnumEnhMetaFileBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbHENHMETAFILEhemfHENHMETAFILE hemf,	//Handle of enhanced metafiletbENHMFENUMPROClpEnhMetaFuncENHMFENUMPROC lpEnhMetaFunc,	//Address of callback functiontbLPVOIDlpDataLPVOID lpData,	//Address of callback-function datatbCONST RECTlpRectCONST RECT * lpRect	//Address of bounding rectangle	
EnumFontFamiliesint00tbHDChdcHDC hdc,	//Handle of device controltbLPCTSTRlpszFamilyLPCTSTR lpszFamily,	//Address of family-name stringtbFONTENUMPROClpEnumFontFamProcFONTENUMPROC lpEnumFontFamProc,	//Address of callback functiontbLPARAMlParamLPARAM lParam	//Address of application-supplied data
EnumFontFamProcintCALLBACK00tbENUMLOGFONT FAR *lpelfENUMLOGFONT FAR* lpelf,	//Address of logical-font datatbNEWTEXTMETRIC FAR *lpntmNEWTEXTMETRIC FAR* lpntm,	//Address of physical-font dataxbintDEVICE_FONTTYPERASTER_FONTTYPETRUETYPE_FONTTYPEint FontType,	//Type of fonttbLPARAMlParamLPARAM lParam	//Address of application-defined data
EnumFontsint00tbHDChdcHDC hdc,	//Handle of device contextcbLPCTSTRlpFaceNameNULLLPCTSTR lpFaceName,	//Address of font typeface name stringtbFONTENUMPROClpFontFuncFONTENUMPROC lpFontFunc,	//Address of callback functiontbLPARAMlParamLPARAM lParam	//Address of application-supplied data
EnumFontsProcint00tblplflplflplflplf,	//Address of logical-font datatblptmlptmlptm lptm,	//Address of physical-font dataxbDWORDDEVICE_FONTTYPERASTER_FONTTYPETRUETYPE_FONTTYPEDWORD dwType,	//Font typetbLPARAMlpDataLPARAM lpData	//Address of application-supplied data
EnumFormsBOOL00tbHANDLEhPrinterHANDLE hPrinter,	//Handle of printer objectcbDWORD1dwLevelDWORD dwLevel,	//Data-structure leveltbLPBYTElpbFormLPBYTE lpbForm,	//Address of data-structure arraytbDWORDdwBufDWORD dwBuf,	//Count of bytes in buffertbLPDWORDlpdwNeededLPDWORD lpdwNeeded,	//Address of value for count of bytes required for arraytbLPDWORDlpdwReturnedLPDWORD lpdwReturned	//Address of value for count of bytes returned in array
EnumJobsBOOL00tbHANDLEhPrinterHANDLE hPrinter,	//Handle of printer objecttbDWORDdwFirstJobDWORD dwFirstJob,	//Location of first job in print queuetbDWORDdwNoJobsDWORD dwNoJobs,	//Number of jobs to enumeratetbDWORDdwLevelDWORD dwLevel,	//Structure leveltbLPBYTElpbJobLPBYTE lpbJob,	//Address of structure arraytbDWORDdwBufDWORD dwBuf,	//Size of array, in bytestbLPDWORDlpdwNeededLPDWORD lpdwNeeded,	//Addr. of variable with no. of bytes copied (or requiredtbLPDWORDlpdwReturnedLPDWORD lpdwReturned	//Addr. of variable with no. of job info. structures copied
EnumLocalesProc00tbHANDLEhPrinterHANDLE  hPrinter,	//Handle of printer objecttbDWORDdwFirstJobDWORD  dwFirstJob,	//Location of first job in print queue to enumeratetbDWORDdwNoJobsDWORD  dwNoJobs,	//Number of jobs to enumeratetbDWORDdwLevelDWORD  dwLevel,	//Structure leveltbLPBYTElpbJobLPBYTE  lpbJob,	//Address of structure arraytbDWORDdwBufDWORD  dwBuf,	//Size of array, in bytestbLPDWORDlpdwNeededLPDWORD  lpdwNeeded,	//Addr. of variable with no. of bytes copied - or requiredtbLPDWORDlpdwReturnedLPDWORD  lpdwReturned	//Addr. of variable with no. of job info. structures copied
EnumMetaFileBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbHMETAFILEhmfHMETAFILE hmf,	//Handle of Windows-format metafiletbMFENUMPROClpMetaFuncMFENUMPROC lpMetaFunc,	//Address of callback functiontbLPARAMlParamLPARAM lParam	//Address of callback function data
EnumMetaFileProcint00tbHDChDCHDC hDC,	//Handle of device contexttbHANDLETABLE FAR *lpHTableHANDLETABLE FAR *lpHTable,	//Address of metafile handle tabletbMETARECORD FAR *lpMFRMETARECORD FAR *lpMFR,	//Address of metafile recordtbintnObjint nObj,	//Count of objectstbLPARAMlpClientDataLPARAM lpClientData	//Address of optional data
EnumMonitorsBOOL00cbLPTSTRlpszNameNULLLPTSTR lpszName,	//Address of server namecbDWORD1dwLevelDWORD dwLevel,	//Structure leveltbLPBYTElpbMonitorsLPBYTE lpbMonitors,	//Address of structure arraytbDWORDcbBufDWORD cbBuf,	//Size, in bytes, of buffertbLPDWORDlpdwNeededLPDWORD lpdwNeeded,	//Addr. of variable with no. of bytes copied (or requiredtbLPDWORDlpdwReturnedLPDWORD lpdwReturned	//Addr. of variable with no. of job info. structures copied
EnumObjectsint00tbHDChdcHDC hdc,	//Handle of device contexttbintnObjectTypeint nObjectType,	//Object-type identifiertbGOBJENUMPROClpObjectFuncGOBJENUMPROC lpObjectFunc,	//Address of callback functiontbLPARAMlParamLPARAM lParam	//Address of application-supplied data
EnumObjectsProcVOID00tbLPVOIDlpLogObjectLPVOID lpLogObject,	//Address of graphic-object structuretbLPARAMlpDataLPARAM lpData	//Address of application-defined data
EnumPortsBOOL00cbLPTSTRlpszNameNULLLPTSTR lpszName,	//Address of server namecbDWORD1dwLevelDWORD dwLevel,	//Structure leveltbLPBYTElpbPortsLPBYTE lpbPorts,	//Address of structure arraytbDWORDcbBufDWORD cbBuf,	//Size, in bytes, of arraytbLPDWORDlpdwNeededLPDWORD lpdwNeeded,	//Addr. of variable with no. of bytes copied (or requiredtbLPDWORDlpdwReturnedLPDWORD lpdwReturned	//Addr. of variable with no. of job info. structures copied
EnumPrintersBOOL00xbDWORDPRINTER_ENUM_CONNECTIONSPRINTER_ENUM_LOCALPRINTER_ENUM_NAMEPRINTER_ENUM_NETWORKPRINTER_ENUM_REMOTEPRINTER_ENUM_SHAREDDWORD dwType,	//Printer type or typescbLPTSTRlpszNameNULLLPTSTR lpszName,	//Name of printer objectrbDWORD12DWORD dwLevel,	//Structure leveltbLPBYTElpbPrintersLPBYTE lpbPrinters,	//Printer info arraytbDWORDcbBufDWORD cbBuf,	//Address of structure count of bytes in arraytbLPDWORDlpdwNeededLPDWORD lpdwNeeded,	//Addr. of variable with no. of bytes copied (or requiredtbLPDWORDlpdwNeededLPDWORD lpdwNeeded	//Addr. of variable with no. of bytes copied (or required
EnumPrintersBOOL00xbDWORDPRINTER_ENUM_CONNECTIONSPRINTER_ENUM_LOCALPRINTER_ENUM_NAMEPRINTER_ENUM_NETWORKPRINTER_ENUM_REMOTEPRINTER_ENUM_SHAREDDWORD dwType,	//Printer type or typescbLPTSTRlpszNameNULLLPTSTR lpszName,	//Name of printer objectrbDWORD12DWORD dwLevel,	//Structure leveltbLPBYTElpbPrintersLPBYTE lpbPrinters,	//Printer info arraytbDWORDcbBufDWORD cbBuf,	//Address of structure count of bytes in arraytbLPDWORDlpdwNeededLPDWORD lpdwNeeded,	//Addr. of variable with no. of bytes copied (or requiredtbLPDWORDlpdwNeededLPDWORD lpdwNeeded	//Addr. of variable with no. of bytes copied (or required
EnumPrintProcessorDatatypes00tbLPTSTRpNameLPTSTR  pName,	//Points to server name stringtbLPTSTRpPrintProcessorNameLPTSTR  pPrintProcessorName,	//Points to print processor name stringtbDWORDLevelDWORD  Level,	//Specifies version of print processor data type structurestbLPBYTEpDatatypesLPBYTE  pDatatypes,	//Points to buffer to receive print processor data type structurestbDWORDcbBufDWORD   cbBuf,	//Specifies size in, bytes, of buffertbLPDWORDpcbNeededLPDWORD  pcbNeeded,	//Points to variable to receive size of datatbLPDWORDpcReturnedLPDWORD  pcReturned	//Points to variable to receive number of data structures obtained
EnumPrintProcessorsBOOL00cbLPTSTRlpszNameNULLLPTSTR lpszName,	//Address of server namecbLPTSTRlpszEnvirNULLLPTSTR lpszEnvir,	//Address of environment namecbDWORD1dwLevelDWORD dwLevel,	//Structure leveltbLPBYTElpbPPInfoLPBYTE lpbPPInfo,	//Address of structure arraytbDWORDcbBufDWORD cbBuf,	//Array length in bytestbLPDWORDlpdwNeededLPDWORD lpdwNeeded,	//Addr. of variable with no. of bytes copied (or requiredtbLPDWORDlpdwReturnedLPDWORD lpdwReturned	//Addr. of variable with no. of job info. structures copied
EnumPropsint00tbHWNDhwndHWND hwnd,	//Handle of windowtbPROPENUMPROClpEnumFuncPROPENUMPROC lpEnumFunc	//Address of callback function
EnumPropsExint00tbHWNDhwndHWND hwnd,	//Handle of windowtbPROPENUMPROCEXlpEnumFuncPROPENUMPROCEX lpEnumFunc,	//Address of callback functiontbLPARAMlParamLPARAM lParam	//Application-defined data
EnumResLangProcBOOLCALLBACK00tbHWNDhwndHWND  hwnd,	//Handle of windowtbPROPENUMPROClpEnumFuncPROPENUMPROC  lpEnumFunc	//Address of callback function
EnumResNameProcBOOLCALLBACK00tbHANDLEhModuleHANDLE  hModule,	//Resource-module handletbLPCTSTRlpszTypeLPCTSTR  lpszType,	//Address of resource typetbLPTSTRlpszNameLPTSTR  lpszName,	//Address of resource nametbLONGlParamLONG  lParam	//Application-defined parameter
EnumResourceLanguagesBOOL00cbHINSTANCEhModuleNULLHINSTANCE hModule,	//Resource-module handlerbLPCTSTRRT_ACCELERATORRT_BITMAPRT_DIALOGRT_FONTRT_FONTDIRRT_MENURT_RCDATART_STRINGRT_MESSAGETABLERT_CURSORRT_GROUP_CURSORRT_ICONRT_GROUP_ICONRT_VERSIONLPCTSTR lpszType,	//Address of resource typetbLPCTSTRlpszNameLPCTSTR lpszName,	//Address of resource nametbENUMRESLANGPROClpEnumFuncENUMRESLANGPROC lpEnumFunc,	//Address of callback functiontbLONGlParamLONG lParam	//Application-defined parameter
EnumResourceNamesBOOL00cbHINSTANCEhModuleNULLHINSTANCE hModule,	//Resource-module handlingrbLPCTSTRRT_ACCELERATORRT_BITMAPRT_DIALOGRT_FONTRT_FONTDIRRT_MENURT_RCDATART_STRINGRT_MESSAGETABLERT_CURSORRT_GROUP_CURSORRT_ICONRT_GROUP_ICONRT_VERSIONLPCTSTR lpszType,	//Address of resource typetbENUMRESNAMEPROClpEnumFuncENUMRESNAMEPROC lpEnumFunc,	//Address of callback functiontbLONGlParamLONG lParam	//Application-defined parameter
EnumResourceTypesBOOL00cbLONGlParamNULLLONG lParam,	//Application-defined parametertbENUMRESTYPEPROClpEnumFuncENUMRESTYPEPROC lpEnumFunc,	//Address of callback functiontbENUMRESTYPEPROClpEnumFuncENUMRESTYPEPROC lpEnumFunc	//Address of callback function
EnumResTypeProcBOOL00tbHINSTANCEhModuleHINSTANCE  hModule,	//Resource-module handlingtbLPCTSTRlpszTypeLPCTSTR  lpszType,	//Address of resource typetbENUMRESNAMEPROClpEnumFuncENUMRESNAMEPROC  lpEnumFunc,	//Address of callback functiontbLONGlParamLONG  lParam	//Application-defined parameter
EnumServicesStatusBOOL00tbSC_HANDLEschSCManagerSC_HANDLE schSCManager,	//Handle of service control manager databasexbDWORDSERVICE_WIN32SERVICE_DRIVERDWORD fdwServiceType,	//Type of services to enumeratexbDWORDSERVICE_ACTIVESERVICE_INACTIVEDWORD fdwServiceState,	//State of services to enumeratetbLPENUM_SERVICE_STATUSlpessServicesLPENUM_SERVICE_STATUS lpessServices,	//Address of service status buffertbDWORDcbBufSizeDWORD cbBufSize,	//Size of service status buffertbLPDWORDlpcbBytesNeededLPDWORD lpcbBytesNeeded,	//Address of variable for bytes neededtbLPDWORDlpdwServicesReturnedLPDWORD lpdwServicesReturned,	//Address of variable for number returnedtbLPDWORDlpdwResumeHandleLPDWORD lpdwResumeHandle	//Address of variable for next entry
EnumSystemCodePagesBOOL00tbCODEPAGE_ENUMPROClpCodePageEnumProcCODEPAGE_ENUMPROC  lpCodePageEnumProc,	//Pointer to enumeration callback functiontbDWORDdwFlagsDWORD  dwFlags	//Flags determine which code pages to enumerate
EnumSystemLocalesBOOL00tbLOCALE_ENUMPROClpLocaleEnumProcLOCALE_ENUMPROC  lpLocaleEnumProc,	// pointer to enumeration callback functiontbDWORDdwFlagsDWORD  dwFlags	// flags determine which locales to enumerate
EnumThreadWindowsBOOL00tbDWORDdwThreadIdDWORD dwThreadId,	//Thread identifiertbWNDENUMPROClpfnWNDENUMPROC lpfn,	//Address of callback functiontbLPARAMlParamLPARAM lParam	//Application-defined value
EnumThreadWndProcBOOL00tbHWNDhwndHWND hwnd,	//Handle of windowcbLPARAMlParamLPARAM lParam	//Application-defined value
EnumTimeFormatsBOOL00tbTIMEFMT_ENUMPROClpTimeFmtEnumProcTIMEFMT_ENUMPROC  lpTimeFmtEnumProc,	//Pointer to enumeration callback functiontbLCIDlcidLCID  lcid,	//Locale whose time formats are of interesttbDWORDdwFlagsDWORD  dwFlags	//Currently unused
EnumTimeFormatsProc00tbDWORDdwFlagsDWORD  dwFlags,	//Currently unused
EnumWindowsBOOL00tbWNDENUMPROCwndenmprcWNDENUMPROC wndenmprc,	//Address of callback functiontbLPARAMlParamLPARAM lParam	//Application-defined value
EnumWindowsProcBOOL00tbHWNDhwndHWND hwnd,	//Handle of parent windowtbLPARAMlParamLPARAM lParam	//Application-defined value
EqualPrefixSidBOOL00tbPSIDpsid1PSID psid1,	//Address of first SID to comparetbPSIDpsid2PSID psid2	//Address of second SID to compare
EqualRectBOOL00tbCONSTRECT*lprc1CONST RECT *lprc1,	//Address of structure with first rectangletbCONST RECT *lprc2CONST RECT *CONST RECT *lprc2	//Address of structure with second rectangle	
EqualRgnBOOL00tbHRGNhSrcRgn1HRGN hSrcRgn1,	//Handle of first regiontbHRGNhSrcRgn1HRGN hSrcRgn1	//Handle of first region
EqualSidBOOL00tbPSIDpsid1PSID psid1,	//Address of first SID to comparetbPSIDpsid2PSID psid2	//Address of second SID to compare
EraseTapeDWORD00tbHANDLEhDeviceHANDLE hDevice,	//Handle of open devicerbDWORDTAPE_ERASE_LONGTAPE_ERASE_SHORTDWORD fdwEraseType,	//Type of erasure to performcbBOOLbImmediateTRUEFALSEBOOL bImmediate	//Return after erase operation begins
Escapeint00tbHDChdcHDC hdc,	//Handle of device contexttbintnEscapeint nEscape,	//Escape functiontbintcbInputint cbInput,	//Size of structure for inputtbLPCSTRlpvInDataLPCSTR lpvInData,	//Address of input structurecbLPVOIDlpvOutDataNULLLPVOID lpvOutData	//Address of output structure
EscapeCommFunctionBOOL00tbHANDLEhCommDevHANDLE hCommDev,	//Handle of the communications devicerbDWORDCLRDTRCLRRTSSETDTRSETRTSSETXOFFSETXONSETBREAKCLRBREAKDWORD fdwFunc	//Extended function to perform
ExcludeClipRectint00tbHDChdcHDC hdc,	//Handle of device contexttbintnLeftRectint nLeftRect,	//X-coordinate of upper-left corner of rectangletbintnTopRectint nTopRect,	//Y-coordinate of upper-left corner of rectangletbintnRightRectint nRightRect,	//X-coordinate of lower-right corner of rectangletbintnBottomRectint nBottomRect	//Y-coordinate of lower-right corner of rectangle
ExcludeUpdateRgnint00tbHDChdcHDC hdc,	//Handle of device contexttbHWNDhwndHWND hwnd	//Handle of window
ExitProcessVOID00tbUINTuExitCodeUINT uExitCode	//Exit code for all threads
ExitThreadVOID00tbDWORDdwExitCodeDWORD dwExitCode	//Exit code for this thread
ExitWindowsBOOL00tbDWORD0DWORD dwReserved,	//ReservedtbUINT0UINT uReserved	//Reserved
ExitWindowsExBOOL00xbUINTEWX_FORCEEWX_LOGOFFEWX_REBOOTEWX_SHUTDOWNUINT fuOptions,	//Shutdown operationtbDWORD0DWORD dwReserved	//Reserved
ExpandEnvironmentStringsDWORD00tbLPCTSTRlpszSrcLPCTSTR lpszSrc,	//Address of string with environment variablestbLPTSTRlpszDestLPTSTR lpszDest,	//Address of string with expanded env. variablestbDWORDcchDestDWORD cchDest	//Maximum chars. in expanded string
ExtCreatePenHPEN00xbDWORDPS_GEOMETRICPS_COSMETICPS_ALTERNATEPS_SOLIDPS_DASHPS_DOTPS_DASHDOTPS_DASHDOTDOTPS_NULLPS_USERSTYLEPS_INSIDEFRAMEPS_ENDCAP_ROUNDPS_ENDCAP_SQUAREPS_ENDCAP_FLATPS_JOIN_BEVELPS_JOIN_MITERPS_JOIN_ROUNDDWORD dwPenStyle,	//Pen stylecbDWORDdwWidth1DWORD dwWidth,	//Pen widthtbCONST LOGBRUSH * lplbCONST LOGBRUSH * lplb,	//Address of struct for brush attributescbDWORDdwStyleCount0DWORD dwStyleCount,	//Length of array containing custom style bitscbDWORDdwStyleCountNULLDWORD dwStyleCount	//Length of array containing custom style bits
ExtCreateRegionHGRN00tbCONSTXFORM*lpXformCONST XFORM * lpXform,	//Address of transformation datatbDWORDnCountDWORD nCount,	//Size of structure containing region datatbCONST RGNDATA * lpRgnDataCONST RGNDATA * lpRgnData	//Address of region data
ExtEscapeint00tbHDChdcHDC hdc,	//Handle of device contexttbintnEscapeint nEscape,	//Escape functiontbintcbInputint cbInput,	//Size of structure for inputtbLPCSTRlpszInDataLPCSTR lpszInData,	//Address of input structurecbintcbOutput0int cbOutput,	//Size, in bytes, of output datacbLPSTRlpszOutDataNULLLPSTR lpszOutData	//Address of output structure
ExtFloodFillBOOL00tbLPSTRlpszOutDataLPSTR lpszOutData,	//Address of output structuretbintnXStartint nXStart,	//X-coordinate where filling beginstbintnYStartint nYStart,	//Y-coordinate where filling beginstbCOLORREFcrColorCOLORREF crColor,	//Fill colorrbUINTFLOODFILLBORDERFLOODFILLSURFACEUINT fuFillType	//Fill type
ExtractIconHICON00tbHINSTANCEhInstHINSTANCE hInst,	//Instance handletbLPCTSTRlpszExeNameLPCTSTR lpszExeName,	//Filename of file with iconcbUINTnIconIndex0-1UINT nIconIndex,	//Index of icon to extract
ExtractIconHICON00tbHINSTANCEhInstHINSTANCE hInst,	//Instance handletbLPCTSTRlpszExeNameLPCTSTR lpszExeName,	//Filename of file with iconcbUINTnIconIndex0-1UINT nIconIndex,	//Index of icon to extract
ExtSelectClipRgnint00tbHDChdcHDC hdc,	//Handle of device contextcbHRGNhrgnNULLHRGN hrgn,	//Handle of regionrbintRGN_ANDRGN_COPYRGN_DIFFRGN_ORRGN_XORint fnMode	//Region-selection mode
ExtTextOut00tbHDChdcHDC hdc,	//Handle of device contexttbntXnt  X,	//X-coordinate of reference pointtbntYnt  Y,	//Y-coordinate of reference pointtbUINTfuOptionsUINT  fuOptions,	//Text-output optionstbCONST RECT  *lprcCONST RECT  *lprc,	//Optional clipping and/or opaquing rectangletbLPCTSTRlpStringLPCTSTR  lpString,	//Points to of stringtbUINTcbCountUINT  cbCount,	//Number of characters in stringtbCONST INT *lpDxCONST INT *  lpDx	//Address of array of intercharacter spacing values
FatalAppExitVOID00cbUINT0uActionUINT uAction,	//ReservedtbLPCTSTRlpszMessageTextLPCTSTR lpszMessageText	//Address of string to display in message box
FatalExitVOID00tbintnExitCodeintnExitCoded,	//Error code
FileIOCompletionRoutineVOID00rbDWORD0ERROR_HANDLE_EOFDWORD fdwError,	//Completion codetbDWORDcbTransferredDWORD cbTransferred,	//Number of bytes transferredtbLPOVERLAPPEDlpoLPOVERLAPPED lpo	//Address of structure with I/O information
FileTimeToDosDateTimeBOOL00tbCONSTFILETIME * lpftCONST FILETIME * lpft,	//Address of 64-bit file timetbLPWORDlpwDOSDateLPWORD lpwDOSDate,	//Address of variable for MS-DOS datetbLPWORDlpwDOSTimeLPWORD lpwDOSTimed,	//Address of variable for MS-DOS time
FileTimeToLocalFileTimeBOOL00tbCONSTFILETIME * lpftCONST FILETIME * lpft,	//Address of UTC file time to converttbLPFILETIMElpftLocalLPFILETIME lpftLocal	//Address of converted file time
FileTimeToSystemTimeBOOL00tbCONSTFILETIME * lpftCONST FILETIME * lpft,	//Address of file time to converttbLPSYSTEMTIMElpstLPSYSTEMTIME lpst	//Address of converted system time
FillConsoleOutputAttributeBOOL00tbHANDLEhConsoleHANDLE hConsole,	//Handle of screen bufferxbWORDFOREGROUND_BLUEFOREGROUND_GREENFOREGROUND_REDFOREGROUND_INTENSITYBACKGROUND_BLUEBACKGROUND_GREENBACKGROUND_REDBACKGROUND_INTENSITYWORD wAttribute,	//Color attribute to writetbDWORDcCharCellsDWORD cCharCells,	//Number of character cells to write totbDWORDcCharCellsDWORD cCharCells,	//Number of character cells to write totbLPDWORDlpcWrittenLPDWORD lpcWritten	//Address of number of cells written to
FillConsoleOutputCharacterBOOL00tbHANDLEhConsoleHANDLE hConsole,	//Handle of screen buffertbTCHARchFillCharTCHAR chFillChar,	//Character to writetbTCHARchFillCharTCHAR chFillChar,	//Character to writetbCOORDcoordCharCOORD coordChar,	//X- and y-coordinates of first celltbLPDWORDlpcWrittenLPDWORD lpcWritten	//Address of number of cells written to
FillMemoryVOID00tbPVOIDDestinationPVOID Destination,	//Address of block to filltbDWORDLengthDWORD Length,	//Size in bytes of block to filltbBYTEFillBYTE Fill	//The byte value with which to fill
FillPathBOOL00tbHDChdcHDC hdc	//Handle of device context
FillRectint00tbHDChdcHDC hdc,	//Handle of device contexttbHDChdcHDC hdc,	//Handle of device contexttbHBRUSHhbrHBRUSH hbr	//Handle of brush
FillRgnBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbHRGNhrgnHRGN hrgn,	//Handle of region to be filledtbHBRUSHhbrHBRUSH hbr	//Handle of brush used to fill the region
FindAtomATOM00tbLPCTSTRlpszStringLPCTSTR lpszString	//Address of string to find
FindCloseBOOL00tbHANDLEhFindFileHANDLE hFindFile	//File search handle
FindCloseChangeNotificationBOOL00tbHANDLEhChangeHANDLE hChange	//Handle of change notification to close
FindClosePrinterChangeNotification00tbHANDLEhEventHANDLE  hEvent	//Handle of change notification object to close
FindExecutableHINSTANCE00tbLPCTSTRlpszFileLPCTSTR lpszFile,	//Address of string for filenametbLPCTSTRlpszDirLPCTSTR lpszDir,	//Address of string for default directorytbLPTSTRlpszResultLPTSTR lpszResult	//Address of buffer for string for executable file on return
FindFirstChangeNotificationHANDLE00tbLPCTSTRlpszPathLPCTSTR lpszPath,	//Address of the name of the directory to watchcbBOOLfWatchSubTreeTRUEFALSEBOOL fWatchSubTree,	//Flag for monitoring directory or directory treexbDWORDFILE_NOTIFY_CHANGE_FILE_NAMEFILE_NOTIFY_CHANGE_DIR_NAMEFILE_NOTIFY_CHANGE_ATTRIBUTESFILE_NOTIFY_CHANGE_SIZEFILE_NOTIFY_CHANGE_LAST_WRITEFILE_NOTIFY_CHANGE_SECURITYDWORD fdwFilter	//Filter conditions to watch for
FindFirstFileHANDLE00tbLPCTSTRlpszSearchFileLPCTSTR lpszSearchFile,	//Address of name of the file to search fortbLPWIN32_FIND_DATAlpffdLPWIN32_FIND_DATA lpffd	//Address of returned information
FindFirstFreeAceBOOL00tbPACLpAclPACL pAcl,	//Address of access-control listtbLPVOID *lplpvAceLPVOID *lplpvAce	//Address of pointer to first free byte
FindNextFileBOOL00tbHANDLEhFindFileHANDLE hFindFile,	//Handle of search returned by FindFirstFiletbLPWIN32_FIND_DATAlpffdLPWIN32_FIND_DATA lpffd	//Address of structure for data on found file
FindNextPrinterChangeNotification00tbHANDLEhFindFileHANDLE  hFindFile,	// handle of searchtbLPWIN32_FIND_DATAlpFindFileDataLPWIN32_FIND_DATA  lpFindFileData	// address of structure for data on found file
FindResource00tbHINSTANCEhModuleHINSTANCE hModule,	//Resource-module handletbLPCTSTRlpszNameLPCTSTR lpszName,	//Address of resource namerbLPCTSTRRT_ACCELERATORRT_BITMAPRT_DIALOGRT_FONTRT_FONTDIRRT_MENURT_RCDATART_STRINGRT_MESSAGETABLERT_CURSORRT_GROUP_CURSORRT_ICONRT_GROUP_ICONRT_VERSIONLPCTSTR lpszType	//Address of resource type
FindResourceExHRSRC00cbHINSTANCEhModuleNULLHINSTANCE hModule,	//Resource-module handlerbLPCTSTRRT_ACCELERATORRT_BITMAPRT_DIALOGRT_FONTRT_FONTDIRRT_MENURT_RCDATART_STRINGRT_MESSAGETABLERT_CURSORRT_GROUP_CURSORRT_ICONRT_GROUP_ICONRT_VERSIONLPCTSTR lpszType	//Address of resource typetbLPCTSTRlpszNameLPCTSTR lpszName,	//Address of resource nametbWORDwLanguageWORD wLanguage	//Resource language
FindTextHWND00tbLPFINDREPLACElpfrLPFINDREPLACE lpfr	//Pointer to structure with initialization data
FindWindowHWND00tbLPCTSTRlpszClassLPCTSTR lpszClass,	//Address of class namecbLPCTSTRlpszWindowNULLLPCTSTR lpszWindow,	//Address of window name
FindWindowExHWND00cbHWNDhwndParentNULLHWND  hwndParent,	//Handle to parent windowcbHWNDhwndChildAfterNULLHWND hwndChildAfter,	//Handle to a child windowcbLPCTSTR lpszClassNULLLPCTSTR lpszClass,	// pointer to class namecbLPCTSTR lpszWindowNULLLPCTSTR lpszWindow	//Pointer to window name
FlattenPathBOOL00tbHDChdcHDC hdc	//Handle of device context
FloodFill00tbHDChdcHDC hdc,	//Handle of device contexttbintnXStartint nXStart,	//X-coord., where fill beginstbintnYStartint nYStart,	//Y-coord., where fill beginstbCOLORREFcrFillCOLORREF crFill	//Fill color
FlushConsoleInputBufferBOOL00tbCOLORREFcrFillCOLORREF crFill	//Fill color
FlushFileBuffersBOOL00tbCOLORREFcrFillCOLORREF crFill	//Fill color
FlushInstructionCacheBOOL00tbHANDLEhProcessHANDLE hProcess,	//Process with cache to flushcbLPCVOIDlpvBaseNULLLPCVOID lpvBase,	//Address of region to flushcbDWORDcbFlushNULLDWORD cbFlush,	//Length of region to flush
FlushViewOfFileBOOL00tbLPCVOIDlpvBaseLPCVOID lpvBase,	//Start address of byte range to flushcbDWORDcbFlush0DWORD cbFlush	//Number of bytes in range
FMExtensionProcLONG00tbHWNDhwndHWND hwnd,	//Handle of extension windowcbWORDwMsgFMEVENT_INITMENUFMEVENT_LOADFMEVENT_SELCHANGEFMEVENT_UNLOADFMEVENT_USER_REFRESHWORD wMsg,	//Menu-item identifier, or messagetbLONGlParamLONG lParam	//Additional message information
FoldString00tbHWNDhwndHWND hwnd,	//Handle of extension windowtbWORDwMsgWORD  wMsg,	//Menu-item identifier, or messagetbLONGlParamLONG  lParam	//Additional message information
FoldStringWint00xbDWORDMAP_FOLDCZONEMAP_FOLDDIGITSMAP_PRECOMPOSEDMAP_COMPOSITEDWORD fdwMap,	//Mapping-type optionstbLPCWSTRlpSrcStrLPCWSTR lpSrcStr,	//Address of source stringcbintcchSrc-1int cchSrc,	//Number of characters in source stringtbLPWSTRlpDestStrLPWSTR lpDestStr,	//Address of destination buffercbintcchDest-1int cchDest	//Size of destination buffer
FormatMessageDWORD00xbDWORDFORMAT_MESSAGE_ALLOCATE_BUFFERFORMAT_MESSAGE_IGNORE_INSERTSFORMAT_MESSAGE_FROM_STRINGFORMAT_MESSAGE_FROM_HMODULEFORMAT_MESSAGE_FROM_SYSTEMFORMAT_MESSAGE_ARGUMENT_ARRAYFORMAT_MESSAGE_MAX_WIDTH_MASKDWORD dwFlags,	//Source and processing optionstbLPCVOIDlpSourceLPCVOID lpSource,	//Address of message sourcetbDWORDdwMessageIdDWORD dwMessageId,	//Requested message identifiertbDWORDdwLanguageIdDWORD dwLanguageId,	//Language identifier for requested messagetbLPTSTRlpBufferLPTSTR lpBuffer,	//Address of message buffertbDWORDnSizeDWORD nSize,	//Maximum size of message buffertbva_list * Argumentsva_list * Arguments	//Address of array of message inserts
FrameRectint00tbHDChdcHDC hdc,	//Handle of device contexttbCONST RECT *lprcCONST RECT *lprc,	//Address of rectangle coordinatestbHBRUSHhbrHBRUSH hbr	//Handle of brush
FrameRgnBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbHRGNhrgnHRGN hrgn,	//Handle of region to be framedtbHBRUSHhbrHBRUSH hbr,	//Handle of brush used to draw bordertbintnWidthint nWidth,	//Width of region frametbintnHeightint nHeight	//Height of region frame
FreeEnvironmentStringsBOOL00tbLPTSTRlpszEnvironmentBlockLPTSTR  lpszEnvironmentBlock	// pointer to a block of environment strings
FreeLibraryBOOL00tbHINSTANCEhLibModuleHINSTANCE hLibModule	//Handle of loaded library module
FreeLibraryAndExitThread00tbHMODULEhLibModuleHMODULE  hLibModule,	//Dynamic-link library whose reference count is to decreasetbDWORDdwExitCodeDWORD  dwExitCode	//Exit code for thread
FreeSidPVOID00tbPSIDpsidPSID psid	//Address of SID to free
GdiCommentBOOL00tbHDChdcHDC hdc,	//Handle of a device contexttbUINTcbSizeUINT cbSize,	//Size of text buffertbCONST BYTE * lpDataCONST BYTE * lpData	//Address of text buffer
GdiSetBatchLimitDWORD00tbDWORDdwLimitDWORD dwLimit	//Batch limit
GenerateConsoleCtrlEventBOOL00rbDWORDCTRL_C_EVENTCTRL_BREAK_EVENTDWORD fdwEvent,	//Signal to generatetbDWORDIDProcessGroupDWORD IDProcessGroup	//Process group to get signal
GetAceBOOL00tbPACLpAclPACL pAcl,	//Address of access-control listtbDWORDdwAceIndexDWORD dwAceIndex,	//Index of ACE to retrievetbLPVOID *lplpvAceLPVOID *lplpvAce	//Address of pointer to ACE
GetAclInformationBOOL00tbPACLpAclPACL pAcl,	//Address of access-control listtbLPVOIDlpvAclInfoLPVOID lpvAclInfo,	//Address of ACL informationtbDWORDcbAclInfoDWORD cbAclInfo,	//Size of ACL informationtbACL_INFORMATION_CLASSaclicACL_INFORMATION_CLASS aclic	//Class of requested information
GetArcDirectionint00tbHDChdcHDC hdc	//Handle of device context
GetAspectRatioFilterExBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbLPSIZElpAspectRatioLPSIZE lpAspectRatio	//Address of aspect-ratio filter
GetAsyncKeyStateSHORT00tbintnVirtKeyint nVirtKey	//Virtual-key code
GetAtomNameUINT00tbATOMatmATOM atm,	//Atom identifying character stringtbLPTSTRlpszBufferLPTSTR lpszBuffer,	//Address of buffer for atom stringtbintcchBufferint cchBuffer	//Size of buffer
GetBinaryType00tbATOMatmATOM atm,	//Atom identifying character stringtbLPTSTRlpszBufferLPTSTR  lpszBuffer,	//Address of buffer for atom stringtbntcchBuffernt  cchBuffer	//Size of buffer
GetBitmapBitsLONG00tbHBITMAPhbmpHBITMAP hbmp,	//Handle of bitmaptbLONGcbBufferLONG cbBuffer,	//Number of bytes to copy to buffertbLPVOIDlpvBitsLPVOID lpvBits	//Address of buffer for bitmap bits
GetBitmapDimensionExBOOL00tbHBITMAPhBitmapHBITMAP hBitmap,	//Handle of bitmaptbLPSIZElpDimensionLPSIZE lpDimension	//Address of structure receiving dimensions
GetBkColorCOLORREF00tbHDChdcHDC hdc	//Handle of device context
GetBkModeint00tbHDChdcHDC hdc	//Handle of device context
GetBoundsRectUINT00tbHDChdcHDC hdc,	//Handle of device contexttbLPRECTlprcBoundsLPRECT lprcBounds,	//Address of structure for bounding rectanglexbUINTDCB_RESETUINT flags	//Information to return
GetBrushOrgExBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbLPPOINTlpptLPPOINT lppt	//Address of structure of coordinates
GetCaretPosBOOL00tbLPPOINTlpPointLPPOINT lpPoint	//Address of structure to receive coordinates
GetCharABCWidthsBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbUINTuFirstCharUINT uFirstChar,	//First character in range to querytbUINTuLastCharUINT uLastChar,	//Last character in range to querytbLPABClpabcLPABC lpabc	//Address of character-width structure
GetCharABCWidthsFloatBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbUINTiFirstCharUINT iFirstChar,	//First character in range to querytbUINTiLastCharUINT iLastChar,	//Last character in range to querytbLPABCFLOATlpABCFLPABCFLOAT lpABCF	//Address of character-width structure
GetCharWidthBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbUINTiFirstCharUINT iFirstChar,	//First character in range to querytbUINTiLastCharUINT iLastChar,	//Last character in range to querytbLPINTlpBufferLPINT lpBuffer	//Address of buffer for widths
GetCharWidth32BOOL00tbHDChdcHDC hdc,	//Handle of device contexttbUINTiFirstCharUINT iFirstChar,	//First character in range to querytbUINTiLastCharUINT iLastChar,	//Last character in range to querytbLPINTlpBufferLPINT lpBuffer	//Address of buffer for widths
GetCharWidthFloatBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbUINTiFirstCharUINT iFirstChar,	//First-character code pointtbUINTiLastCharUINT iLastChar,	//Last-character code pointtbPFLOATpxBufferPFLOAT pxBuffer	//Address of buffer that receives width-values
GetClassInfoBOOL00cbHINSTANCEhinstNULLHINSTANCE hinst,	//Handle of application instancetbLPCTSTRlpszClassLPCTSTR lpszClass,	//Address of class name stringtbLPWNDCLASSlpwcLPWNDCLASS lpwc	//Address of structure for class data
GetClassLongDWORD00tbHWNDhwndHWND hwnd,	//Handle of windowcbintnIndexGCL_CBCLSEXTRAGCL_CBWNDEXTRAGCL_HBRBACKGROUNDGCL_HCURSORGCL_HICONGCL_HMODULEGCL_MENUNAMEGCL_STYLEGCL_WNDPROCint nIndex	//Offset of value to retrieve
GetClassNameint00tbHWNDhwndHWND hwnd,	//Handle of windowtbLPTSTRlpClassNameLPTSTR lpClassName,	//Address of buffer for class nametbintcchClassNameint cchClassName	//Size of buffer, in characters
GetClassWordWORD00tbHWNDhwndHWND hwnd,	//Handle of windowcbintnIndexGCW_ATOMint nIndex	//Offset of value to retrieve
GetClientRectBOOL00tbHWNDhwndHWND hwnd,	//Handle of windowtbLPRECTlprcLPRECT lprc	//Address of structure for client coordinates
GetClipboardDataHANDLE00tbUINTuFormatUINT uFormat	//Clipboard format
GetClipboardFormatNameint00tbUINTuFormatUINT uFormat,	//Clipboard format to retrievetbLPTSTRlpszFormatNameLPTSTR lpszFormatName,	//Address of buffer for nametbintcchFormatNameint cchFormatName	//Length of name string in characters
GetClipBoxint00tbHDChdcHDC hdc,	//Handle of the device contexttbLPRECTlprcLPRECT lprc	//Address of structure with rectangle
GetClipCursorBOOL00tbLPRECTlprcLPRECT lprc	//Address of structure for rectangle
GetClipRgnint00tbHDChdcHDC hdc,	//Handle of device contexttbHRGNhrgnHRGN hrgn	//Handle of region
GetColorAdjustmentBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbLPCOLORADJUSTMENTlpcaLPCOLORADJUSTMENT lpca	//Address of coloradjustment structure
GetCommModemStatusBOOL00tbHANDLEhCommDevHANDLE hCommDev,	//Handle of the communications devicexbLPDWORDMS_CTS_ONMS_DSR_ONMS_RING_ONMS_RLSD_ONLPDWORD lpfdwModemStats	//Address of control-register values
GetCommPropertiesBOOL00tbHANDLEhCommDevHANDLE hCommDev,	//Handle of the communications devicetbLPCOMMPROPlpcmmpLPCOMMPROP lpcmmp	//Address of communications properties structure	
GetCommStateBOOL00tbHANDLEhCommDevHANDLE hCommDev,	//Handle of the communications devicetbLPDCBlpdcbLPDCB lpdcb	//Address of device-control block structure
GetCommTimeoutsBOOL00tbHANDLEhCommDevHANDLE hCommDev,	//Handle of the communications devicetbLPCOMMTIMEOUTSlpctLPCOMMTIMEOUTS lpct	//Address of comm timeouts structure
GetCompressedFileSizeBOOL00tbHANDLEhCommDevHANDLE  hCommDev,	// handle of communications devicetbLPDCBlpdcbLPDCB  lpdcb	// address of device-control block structure
GetComputerNameBOOL00tbLPTSTRlpszNameLPTSTR lpszName	//Address of name buffertbLPDWORDlpcchBufferLPDWORD lpcchBuffer	//Address of size of name buffer
GetConsoleModeBOOL00tbHANDLEhConsoleHANDLE hConsole,	//Handle of console input or screen bufferxbLPDWORDENABLE_LINE_INPUTENABLE_ECHO_INPUTENABLE_PROCESSED_INPUTENABLE_WINDOW_INPUTENABLE_MOUSE_INPUTENABLE_PROCESSED_OUTPUTENABLE_WRAP_AT_EOL_OUTPUTLPDWORD lpfdwMode	//Current mode flags
GetConsoleTitleDWORD00tbLPTSTRlpszTitleLPTSTR lpszTitle,	//Address of buffer for titletbDWORDcchTitleDWORD cchTitle	//Size of the buffer
GetCPInfoBOOL00cbUINTCP_ACP_ANSICP_OEMCPUINT uCodePage,	//Code pagetbLPCPINFOlpCPInfoLPCPINFO lpCPInfo	//Address of structure for information
GetCurrencyFormatint00tbLCIDlcidLCID  lcid,	// locale to format currency string fortbDWORDdwFlagsDWORD  dwFlags,	// bit flags that condition the function's operationtbLPCTSTRlpValueLPCTSTR  lpValue,	// pointer to input number stringtbCONST CURRENCYFMT *lpFormatCONST CURRENCYFMT *  lpFormat,	// pointer to a formatting information structuretbLPTSTRlpCurrencyStrLPTSTR  lpCurrencyStr,	// pointer to output buffertbintcchCurrencyint  cchCurrency	// size of output buffer
GetCurrentDirectoryDWORD00tbDWORDcchCurDirDWORD cchCurDir,	//Size, in characters, of directory buffertbLPTSTRlpszCurDirLPTSTR lpszCurDir	//Address of buffer for current directory
GetCurrentObjectHGDIOBJ00tbHDChdcHDC hdc,	//Handle of device contextrbUINTOBJ_PENOBJ_BRUSHOBJ_PALOBJ_FONTOBJ_BITMAPUINT uObjectType	//Object-type identifier
GetCurrentPositionExBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbLPPOINTlpPointLPPOINT lpPoint	//Address of structure receiving current position
GetCursorPosBOOL00tbLPPOINTlpPointLPPOINT lpPoint	//Address of structure for cursor position
GetDateFormatW00tbLCIDLocaleLCID Locale,	//Locale of interestxbDWORDLOCALE_NOUSEROVERRIDEDATE_SHORTDATEDATE_LONGDATEDWORD dwFlags,	//Flags specifying function optionscbCONST SYSTEMTIME *lpDateNULLCONST SYSTEMTIME * lpDate,	//Date to be formattedcbLPCWSTRlpFormatNULLLPCWSTR lpFormat,	//Format stringtbLPWSTRlpDateStrLPWSTR lpDateStr,	//Buffer for storing formatted stringcbintcchDate0int cchDate	//Size of buffer
GetDCHDC00tbHWNDhwndHWND hwnd	//Handle of window
GetDCExHDC00tbHWNDhwndHWND hwnd,	//Handle of windowtbHRGNhrgnClipHRGN hrgnClip,	//Handle of clip regionxbDWORDDCX_WINDOWDCX_CACHEDCX_DEFAULTCLIPDCX_PARENTCLIPDCX_CLIPSIBLINGSDCX_CLIPCHILDRENDCX_NORESETATTRSDCX_NORECOMPUTEDCX_LOCKWINDOWUPDATEDCX_EXCLUDERGNDCX_INTERSECTRGNDCX_VALIDATEDWORD flags	//DC creation flags
GetDCOrgExBOOL00tbHDChdcHDC hdc,	//Device context handletbLPPOINTlpPointLPPOINT lpPoint	//Address of structure that receives translation origin
GetDIBitsint00tbHDChdcHDC hdc,	//Handle of device contexttbHBITMAPhbmpHBITMAP hbmp,	//Handle of bitmaptbUINTuStartScanUINT uStartScan,	//First scan line to set in destination bitmaptbUINTcScanLinesUINT cScanLines,	//Number of scan lines to copytbLPVOIDlpvBitsLPVOID lpvBits,	//Address of array for bitmap bitstbLPBITMAPINFOlpbiLPBITMAPINFO lpbi,	//Address of structure with bitmap datacbUINTDIB_PAL_COLORSDIB_RGB_COLORSDIB_PAL_INDICESUINT uUsage	//RGB or palette index
GetDiskFreeSpaceBOOL00cbLPCTSTRlpszRootPathNameNULLLPCTSTR lpszRootPathName,	//Address of root path nametbLPDWORDlpSectorsPerClusterLPDWORD lpSectorsPerCluster,	//Address of sectors per clustertbLPDWORDlpBytesPerSectorLPDWORD lpBytesPerSector,	//Address of bytes per sectortbLPDWORDlpFreeClustersLPDWORD lpFreeClusters,	//Address of number of free clusterstbLPDWORDlpClustersLPDWORD lpClusters	//Address of total number of clusters
GetDlgCtrlIDint00tbHWNDhwndCtlHWND hwndCtl	//Handle of control
GetDlgItemHWND00tbHWNDhwndDlgHWND hwndDlg,	//Handle of dialog boxtbintidControlint idControl	//Identifier of control
GetDlgItemIntUINT00tbHWNDhDlgHWND hDlg,	//Handle of dialog boxtbintnIDDlgItemint nIDDlgItem,	//Identifier of controlcbBOOL* &bTranslated lpTranslatedBOOL* lpTranslated,	//Address of variable for error flagcbBOOLbSignedTRUEFALSEBOOL bSigned	//Signed or unsigned indicator
GetDlgItemTextUINT00tbHWNDhwndDlgHWND hwndDlg,	//Handle of dialog boxtbintidControlint idControl,	//Identifier of controltbLPTSTRlpszLPTSTR lpsz,	//Address of buffer for texttbintcchMaxint cchMax	//Maximum size of string
GetEnhMetaFileHEHNMETAFILE00tbLPCTSTRlpszMetaFileLPCTSTR lpszMetaFile	//Address of metafile name
GetEnhMetaFileBitsUINT00tbHENHMETAFILEhemfHENHMETAFILE hemf,	//Handle of metafiletbUINTcbBufferUINT cbBuffer,	//Size of data buffer, in bytescbLPBYTElpbBufferNULLLPBYTE lpbBuffer	//Address of data buffer
GetEnhMetaFileDescriptionUINT00tbHENHMETAFILEhemfHENHMETAFILE hemf,	//Handle of enhanced metafiletbUINTcchBufferUINT cchBuffer,	//Size of text buffer, in characterstbLPTSTRlpszDescriptionLPTSTR lpszDescription	//Address of text buffer
GetEnhMetaFileHeaderUINT00tbHENHMETAFILEhemfHENHMETAFILE hemf,	//Handle of enhanced metafiletbUINTcbBufferUINT cbBuffer,	//Size of buffer, in bytescbLPENHMETAHEADERlpemhNULLLPENHMETAHEADER lpemh	//Address of buffer to receive data
GetEnhMetaFilePaletteEntriesUINT00tbHENHMETAFILEhemfHENHMETAFILE hemf,	//Handle of enhanced metafiletbUINTcEntriesUINT cEntries,	//Count of palette entriestbLPPALETTEENTRYlppeLPPALETTEENTRY lppe	//Address of palette-entry array
GetExitCodeProcessBOOL00tbHANDLEhProcessHANDLE hProcess,	//Handle to the processtbLPDWORDlpdwExitCodeLPDWORD lpdwExitCode	//Address to receive termination status
GetExitCodeThreadBOOL00tbHANDLEhThreadHANDLE hThread,	//Handle to the threadtbLPDWORDlpdwExitCodeLPDWORD lpdwExitCode	//Address to receive termination status
GetExpandedNameINT00tbLPTSTRlpszSourceLPTSTR lpszSource,	//Address of name of compressed filetbLPTSTRlpszBufferLPTSTR lpszBuffer	//Address of buffer for original filename
GetFileAttributesDWORD00tbLPCTSTRlpszFileNameLPCTSTR lpszFileName	//Address of the name of the file
GetFileInformationByHandleBOOL00tbHANDLEhFileHANDLE hFile,	//Handle of filetbLPBY_HANDLE_FILE_INFORMATIONlpFileInformationLPBY_HANDLE_FILE_INFORMATION lpFileInformation	//Address of structure
GetFileSecurityBOOL00tbLPCTSTRlpszFileLPCTSTR lpszFile,	//Address of string for file nametbSECURITY_INFORMATIONsiSECURITY_INFORMATION si,	//Requested informationtbPSECURITY_DESCRIPTORpsdPSECURITY_DESCRIPTOR psd,	//Address of security descriptortbDWORDcbsdDWORD cbsd,	//Size of security descriptor buffertbLPDWORDlpcbsdRequiredLPDWORD lpcbsdRequired	//Address of required size of buffer
GetFileSizeDWORD00tbHANDLEhFileHANDLE hFile,	//Handle of file to get size ofcbLPDWORDlpdwFileSizeHighNULLLPDWORD lpdwFileSizeHigh,	//Address of high-order word for file size
GetFileTimeBOOL00tbHANDLEhFileHANDLE hFile,	//Identifies the filetbLPFILETIMElpftCreationLPFILETIME lpftCreation,	//Address of creation timetbLPFILETIMElpftLastAccessLPFILETIME lpftLastAccess,	//Address of last access timetbLPFILETIMElpftLastWriteLPFILETIME lpftLastWrite	//Address of last write time
GetFileTitleshort00tbLPCTSTRlpszFileLPCTSTR lpszFile,	//Address of full path and file name for filetbLPTSTRlpszTitleLPTSTR lpszTitle,	//Address of buffer that receives filenametbORDcbBufORD cbBuf,	//Length of buffer
GetFileTypeDWORD00tbHANDLEhFileHANDLE hFile	//File handle
GetFileVersionInfoBOOL00tbLPTSTRlpszFileLPTSTR lpszFile,	//Address of filenamecbDWORD0dwHandleDWORD dwHandle,	//IgnoredtbDWORDcbBufDWORD cbBuf,	//Size of buffertbLPVOIDlpvDataLPVOID lpvData	//Address of buffer for file-version info.
GetFileVersionInfoSizeDWORD00tbLPTSTRlpszFileLPTSTR lpszFile,	//Address of filenametbLPDWORDlpdwHandleLPDWORD lpdwHandle	//Always set to zero
GetFullPathNameDWORD00tbLPCTSTRlpszFileLPCTSTR lpszFile,	//Address of name of file to find path fortbDWORDcchPathDWORD cchPath,	//Size, in characters, of path buffertbLPTSTRlpszPathLPTSTR lpszPath,	//Address of path buffertbLPTSTR *ppszFilePartLPTSTR *ppszFilePart	//Address of filename in path
GetGraphicsModeint00tbHDChdcHDC hdc	//Handle of device context
GetIconInfoBOOL00tbHICONhiconHICON hicon,	//Icon handletbPICONINFOpiconinfoPICONINFO piconinfo	//Address of icon structure
GetKerningPairsDWORD00tbHDChdcHDC hdc,	//Handle of device contexttbDWORDnNumPairsDWORD nNumPairs,	//Number of kerning-pairs to be retrievedcbLPKERNINGPAIRlpkrnpairNULLLPKERNINGPAIR lpkrnpair	//Address of kerning-pair array
GetKeyboardLayoutNameBOOL00tbLPTSTRlpszKLNameLPTSTR lpszKLName	//Address of buffer for layout name
GetKeyboardTypeint00rbPBYTE0-Keyboard type 1 - Keyboard subtype 2 - Number of function keys on the keyboard PBYTE pbKeyState	//Address of array to receive status data
GetKeyboardTypeint00rbPBYTE0-Keyboard type 1 - Keyboard subtype 2 - Number of function keys on the keyboard PBYTE pbKeyState	//Address of array to receive status data
GetKeyNameTextint00tbLONGlParamLONG lParam,	//Second parameter of keyboard messagetbLPTSTRlpszBufferLPTSTR lpszBuffer,	//Address of buffer for key nametbintcchMaxKeyint cchMaxKey	//Maximum length of key-name string length
GetKeyStateSHORT00tbintnVirtKeyintnVirtKey	//Virtual-key code
GetLargestConsoleWindowSizeCOORD00tbHANDLEhConsoleOutputHANDLE hConsoleOutput	//Handle of console screen buffer
GetLastActivePopupHWND00tbHWNDhwndOwnerHWND hwndOwner	//Handle of owner window
GetLocaleInfoWint00tbLCIDlcidLCID lcid,	//Locale identifiertbLCTYPELCTypeLCTYPE LCType,	//Type of informationtbLPWSTRlpLCDataLPWSTR lpLCData,	//Address of buffer for informationcbintcchData0int cchData	//Size of buffer
GetLocalTimeVOID00tbLPSYSTEMTIMElpstLPSYSTEMTIME lpst	//Address of system time structure
GetMailslotInfoBOOL00tbHANDLEhMailslotHANDLE hMailslot,	//Mailslot handlecbLPDWORDlpcbMaxMsgNULLLPDWORD lpcbMaxMsg,	//Address of maximum message sizecbLPDWORDlpcbNextMsgMAILSLOT_NO_MESSAGENULLLPDWORD lpcbNextMsg,	//Address of size of next messagecbLPDWORDlpcMsgNULLLPDWORD lpcMsg,	//Address of number of messagescbLPDWORDlpdwReadTimeoutNULLLPDWORD lpdwReadTimeout,	//Address of read time-out
GetMapModeint00tbHDChdcHDC hdc	//Handle of device context
GetMenuHMENU00tbHWNDhwndHWND hwnd	//Handle of window
GetMenuItemIDUINT00tbHMENUhmenuHMENU hmenu,	//Handle of menutbintnPosint nPos	//Position of menu item
GetMenuStateUINT00tbHMENUhmenuHMENU hmenu,	//Handle of menutbUINTuItemUINT uItem,	//Menu item to queryxbUINTMF_BYCOMMANDMF_BYPOSITIONUINT fuFlags	//Menu flags
GetMenuStringint00tbHMENUhmenuHMENU hmenu,	//Handle of menutbUINTidItemUINT idItem,	//Menu item identifiertbLPTSTRlpszLPTSTR lpsz,	//Address of buffer for stringtbintcchMaxint cchMax,	//Maximum length of stringrbUINTMF_BYCOMMANDMF_BYPOSITIONUINT fuFlags	//Menu flags
GetMessageBOOL00tbLPMSGlpmsgLPMSG lpmsg,	//Address of structure with messagecbHWNDhwndNULLHWND hwnd,	//Handle of windowtbUINTuMsgFilterMinUINT uMsgFilterMin,	//First messagetbUINTuMsgFilterMaxUINT uMsgFilterMax	//Last message
GetMetaFileBitsExUINT00tbHMETAFILEhmfHMETAFILE hmf,	//Handle of metafiletbUINTnSizeUINT nSize,	//Size of metafile, in bytescbLPVOIDlpvDataNULLLPVOID lpvData	//Address of metafile data
GetMetaRgnint00tbHDChdcHDC hdc,	//Handle of device contexttbHRGNhrgnHRGN hrgn	//Handle of region
GetMiterLimitBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbPFLOATpeLimitPFLOAT peLimit	//Address of variable receiving miter limit
GetModuleFileNameDWORD00cbHMODULEhinstModuleNULLHMODULE hinstModule,	//Handle of module to find filename fortbLPTSTRlpszPathLPTSTR lpszPath,	//Address of buffer for module pathtbDWORDcchPathDWORD cchPath	//Size of buffer in characters
GetModuleHandleHMODULE00cbLPCTSTRlpszModuleNULLLPCTSTR lpszModule	//Address of module name to return handle for
GetMsgProcLRESULTCALLBACK00cbintnCode-1int nCode,	//Hook codetbWPARAMwParamWPARAM wParam,	//Removal flagtbLPARAMlParamLPARAM lParam	//Address of structure with message
GetNamedPipeHandleStateBOOL00tbHANDLEhNamedPipeHANDLE hNamedPipe,	//Handle of named pipecbLPDWORDlpdwStateNULLLPDWORD lpdwState,	//Address of flags indicating pipe statecbLPDWORD&dwCurInstanceslpdwCurInstancesLPDWORD lpdwCurInstances,	//Address of number of current pipe instancescbLPDWORD&cbMaxCollectlpcbMaxCollectLPDWORD lpcbMaxCollect,	//Address of max bytes before remote transmissioncbLPDWORD&dwCollectTimeoutlpdwCollectTimeoutLPDWORD lpdwCollectTimeout,	//Address of max time before remote transmissiontbLPTSTRlpszUserLPTSTR lpszUser,	//Address of user name of client processtbDWORDcchMaxUserDWORD cchMaxUser	//Size in characters of user name buffer
GetNamedPipeInfoBOOL00tbHANDLEhNamedPipeHANDLE hNamedPipe,	//Handle of named pipecbLPDWORD&dwTypelpdwTypeLPDWORD lpdwType,	//Address of flags indicating type of pipecbLPDWORD&cbOutBufNULLlpcbOutBufLPDWORD lpcbOutBuf,	//Address of size in bytes of pipe's output buffercbLPDWORD&cbInBufNULLlpcbInBufLPDWORD lpcbInBuf,	//Address of size in bytes of pipe's input buffercbLPDWORD&cbMaxInstancesNULLlpcMaxInstancesLPDWORD lpcMaxInstances	//Address of max number of pipe instances
GetNearestColorCOLORREF00tbHDChdcHDC hdc,	//Handle of device contexttbCOLORREFcrColorCOLORREF crColor	//Color to be matched
GetNearestPaletteIndexUINT00tbHPALETTEhpalHPALETTE hpal,	//Handle of logical color palettetbCOLORREFcrColorCOLORREF crColor	//Color to be matched
GetNextDlgGroupItemHWND00tbHWNDhwndDlgHWND hwndDlg,	//Handle of dialog boxtbHWNDhwndCtlHWND hwndCtl,	//Handle of controlcbBOOLfPreviousTRUEFALSEBOOL fPrevious	//Direction flag
GetNextDlgTabItemHWND00tbHWNDhwndDlgHWND hwndDlg,	//Handle of dialog boxcbHWNDhwndCtlNULLHWND hwndCtl,	//Handle of known controlcbBOOLfPreviousTRUEFALSEBOOL fPrevious	//Direction flag
GetNextWindowHWND00tbHWNDhwndHWND hwnd,	//Handle of current windowrbUINTGW_HWNDNEXTGW_HWNDPREVUINT fuDirection	//Direction flag
GetNumberFormatint00tbLCIDlcidLCID lcid,	// locale to format number string fortbDWORDdwFlagsDWORD  dwFlags,	// bit flags that condition the function's operationtbLPCTSTRlpValueLPCTSTR  lpValue,	// pointer to input number stringtbCONST NUMBERFMT *  lpFormatCONST NUMBERFMT *  lpFormat,	// pointer to a formatting information structuretbLPTSTRlpNumberStrLPTSTR  lpNumberStr,	// pointer to output buffertbintcchNumberint  cchNumber	// size of output buffer
GetNumberOfConsoleInputEventsBOOL00tbHANDLEhConsoleInputHANDLE hConsoleInput,	//Handle of console input buffertbHANDLEhConsoleInputHANDLE hConsoleInput	//Handle of console input buffer
GetNumberOfConsoleMouseButtonsBOOL00tbLPDWORDlpcMouseButtonsLPDWORD lpcMouseButtons	//Number of buttons
GetNumberOfEventLogRecordsBOOL00tbHANDLEhEventLogHANDLE hEventLog,	//Handle to event logtbPDWORDpcRecordsPDWORD pcRecords	//Buffer for number of records
GetObjectint00tbHGDIOBJhgdiobjHGDIOBJ hgdiobj,	//Handle of objecttbintcbBufferint cbBuffer,	//Size of buffer for object informationcbLPVOIDlpvObjectNULLLPVOID lpvObject	//Address of buffer for object information
GetObjectTypeDWORD00tbHGDIOBJhgdiobjHGDIOBJ hgdiobj	//Handle of graphic object
GetOutlineTextMetricsUINT00tbHDChdcHDC hdc,	//Handle of device contexttbUINTcbDataUINT cbData,	//Size of metric data arraycbLPOUTLINETEXTMETRIClpOTMNULLLPOUTLINETEXTMETRIC lpOTM	//Address of metric data array
GetOverlappedResultBOOL00tbHANDLEhFileHANDLE hFile,	//Handle of file, pipe, or comm. devicetbLPOVERLAPPEDlpoOverlappedLPOVERLAPPED lpoOverlapped,	//Address of overlapped structuretbLPDWORDlpcbTransferLPDWORD lpcbTransfer,	//Address of actual bytes countcbBOOLfWaitTRUEFALSEBOOL fWait	//Wait flag
GetPaletteEntriesUINT00tbHPALETTEhpalHPALETTE hpal,	//Handle of logical color palettetbUINTiStartIndexUINT iStartIndex,	//First entry to retrievetbUINTnEntriesUINT nEntries,	//Number of entries to retrievetbLPPALETTEENTRYlppeLPPALETTEENTRY lppe	//Address of array receiving entries
GetParentHWND00tbHWNDhwndChildHWND hwndChild	//Handle of child window
GetPathint00tbHDChdcHDC hdc,	//Handle of device contexttbLPPOINTlpPointsLPPOINT lpPoints,	//Address of array receiving path verticesxbLPBYTEPT_MOVETOPT_LINETOPT_BEZIERTOPT_CLOSEFIGURELPBYTE lpTypes,	//Address of array of path vertex typestbintnSizeint nSize	//Count of points defining path
GetPixelCOLORREF00tbHDChdcHDC hdc,	//Handle of device contexttbintnXPosint nXPos,	//X-coordinate of pixeltbintnYPosint nYPos	//Y-coordinate of pixel
GetPolyFillModeint00tbHDChdcHDC hdc	//Handle of device context
GetPrinterBOOL00tbHANDLEhPrinterHANDLE hPrinter,	//Handle to printer of interestrbDWORD123DWORD dwLevel,	//Version of printer info data structuretbLPBYTElpbPrinterLPBYTE lpbPrinter,	//Pointer to array of bytes that receives printer info structuretbDWORDcbBufDWORD cbBuf,	//Size, in bytes, of array of bytestbLPDWORDlpdwNeededLPDWORD lpdwNeeded	//Pointer to variable with count of bytes retrieved (or required
GetPrinterDataDWORD00tbHANDLEhPrinterHANDLE hPrinter,	//Handle of printer objecttbLPTSTRpValueNameLPTSTR pValueName,	//Address of data typecbLPDWORDNULLpTypeLPDWORD pType,	//ReservedtbLPBYTEpDataLPBYTE pData,	//Address of array of bytes that receives datatbDWORDnSizeDWORD nSize,	//Size,in bytes, of arraytbLPDWORDpcbNeededLPDWORD pcbNeeded	//Addr. of variable with count of bytes retrieved (or required
GetPrinterDriverBOOL00tbHANDLEhPrinterHANDLE hPrinter,	//Printer objectcbLPTSTRlpszEnvNULLLPTSTR lpszEnv,	//Address of environmentrbDWORD12DWORD dwLevel,	//Structure leveltbLPBYTElpbDrvInfoLPBYTE lpbDrvInfo,	//Address of structure arraytbDWORDcbBufDWORD cbBuf,	//Size, in bytes, of arraycbLPDWORD&dwNeededlpdwNeededLPDWORD lpdwNeeded	//Addr. of variable with count of bytes retrieved (or required
GetPrinterDriverDirectoryBOOL00cbLPTSTRlpszNameLPTSTR lpszName,	//Address of server namecbLPTSTRlpszEnvNULLLPTSTR lpszEnv,	//Address of environmentcbDWORD1dwLevelDWORD dwLevel,	//Address of structuretbLPBYTElpbDirLPBYTE lpbDir,	//Address of structure array that receives pathtbDWORDcbBufDWORD cbBuf,	//Size, in bytes, of arraycbLPDWORD&dwNeededlpdwNeededLPDWORD lpdwNeeded	//Addr. of variable with count of bytes retrieved (or required
GetPrintProcessorDirectoryBOOL00cbLPTSTRlpszNameNULLLPTSTR lpszName,	//Address of server namecbLPTSTRlpszEnvNULLLPTSTR lpszEnv,	//Address of environmentcbDWORD1dwLevelDWORD dwLevel,	//Structure leveltbLPBYTElpbProcessorDirLPBYTE lpbProcessorDir,	//Address of structure arraytbDWORDcbBufDWORD cbBuf,	//Size, in bytes, of arraycbLPDWORD&dwNeededlpdwNeededLPDWORD lpdwNeeded,	//Addr. of variable with count of bytes retrieved (or required
GetPriorityClassDWORD00tbHANDLEhProcessHANDLE hProcess	//Handle to the process
GetPriorityClipboardFormatint00tbUINT *puPriorityListUINT *puPriorityList,	//Address of priority listtbintcListint cList	//Number of entries in list
GetPrivateObjectSecurityBOOL00tbPSECURITY_DESCRIPTORObjectDescriptorPSECURITY_DESCRIPTOR ObjectDescriptor,	//Address of SD to querytbSECURITY_INFORMATIONSecurityInformationSECURITY_INFORMATION SecurityInformation,	//Requested informationtbPSECURITY_DESCRIPTORResultantDescriptorPSECURITY_DESCRIPTOR ResultantDescriptor,	//Address of retrieved SDtbDWORDDescriptorLengthDWORD DescriptorLength,	//Size of buffer for retrieved SDtbPDWORDReturnLengthPDWORD ReturnLength	//Address of buffer size required for SD
GetPrivateProfileIntUINT00tbLPCTSTRlpszSectionLPCTSTR lpszSection,	//Address of section nametbLPCTSTRlpszKeyLPCTSTR lpszKey,	//Address of key nametbINTdwDefaultINT dwDefault,	//Return value if key name is not foundtbLPCTSTRlpszFileLPCTSTR lpszFile	//Address of initialization filename
GetPrivateProfileSectionDWORD00tbLPCTSTRlpszSectionLPCTSTR lpszSection,	//Address of section nametbLPTSTRlpszReturnBufferLPTSTR lpszReturnBuffer,	//Address of return buffertbDWORDcchBufferDWORD cchBuffer,	//Size of return buffertbLPCTSTRlpszFileLPCTSTR lpszFile	//Address of initialization filename
GetPrivateProfileStringDWORD00cbLPCTSTRlpszSectionNULLLPCTSTR lpszSection,	//Address of section namecbLPCTSTRlpszKeyNULLLPCTSTR lpszKey,	//Address of key namecbLPCTSTRlpszDefaultNULLLPCTSTR lpszDefault,	//Address of default stringtbLPTSTRlpszReturnBufferLPTSTR lpszReturnBuffer,	//Address of destination buffertbDWORDcchReturnBufferDWORD cchReturnBuffer,	//Size of destination buffertbLPCTSTRlpszFileLPCTSTR lpszFile	//Address of initialization filename
GetProcAddressFARPROC00tbLPCTSTRlpszFileLPCTSTR lpszFile,	//Address of initialization filenametbLPCSTRlpszProcLPCSTR lpszProc	//Name of function
GetProcessAffinityMaskDWORD00tbLPCTSTRlpszSectionLPCTSTR  lpszSection,	// address of section nametbLPCTSTRlpszKeyLPCTSTR  lpszKey,	// address of key nametbLPCTSTRlpszDefaultLPCTSTR  lpszDefault,	// address of default stringtbLPTSTRlpszReturnBufferLPTSTR  lpszReturnBuffer,	// address of destination buffertbLPTSTRlpszReturnBufferLPTSTR  lpszReturnBuffer,	// address of destination buffertbLPCTSTRlpszFileLPCTSTR  lpszFile	// address of initialization filename
GetProcessShutdownParametersBOOL00tbLPDWORDlpdwLevelLPDWORD lpdwLevel,tbLPDWORDlpdwFlagsLPDWORD lpdwFlags
GetProcessTimesBOOL00tbHANDLEhProcessHANDLE hProcess,	//Specifies the process of interestcbLPFILETIMElpCreationTimeLPFILETIME lpCreationTime,	//When the process was borncbLPFILETIMElpExitTimeLPFILETIME lpExitTime,	//When the process diedtbLPFILETIMElpKernelTimeLPFILETIME lpKernelTime,	//Time the process has spent in kernel-modetbLPFILETIMElpUserTimeLPFILETIME lpUserTime	//Time the process has spent in user-mode
GetProfileIntUINT00tbLPCTSTRlpszSectionLPCTSTR lpszSection,	//Address of section nametbLPCTSTRlpszKeyLPCTSTR lpszKey,	//Address of key nametbINTdwDefaultINT dwDefault	//Default value if key name is not found
GetProfileStringDWORD00tbLPCTSTRlpszSectionLPCTSTR lpszSection,	//Address of section namecbLPCTSTRlpszKeyNULLLPCTSTR lpszKey,	//Address of key nametbLPCTSTRlpszDefaultLPCTSTR lpszDefault,	//Address of default stringtbLPTSTRlpszReturnBufferLPTSTR lpszReturnBuffer,	//Address of destination buffertbDWORDcchReturnBufferDWORD cchReturnBuffer	//Size of destination buffer
GetPropHANDLE00tbHWNDhwndHWND hwnd,	//Handle of windowtbLPCTSTRlpszLPCTSTR lpsz	//Atom or address of string
GetQueuedCompletionStatusBOOL00tbHANDLECompletionPortHANDLE CompletionPort,	// the I/O completion port of interesttbLPDWORDlpNumberOfBytesTransferredLPDWORD lpNumberOfBytesTransferred,	// to receive number of bytes transferred during I/OtbLPDWORDlpCompletionKeyLPDWORD lpCompletionKey,	// to receive file's completion keytbLPOVERLAPPED * lpOverlappedLPOVERLAPPED * lpOverlapped,	// to receive pointer to OVERLAPPED structuretbDWORDdwMillisecondsDWORD dwMilliseconds	// optional timeout value
GetQueueStatusDWORD00xbUINTQS_ALLINPUTQS_HOTKEYQS_INPUTQS_KEYQS_MOUSEQS_MOUSEBUTTONQS_MOUSEMOVEQS_PAINTQS_POSTMESSAGEQS_SENDMESSAGEQS_TIMERUINT fuFlags	//Queue-status flags
GetRgnBoxint00tbHRGNhrgnHRGN hrgn,	//Handle of a regiontbLPRECTlprcLPRECT lprc	//Address of structure that receives bounding rect.
GetRgnBoxint00tbHRGNhrgnHRGN hrgn,	//Handle of a regiontbLPRECTlprcLPRECT lprc	//Address of structure that receives bounding rect.
GetROP2int00tbHDChdcHDC hdc	//Handle of device context
GetSaveFileNameBOOL00tbLPOPENFILENAMElpofnLPOPENFILENAME lpofn	//Address of structure with initialization data
GetScrollPosint00tbHWNDhwndHWND hwnd,	//Handle of window with scroll barrbintSB_CTLSB_HORZSB_VERTint fnBar	//Scroll bar flags
GetScrollRangeBOOL00tbHWNDhwndHWND hwnd,	//Handle of window with scroll barrbintSB_CTLSB_HORZSB_VERTint fnBar,	//Scroll bar flagstbLPINTlpMinPosLPINT lpMinPos,	//Address of variable that receives minimum positiontbLPINTlpMaxPosLPINT lpMaxPos	//Address of variable that receives maximum position
GetSecurityDescriptorControlBOOL00tbPSECURITY_DESCRIPTORpsdPSECURITY_DESCRIPTOR psd,	//Address of security descriptortbPSECURITY_DESCRIPTOR_CONTROLpsdcPSECURITY_DESCRIPTOR_CONTROL psdc,	//Address of control structuretbLPDWORDlpdwRevisionLPDWORD lpdwRevision	//Address of revision value
GetSecurityDescriptorDaclBOOL00tbPSECURITY_DESCRIPTORpsdPSECURITY_DESCRIPTOR psd,	//Address of security descriptorcbLPBOOL&fDaclPresentlpfDaclPresentLPBOOL lpfDaclPresent,	//Address of flag for presence of disc. ACLtbPACL *lppAclPACL *lppAcl,	//Address of pointer to ACLtbPACL *lppAclPACL *lppAcl	//Address of pointer to ACL
GetSecurityDescriptorGroupBOOL00tbPSECURITY_DESCRIPTORpsdPSECURITY_DESCRIPTOR psd,	//Address of security descriptorcbPSID * lppsidGroup NULLPSID * lppsidGroup,	//Address of pointer to group SIDtbLPBOOLlpfGroupDefaultedLPBOOL lpfGroupDefaulted	//Address of flag for default
GetSecurityDescriptorLengthDWORD00tbPSECURITY_DESCRIPTORpsdPSECURITY_DESCRIPTOR psd	//Address of security descriptor
GetSecurityDescriptorOwnerBOOL00tbPSECURITY_DESCRIPTORpsdPSECURITY_DESCRIPTOR psd,	//Address of security descriptorcbPSID *lppsidOwnerNULLPSID *lppsidOwner,	//Address of pointer to owner SIDtbLPBOOLlpfOwnerDefaultedLPBOOL lpfOwnerDefaulted	//Address of flag for default
GetSecurityDescriptorSaclBOOL00tbPSECURITY_DESCRIPTORpsdPSECURITY_DESCRIPTOR psd,	//Address of security descriptorcbLPBOOL&fSaclPresentlpfSaclPresentLPBOOL lpfSaclPresent,	//Address of flag for presence of system ACLtbPACL *lppAclPACL *lppAcl,	//Address of pointer to ACLcbLPBOOL&fSaclDefaultedlpfSaclDefaultedLPBOOL lpfSaclDefaulted,	//Address of flag for default system ACL
GetServiceDisplayNameBOOL00tbSC_HANDLEhSCManagerSC_HANDLE hSCManager,	//Handle to a service control manager databasetbLPCTSTRlpServiceNameLPCTSTR lpServiceName,	//The service nametbLPTSTRlpDisplayNameLPTSTR lpDisplayName,	//Buffer to receive the service's display nametbLPDWORDlpcchBufferLPDWORD lpcchBuffer	//Size of display name buffer and display name
GetServiceKeyNameBOOL00tbSC_HANDLEhSCManagerSC_HANDLE hSCManager,	//Handle to a service control manager databasetbLPCTSTRlpDisplayNameLPCTSTR lpDisplayName,	//The service's display nametbLPTSTRlpServiceNameLPTSTR lpServiceName,	//Buffer to receive the service nametbLPDWORDlpcchBufferLPDWORD lpcchBuffer	//Size of service name buffer and service name
GetShortPathName00tbLPCTSTRlpszLongPathLPCTSTR  lpszLongPath,	//Points to a null-terminated pathtbLPTSTRlpszShortPathLPTSTR  lpszShortPath,	//Points to a buffer to receive the short form of the pathtbDWORDcchBufferDWORD  cchBuffer	//Specifies the size of the buffer pointed to by lpszShortPath
GetSidIdentifierAuthorityPSID_IDENTIFIER_AUTHORITY00tbPSIDpsidPSID psid	//Address of SID to query
GetSidLengthRequiredDWORD00tbUCHARcSubauthoritiesUCHAR cSubauthorities	//Count of subauthorities
GetSidSubAuthorityPDWORD00tbPSIDpsidPSID psid,	//Address of SID to querytbDWORDdwSubauthorityDWORD dwSubauthority	//Index of subauthority to retrieve
GetSidSubAuthorityCountPUCHAR00tbPSIDpsidPSID psid	//Address of SID to query
GetStartupInfoVOID00tbLPSTARTUPINFOlpsiLPSTARTUPINFO lpsi	//Address of STARTUPINFO structure
GetStdHandleHANDLE00rbDWORDSTD_INPUT_HANDLESTD_OUTPUT_HANDLESTD_ERROR_HANDLEDWORD fdwDevice	//Input, output, or error device
GetStockObjectHGDIOBJ00rbintBLACK_BRUSHDKGRAY_BRUSHGRAY_BRUSHHOLLOW_BRUSHLTGRAY_BRUSHNULL_BRUSHWHITE_BRUSHBLACK_PENNULL_PENWHITE_PENANSI_FIXED_FONTANSI_VAR_FONTDEVICE_DEFAULT_FONTOEM_FIXED_FONTSYSTEM_FONTSYSTEM_FIXED_FONTDEFAULT_PALETTEint fnObject	//Type of stock object
GetStretchBltModeint00tbHDChdcHDC hdc	//Handle of device context
GetStringTypeABOOL00tbLCIDlcidLCID lcid,	// locale identifertbDWORDdwInfoTypeDWORD  dwInfoType,	// information-type optionstbLPCSTRlpSrcStrLPCSTR  lpSrcStr,	// address of stringtbintcchSrcint  cchSrc,	// number of characters in stringtbLPWORDlpCharTypeLPWORD  lpCharType	// address of buffer for output
GetStringTypeEx00tbLCIDlcidLCID lcid,	// locale identifertbDWORDdwInfoTypeDWORD  dwInfoType,	//Information-type optionstbLPCTSTRlpSrcStrLPCTSTR  lpSrcStr,	//Address of stringtbintcchSrcint  cchSrc,	//Number of characters in stringtbLPWORDlpCharTypeLPWORD  lpCharType	//Address of buffer for output
GetStringTypeWBOOL00rbDWORDCT_CTYPE1CT_CTYPE2CT_CTYPE3DWORD fdwInfoType,	//Information-type optionstbLPCWSTRlpSrcStrLPCWSTR lpSrcStr,	//Address of stringtbintcchSrcint cchSrc,	//Number of characters in stringtbLPWORDlpCharTypeLPWORD lpCharType	//Address of buffer for output
GetSubMenuHMENU00tbHMENUhmenuHMENU hmenu,	//Handle of menutbintnPosint nPos	//Menu item position
GetSysColorDWORD00rbintCOLOR_ACTIVEBORDERCOLOR_ACTIVECAPTIONCOLOR_APPWORKSPACECOLOR_BACKGROUNDCOLOR_BTNFACECOLOR_BTNSHADOWCOLOR_BTNTEXTCOLOR_CAPTIONTEXTCOLOR_GRAYTEXTCOLOR_HIGHLIGHTCOLOR_HIGHLIGHTTEXTCOLOR_INACTIVEBORDERCOLOR_INACTIVECAPTIONCOLOR_INACTIVECAPTIONTEXTCOLOR_MENUCOLOR_MENUTEXTCOLOR_SCROLLBARCOLOR_SHADOWCOLOR_WINDOWCOLOR_WINDOWFRAMECOLOR_WINDOWTEXTint nIndex	//Display element
GetSystemDirectoryUINT00tbLPTSTRlpszSysPathLPTSTR lpszSysPath,	//Address of buffer for system directorytbUINTcchSysPathUINT cchSysPath	//Size of directory buffer
GetSystemInfoVOID00tbLPSYSTEM_INFOlpSystemInfoLPSYSTEM_INFO lpSystemInfo	//Address of system info. structure
GetSystemMenuHMENU00tbHWNDhwndHWND hwnd,	//Handle of window to own System menucbBOOLfRevertTRUEFALSEBOOL fRevert	//Reset flag
GetSystemMetricsint00rbintSM_CXBORDERSM_CYBORDERSM_CYCAPTIONSM_CXCURSORSM_CYCURSORSM_CXDLGFRAMESM_CYDLGFRAMESM_CXDOUBLECLKSM_CYDOUBLECLKSM_CXFRAMESM_CYFRAMESM_CXFULLSCREENSM_CYFULLSCREENSM_CXHSCROLLSM_CYHSCROLLSM_CXICONSM_CYICONSM_CXICONSPACINGSM_CYICONSPACINGSM_CYKANJIWINDOWSM_CYMENUSM_CXMINSM_CYMINSM_CXMINTRACKSM_CYMINTRACKSM_CMOUSEBUTTONSSM_CXSCREENSM_CYSCREENSM_CXSIZESM_CYSIZESM_CXVSCROLLSM_CYVSCROLLSM_CXHTHUMBSM_CYVTHUMBSM_DBCSENABLEDSM_DEBUGSM_MENUDROPALIGNMENTSM_MOUSEPRESENTSM_PENWINDOWSSM_SWAPBUTTONint nIndex,	//System measurement to retrieve
GetSystemPaletteEntriesUINT00tbHDChdcHDC hdc,	//Handle of device contexttbUINTiStartIndexUINT iStartIndex,	//Index of first entry to be retrievedtbUINTnEntriesUINT nEntries,	//Number of entries to be retrievedcbLPPALETTEENTRYlppeNULLLPPALETTEENTRY lppe	//Array receiving system-palette entries
GetSystemPaletteUseUINT00tbHDChdcHDC hdc	//Handle of device context
GetSystemTimeVOID00tbLPSYSTEMTIMElpstLPSYSTEMTIME lpst	//Address of system time structure
GetSystemTimeAdjustmentBOOL00tbPDWORDlpTimeAdjustmentPDWORD  lpTimeAdjustment,	// size, in 100-nanosecond units, of a periodic time adjustmenttbPDWORDlpTimeIncrementPDWORD  lpTimeIncrement,	// time, in 100-nanosecond units, between periodic time adjustmentstbPBOOLlpTimeAdjustmentDisabledPBOOL  lpTimeAdjustmentDisabled	// whether periodic time adjustment is disabled or enabled
GetTabbedTextExtentDWORD00tbHDChdcHDC hdc,	//Handle of device contexttbLPCTSTRlpszStrLPCTSTR lpszStr,	//Address of character stringtbintcchStringint cchString,	//Number of characters in stringtbintnTabPosint nTabPos,	//Number of tab positionstbLPINTlpnTabStopPosLPINT lpnTabStopPos	//Address of array of tab positions
GetTapeParametersDWORD00tbHANDLEhDeviceHANDLE hDevice,	//Handle of open devicerbDWORDGET_TAPE_MEDIA_INFORMATIONGET_TAPE_DRIVE_INFORMATIONDWORD dwOperation,	//Type of information requestedcbLPDWORD&dwSizelpdwSizeLPDWORD lpdwSize,	//Address of returned informationtbLPVOIDlpTapeInformationLPVOID lpTapeInformation	//Tape media or drive information
GetTapePositionDWORD00tbHANDLEhDeviceHANDLE hDevice,	//Handle of open devicerbDWORDTAPE_ABSOLUTE_POSITIONTAPE_LOGICAL_POSITIONDWORD dwPositionType,	//Type of address to obtaintbLPDWORDlpdwPartitionLPDWORD lpdwPartition,	//Current tape partitiontbLPDWORDlpdwOffsetLowLPDWORD lpdwOffsetLow,	//Low-order 32 bits of tape positioncbLPDWORDlpdwOffsetHighNULLLPDWORD lpdwOffsetHigh	//High-order 32 bits of tape position
GetTapeStatusDWORD00tbHANDLEhDeviceHANDLE hDevice	//Handle of open device
GetTempFileNameUINT00cbLPCTSTRlpszPathNULLLPCTSTR lpszPath,	//Address of name of dir. where temp. file is createdtbLPCTSTRlpszPrefixLPCTSTR lpszPrefix,	//Address of prefix of temp. filenamecbUINTuUnique0UINT uUnique,	//Number used to create temp. filenametbLPTSTRlpszTempFileLPTSTR lpszTempFile	//Address buffer that will receive temp. filename
GetTempPathDWORD00tbDWORDcchBufferDWORD cchBuffer,	//Size, in characters, of the buffertbLPTSTRlpszTempPathLPTSTR lpszTempPath	//Address of buffer for temp. path name
GetTextAlignUINT00tbHDChdcHDC hdc	//Handle of device context
GetTextCharacterExtraint00tbHDChdcHDC hdc	//Handle of device context
GetTextColorCOLORREF00tbHDChdcHDC hdc	//Handle of device context
GetTextExtentExPointBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbLPCTSTRlpszStrLPCTSTR lpszStr,	//Address of character stringtbintcchStringint cchString,	//Number of characters in stringtbintnMaxExtentint nMaxExtent,	//Maximum width for formatted stringcbLPINTlpnFitNULLLPINT lpnFit,	//Address of value specifying max. number of chars.cbLPINTalpDxNULLLPINT alpDx,	//Address of array for partial string widthscbLPSIZElpSizeNULLLPSIZE lpSize	//Address of structure with string dimensions
GetTextExtentPointBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbLPCTSTRlpszLPCTSTR lpsz,	//Address of text stringtbintcbStringint cbString,	//Number of characters in stringtbintcbStringint cbString	//Number of characters in string
GetTextExtentPoint32BOOL00tbHDChdcHDC hdc,	//Handle of device contexttbLPCTSTRlpszLPCTSTR lpsz,	//Address of text stringtbintcbStringint cbString,	//Number of characters in stringtbLPSIZElpSizeLPSIZE lpSize	//Address of structure for string size
GetTextFaceint00tbHDChdcHDC hdc,	//Handle of device contexttbintnCountint nCount,	//Length of buffer receiving typeface namecbLPTSTRlpFaceNameNULLLPTSTR lpFaceName	//Address of buffer receiving typeface name
GetTextMetricsBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbLPTEXTMETRIClptmLPTEXTMETRIC lptm	//Address of text metrics structure
GetThreadContextBOOL00tbHANDLEhThreadHANDLE hThread,	//Handle of thread with contextcbLPCONTEXT&ContextlpContextLPCONTEXT lpContext	//Address of context structure
GetThreadSelectorEntryBOOL00tbHANDLEhThreadHANDLE hThread,	//Handle of thread that contains selectortbDWORDdwSelectorDWORD dwSelector,	//Number of selector value to look uptbLPLDT_ENTRYlpSelectorEntryLPLDT_ENTRY lpSelectorEntry	//Address of selector entry structure
GetThreadTimesBOOL00tbHANDLEhThreadHANDLE hThread,	//Specifies the thread of interestcbLPFILETIME&FileTimelpCreationTimeLPFILETIME lpCreationTime,	//When the thread was borncbLPFILETIME&FileTimelpExitTimeLPFILETIME lpExitTime,	//When the thread diedcbLPFILETIME&FileTimelpKernelTimeLPFILETIME lpKernelTime,	//Time the thread has spent in kernel-modecbLPFILETIME&FileTimelpUserTimeLPFILETIME lpUserTime	//Time the thread has spent in user-mode
GetTimeZoneInformationDWORD00tbLPTIME_ZONE_INFORMATIONlptziLPTIME_ZONE_INFORMATION lptzi	//Address of time-zone settings
GetTokenInformationBOOL00tbHANDLEhTokenHANDLE hToken,	//Handle of access tokentbTOKEN_INFORMATION_CLASSticTOKEN_INFORMATION_CLASS tic,	//Type of information to retrievetbLPVOIDlpvReturnedInformationLPVOID lpvReturnedInformation,	//Address of retrieved informationtbDWORDcbReturnedInformationDWORD cbReturnedInformation,	//Size of information buffertbPDWORDpcbReturnRequiredPDWORD pcbReturnRequired	//Address of required buffer size
GetTopWindowHWND00tbHWNDhwndParentHWND hwndParent	//Handle of parent window
GetUpdateRectBOOL00tbHWNDhwndHWND hwnd,	//Handle of windowtbLPRECTlprcLPRECT lprc,	//Address of structure for update rectanglecbBOOLbEraseTRUEFALSEBOOL bErase	//Erase flag
GetUpdateRgnint10tbHWNDhwndHWND hwnd,	//Handle of windowtbHRGNhrgnHRGN hrgn,	//Handle of regioncbBOOLfEraseTRUEFALSEBOOL fErase	//Erase background flag
GetUserNameBOOL00tbLPTSTRlpBufferLPTSTR lpBuffer,	//Address of name buffercbLPDWORD&cchBufferlpcchBufferLPDWORD lpcchBuffer	//Address of size of name buffer
GetUserObjectSecurityBOOL00tbHANDLEhObjectHANDLE hObject,	//Handle of user objecttbPSECURITY_INFORMATIONpsiPSECURITY_INFORMATION psi,	//Address of requested security informationtbPSECURITY_DESCRIPTORpsdPSECURITY_DESCRIPTOR psd,	//Address of security descriptortbDWORDcbsdDWORD cbsd,	//Size of buffer for security descriptorcbLPDWORD&cbsdRequiredlpcbsdRequiredLPDWORD lpcbsdRequired	//Address of required size of buffer
GetViewportExtExBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbLPSIZElpSizeLPSIZE lpSize	//Address of structure receiving viewport dimensions
GetViewportOrgExBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbLPPOINTlpPointLPPOINT lpPoint	//Address of structure receiving the viewport origin
GetVolumeInformationBOOL00cbLPCTSTRlpRootPathNameNULLLPCTSTR lpRootPathName,	//Address of root dir. of the file systemtbLPTSTRlpVolumeNameBufferLPTSTR lpVolumeNameBuffer,	//Address of name of the volumecbDWORDnVolumeNameSizeDWORD nVolumeNameSize,	//Length of lpVolumeNameBuffercbLPDWORDlpVolumeSerialNumberNULLLPDWORD lpVolumeSerialNumber,	//Address of volume serial numbertbLPDWORDlpMaximumComponentLengthLPDWORD lpMaximumComponentLength,	//Address of system's max. length of filenametbLPDWORDlpFileSystemFlagsLPDWORD lpFileSystemFlags,	//Address of file system flagstbLPTSTRlpFileSystemNameBufferLPTSTR lpFileSystemNameBuffer,	//Address of name of file systemtbDWORDnFileSystemNameSizeDWORD nFileSystemNameSize	//Length of lpFileSystemNameBuffer
GetWindowHWND00tbHWNDhwndHWND hwnd,	//Handle of original windowxbUINTGW_CHILDGW_HWNDFIRSTGW_HWNDLASTGW_HWNDNEXTGW_HWNDPREVGW_OWNERUINT uCmd	//Relationship flag
GetWindowDCHDC00tbHWNDhwndHWND hwnd	//Handle of window
GetWindowExtExBOOL00tbHDChdcHDC hdc,	//Handle of device contextcbLPSIZE&SizelpSizeLPSIZE lpSize	//Address of structure receiving window extents
GetWindowLongLONG00tbHWNDhwndHWND hwnd,	//Handle of windowcbintGWL_EXSTYLEGWL_STYLEGWL_WNDPROCGWL_HINSTANCEGWL_HWNDPARENTGWL_IDGWL_USERDATADWL_DLGPROCDWL_MSGRESULTDWL_USERint nIndex	//Offset of value to retrieve
GetWindowOrgExBOOL00tbHDChdcHDC hdc,	//Handle of device contextcbLPPOINT&PointlpPointLPPOINT lpPoint	//Address of structure receiving the window origin
GetWindowPlacementBOOL00tbHWNDhwndHWND hwnd,	//Handle of windowtbWINDOWPLACEMENT *lpwndplWINDOWPLACEMENT * lpwndpl	//Address of structure for position data
GetWindowRectBOOL00tbHWNDhwndHWND hwnd,	//Handle of windowcbLPRECT&rc;lprcLPRECT lprc	//Address of structure for window coordinates
GetWindowsDirectoryUINT00tbLPTSTRlpszWinPathLPTSTR lpszWinPath,	//Address of buffer for Windows directorycbUINTMAX_PATHcchWinPathUINT cchWinPath	//Size of directory buffer
GetWindowTextint00tbHWNDhwndHWND hwnd,	//Handle of window or control with texttbLPTSTRlpszLPTSTR lpsz,	//Address of buffer for texttbintcchint cch	//Maximum number of characters to copy
GetWindowTextLengthint00tbHWNDhwndHWND hwnd	//Handle of window or control with text
GetWindowWordWORD00tbHWNDhwndHWND hwnd,	//Handle of windowtbintnIndexint nIndex	//Offset of value to retrieve
GetWindowWordWORD00tbHWNDhwndHWND hwnd,	//Handle of windowtbintnIndexint nIndex	//Offset of value to retrieve
GetWinMetaFileBitsUINT00tbHENHMETAFILEhemfHENHMETAFILE hemf,	//Handle of the enhanced metafiletbUINTcbBufferUINT cbBuffer,	//Buffer sizecbLPBYTElpbBufferNULLLPBYTE lpbBuffer,	//Pointer to buffertbINTfnMapModeINT fnMapMode,	//Mapping modetbHDChdcRefHDC hdcRef	//Handle of reference device context
GetWorldTransformBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbLPXFORMlpXformLPXFORM lpXform	//Address of structure receiving transformation
GlobalAddAtomATOM00tbLPCTSTRlpszNameLPCTSTR lpszName	//Address of string to add
GlobalAllocHGLOBAL00xbUINTGMEM_FIXEDGMEM_MOVEABLEGPTRGHNDGMEM_DDESHAREGMEM_DISCARDABLEGMEM_LOWERGMEM_NOCOMPACTGMEM_NODISCARDGMEM_NOT_BANKEDGMEM_NOTIFYGMEM_SHAREGMEM_ZEROINITUINT fuFlags,	//Object allocation attributestbDWORDcbBytesDWORD cbBytes	//Number of bytes to allocate
GlobalDeleteAtomATOM00tbATOMatmATOM atm	//Atom to delete
GlobalDiscardHGLOBAL00tbHGLOBALhglbMemHGLOBAL hglbMem	//Handle of global memory object
GlobalFindAtomATOM00tbLPCTSTRlpszStringLPCTSTR lpszString	//Address of string to find
GlobalFlagsUINT00tbHGLOBALhglbMemHGLOBAL hglbMem	//Handle of global memory object
GlobalFreeHGLOBAL00tbHGLOBALhglbMemHGLOBAL hglbMem	//Handle of global memory object
GlobalGetAtomNameUINT00tbATOMatmATOM atm,	//Atom identifiertbLPTSTRlpszBufferLPTSTR lpszBuffer,	//Address of buffer for atom stringtbintcchBufferint cchBuffer	//Size of buffer
GlobalHandleHGLOBAL00tbLPCVOIDlpvMemLPCVOID lpvMem	//Address of global memory block
GlobalLockLPVOID00tbHGLOBALhglbMemHGLOBAL hglbMem	//Handle of global memory object
GlobalMemoryStatusVOID00tbLPMEMORYSTATUSlpmstMemStatLPMEMORYSTATUS lpmstMemStat	//Address of memory status structure
GlobalReAllocHGLOBAL00tbHGLOBALhglbMemHGLOBAL hglbMem,	//Handle of global memory objecttbDWORDcbBytesDWORD cbBytes,	//New size of blockxbUINTGMEM_MODIFYGMEM_DISCARDABLEGMEM_MOVEABLEGMEM_MOVEABLEGMEM_NOCOMPACTGMEM_ZEROINITUINT fuFlags	//How to reallocate object
GlobalSizeDWORD00tbHGLOBALhglbMemHGLOBAL hglbMem	//Handle of global memory object
GlobalUnlockBOOL00tbHGLOBALhglbMemHGLOBAL hglbMem	//Handle of global memory object
HandlerRoutineBOOL00rbDWORDCTRL_C_EVENTCTRL_BREAK_EVENTCTRL_CLOSE_EVENTCTRL_LOGOFF_EVENTCTRL_SHUTDOWN_EVENTDWORD dwCtrlType
HeapAllocLPVOID00tbHANDLEhHeapHANDLE hHeap,	//Handle of the private heap blockxbDWORDHEAP_GENERATE_EXCEPTIONSHEAP_NO_SERIALIZEHEAP_ZERO_MEMORYDWORD dwFlags,	//Heap allocation control flagstbDWORDdwBytesDWORD dwBytes	//Number of bytes to allocate
HeapCompact00tbDWORDdwCtrlTypeDWORD  dwCtrlType
HeapCreateHANDLE00xbDWORDHEAP_GENERATE_EXCEPTIONSHEAP_NO_SERIALIZEDWORD flOptions,	//Heap allocation flagtbDWORDdwInitialSizeDWORD dwInitialSize,	//Initial heap sizetbDWORDdwMaximumSizeDWORD dwMaximumSize	//Maximum heap size
HeapDestroyBOOL00tbHANDLEhHeapHANDLE hHeap	//Handle of heap
HeapFreeBOOL00tbHANDLEhHeapHANDLE hHeap,	//Handle of the heapxbDWORDHEAP_NO_SERIALIZEDWORD dwFlags,	//Heap freedom flagstbLPVOIDlpMemLPVOID lpMem	//Address of the memory to free
HeapLockBOOL00tbHANDLEhHeapHANDLE hHeap	// handle to the heap to lock for exclusive thread access
HeapReAllocLPVOID00tbHANDLEhHeapHANDLE hHeap,	//Handle of a heap blockxbDWORDHEAP_GENERATE_EXCEPTIONSHEAP_NO_SERIALIZEHEAP_REALLOC_IN_PLACE_ONLYHEAP_ZERO_MEMORYDWORD dwFlags,	//Flags specifying aspects of reallocationtbLPVOIDlpMemLPVOID lpMem,	//Address of the memory to reallocatetbDWORDdwBytesDWORD dwBytes	//Number of bytes to reallocate
HeapSizeDWORD00tbHANDLEhHeapHANDLE hHeap,	//Handle of the heaptbDWORDHEAP_NO_SERIALIZEDWORD dwFlags ,	//Heap size control flagstbLPCVOIDlpMemLPCVOID lpMem	//Address of memory to return size for
HeapUnlockBOOL00tbHANDLEhHeapHANDLE  hHeap	// handle to the heap to unlock
HeapValidate00tbHANDLEhHeapHANDLE hHeap,	// handle to the heap of interesttbDWORDdwFlagsDWORD  dwFlags,	// bit flags that control heap access during function operationtbLPCVOIDlpMemLPCVOID  lpMem	// optional pointer to individual memory block to validate
HeapWalk00tbHANDLEhHeapHANDLE hHeap,	//Handle to the heap to enumeratetbLPPROCESS_HEAP_ENTRYlpEntryLPPROCESS_HEAP_ENTRY  lpEntry	//Points to structure that maintains enumeration state information
HideCaretBOOL00tbHWNDhwndHWND hwnd	//Handle of window with caret
HiliteMenuItemBOOL00tbHWNDhwndHWND hwnd,	//Handle of window with menutbHMENUhmenuHMENU hmenu,	//Handle of menutbUINTuItemHiliteUINT uItemHilite,	//Menu item to highlight or unhighlightxbUINTMF_BYCOMMANDMF_BYPOSITIONMF_HILITEMF_UNHILITEUINT uHilite	//Highlight flags
ImpersonateDdeClientWindowBOOL00tbHWNDhwndClientHWND hwndClient,	//Handle of DDE client windowtbHWNDhwndServerHWND hwndServer	//Handle of DDE server window
ImpersonateNamedPipeClientBOOL00tbHANDLEhNamedPipeHANDLE hNamedPipe	//Handle of a named pipe
ImpersonateSelfBOOL00tbSECURITY_IMPERSONATION_LEVELsilSECURITY_IMPERSONATION_LEVEL sil	//Impersonation level
InflateRectBOOL00cbLPRECT&rclprcLPRECT lprc,	//Address of rectangletbintxAmtint xAmt,	//Amount to increase or decrease widthtbintyAmtint yAmt	//Amount to increase or decrease height
InitAtomTableBOOL00tbDWORDcTableEntriesDWORD cTableEntries	//Size of atom table
InitializeAclBOOL00cbPACL&AclpAclPACL pAcl,	//Address of access-control listtbDWORDcbAclDWORD cbAcl,	//Size of access-control listtbDWORDdwAclRevisionDWORD dwAclRevision	//Revision level of access-control list
InitializeCriticalSectionVOID00tbLPCRITICAL_SECTIONlpcsCriticalSectionLPCRITICAL_SECTION lpcsCriticalSection	//Address of critical section object
InitializeSecurityDescriptorBOOL00tbPSECURITY_DESCRIPTORpsdPSECURITY_DESCRIPTOR psd,	//Address of security descriptortbDWORDdwRevisionDWORD dwRevision	//Revision level
InitializeSidBOOL00cbPSID&sidpsidPSID psid,	//Address of SID to initializetbPSID_IDENTIFIER_AUTHORITYpsiaPSID_IDENTIFIER_AUTHORITY psia,	//Address of identifier authoritytbBYTEcSubauthoritiesBYTE cSubauthorities	//Count of subauthorities
InitializeSystemShutdown00tbPSECURITY_DESCRIPTORpsdPSECURITY_DESCRIPTOR  psd,	// address of security descriptortbDWORDdwRevisionDWORD  dwRevision	// revision level
Int32x32To64LONG00tbLONGMultiplierLONG  Multiplier,	//Specifies first signed 32-bit integer for the multiplicationtbLONGMultiplierLONG  Multiplier	//Specifies first signed 32-bit integer for the multiplication
Int64ShllMod32DWORDLONG00tbDWORDLONGValueDWORDLONG  Value,	//Specifies unsigned 64-bit integer to shift left logicallytbDWORDShiftCountDWORD  ShiftCount	//Specifies a shift count in the range 0..
Int64ShrlMod32DWORDLONG00tbDWORDLONGValueDWORDLONG  Value,	//Specifies unsigned 64-bit integer to shift right logicallytbDWORDShiftCountDWORD  ShiftCount	//Specifies a shift count in the range 0..
InterlockedDecrementLONG00tbLPLONGlplValLPLONG lplVal	//Address of the variable to decrement
InterlockedExchangeLONG00tbLPLONGTargetLPLONG Target,	//Address of 32-bit value to exchangetbLONGValueLONG Value	//New value for %LONG% pointed to by <Target>
InterlockedIncrementLONG00tbLPLONGlplValLPLONG lplVal	//Address of the variable to increment
IntersectClipRectint00tbLPLONGlplValLPLONG lplVal,	//Address of the variable to incrementtbintnLeftRectint nLeftRect,	//X-coordinate of upper-left corner of rectangletbintnTopRectint nTopRect,	//Y-coordinate of upper-left corner of rectangletbintnRightRectint nRightRect,	//X-coordinate of lower-right corner of rectangletbintnRightRectint nRightRect	//X-coordinate of lower-right corner of rectangle
IntersectRectBOOL00cbLPRECT&DstlprcDstLPRECT lprcDst,	//Address of structure for intersectiontbCONST RECT *lprcSrc1CONST RECT *lprcSrc1,	//Address of structure with first rectangletbCONST RECT *lprcSrc2CONST RECT *lprcSrc2	//Address of structure with second rectangle
InvalidateRectBOOL00tbHWNDhwndHWND hwnd,	//Handle of window with changed update regioncbCONST RECT *lprcNULLCONST RECT *lprc,	//Address of structure with rectanglecbBOOLfEraseTRUEFALSEBOOL fErase	//Erase-background flag
InvalidateRgnBOOL00tbHWNDhwndHWND hwnd,	//Handle of window with changed update regioncbHRGNhrgnNULLHRGN hrgn,	//Handle of region to addcbBOOLfEraseTRUEFALSEBOOL fErase,	//Erase-background flag
InvertRectBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbCONST RECT *lprcCONST RECT *lprc	//Address of structure with rectangle
InvertRgnBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbHRGNhrgnHRGN hrgn	//Handle of region to be inverted
IsBadCodePtrBOOL00tbFARPROClpfnProcFARPROC lpfnProc	//Address of function
IsBadHugeReadPtrBOOL00tbCONSTVOID*lpvPtrCONST VOID *lpvPtr,	//Address of memory blocktbUINTcbBytesUINT cbBytes	//Number of bytes to test
IsBadHugeWritePtrBOOL00tbLPVOIDlpvPtrLPVOID lpvPtr,	//Address of memory blockcbUINTcbBytes0UINT cbBytes,	//Number of bytes to test
IsBadReadPtrBOOL00tbCONSTVOID*lpvPtrCONST VOID *lpvPtr,	//Address of memory blocktbUINTcbBytesUINT cbBytes	//Number of bytes to test
IsBadStringPtrBOOL00tbLPCTSTRlpszStrLPCTSTR lpszStr,	//Address of stringcbUINTcchMax0UINT cchMax	//Maximum size of string
IsBadWritePtrBOOL00tbLPVOIDlpvPtrLPVOID lpvPtr,	//Address of memory blockcbUINTcbBytes0UINT cbBytes	//Number of bytes to test
IsCharAlphaBOOL00tbTCHARchTCHAR ch	//Character to test
IsCharAlphaNumericBOOL00tbTCHARchTCHAR ch	//Character to test
IsCharLowerBOOL00tbTCHARchTCHAR ch	//Character to test
IsCharUpperBOOL00tbTCHARchTCHAR ch	//Character to test
IsChildBOOL00tbHWNDhwndParentHWND hwndParent,	//Handle of parent windowtbHWNDhwndHWND hwnd	//Handle of window to test
IsClipboardFormatAvailableBOOL00tbUINTuFormatUINT uFormat	//Clipboard format
IsDBCSLeadByteBOOL00tbBYTEbTestCharBYTE bTestChar	//Character to test
IsDialogMessageBOOL00tbHWNDhwndDlgHWND hwndDlg,	//Handle of dialog boxtbLPMSGlpmsgLPMSG lpmsg	//Address of structure with message
IsDlgButtonCheckedUINT00tbHWNDhwndDlgHWND hwndDlg,	//Handle of dialog boxtbintidButtonint idButton	//Button identifier
IsIconicBOOL00tbHWNDhwndHWND hwnd	//Handle of window
IsMenuBOOL00tbHMENUhMenuHMENU hMenu	//Handle to test
IsRectEmptyBOOL00tbCONSTRECT*lprcCONST RECT *lprc	//Address of structure with rectangle
IsTextUnicodeDWORD00tbCONSTLPVOIDlpvBufferCONST LPVOID  lpvBuffer,	//Pointer to an input buffer to be examinedtbintcbint  cb,	//The size in bytes of the input buffertbLPINTlpResultLPINT  lpResult	//Pointer to flags that condition text examination and receive results
IsValidAclBOOL00tbPACLpAclPACL pAcl	//Address of access-control list
IsValidCodePageBOOL00tbUINTCodePageUINT CodePage	//Specifies code page to check
IsValidLocale00tbLCIDLCIDLCID lCid,	//Locale indentifer to validatetbDWORDdwFlagsDWORD dwFlags	//Specifies validity test
IsValidSecurityDescriptorBOOL00tbPSECURITY_DESCRIPTORpsdPSECURITY_DESCRIPTOR psd	//Address of security descriptor
IsValidSidBOOL00tbPSIDpsidPSID psid	//Address of SID to query
IsWindowBOOL00tbHWNDhwndHWND hwnd	//Handle of window
IsWindowEnabledBOOL00tbHWNDhwndHWND hwnd	//Handle of window to test
IsWindowUnicodeBOOL00tbHWNDhwndHWND hwnd	//Handle of window
IsWindowVisibleBOOL00tbHWNDhwndHWND hwnd	//Handle of window
IsZoomedBOOL00tbHWNDhwndHWND hwnd	//Handle of window
JournalPlaybackProcLRESULTCALLBACK00rbintHC_GETNEXTHC_SKIPHC_SYSMODALOFFHC_SYSMODALONint nCode,	//Hook codecbWPARAMNULLwParamWPARAM wParam,	//UndefinedtbLPARAMlParamLPARAM lParam	//Address of message being processed
JournalRecordProcLRESULTCALLBACK00rbintHC_ACTIONHC_SYSMODALOFFHC_SYSMODALONint nCode,	//Hook codecbWPARAMNULLwParamWPARAM wParam,	//UndefinedtbLPARAMlParamLPARAM lParam	//Address of message being processed
joyGetDevCapsMMRESULT00tbUINTIDDeviceUINT IDDevice,	//Identifies device to querytbLPJOYCAPSlpjcLPJOYCAPS lpjc,	//Address of structure for device capabilitiestbUINTcbjcUINT cbjc	//Size of structure in bytes
joyGetThresholdMMRESULT00tbUINTIDDeviceUINT IDDevice,	//Identifies device to querytbPUINTpuThresholdPUINT puThreshold	//Address of variable for threshold
joyReleaseCaptureMMRESULT00tbUINTIDDeviceUINT IDDevice	//Identifies device to release
joySetCaptureMMRESULT00tbHWNDhwndHWND hwnd,	//Handle of window that receives messagesrbUINT JOYSTICKID1 JOYSTICKID2UINT IDDevice,	//Identifies device to capturetbUINTcPollingMSUINT cPollingMS,	//Polling rate in millisecondscbBOOLfChangedTRUEFALSEBOOL fChanged	//Send messages only above threshold
keybd_eventVOID00tbBYTEbVirtualKeyBYTE bVirtualKey,	//Virtual key codetbBYTEbScanCodeBYTE bScanCode,	//Hardware scan codexbDWORDKEYEVENTF_EXTENDEDKEYKEYEVENTF_KEYUPDWORD dwFlags,	//Flags specifying various function optionstbDWORDdwExtraInfoDWORD dwExtraInfo	//Additional data associated with keystroke
keybd_eventVOID00tbBYTEbVirtualKeyBYTE bVirtualKey,	//Virtual key codetbBYTEbScanCodeBYTE bScanCode,	//Hardware scan codexbDWORDKEYEVENTF_EXTENDEDKEYKEYEVENTF_KEYUPDWORD dwFlags,	//Flags specifying various function optionstbDWORDdwExtraInfoDWORD dwExtraInfo	//Additional data associated with keystroke
KeyboardProcLRESULTCALLBACK00rbintHC_ACTIONHC_NOREMOVEint nCode,	//Hook codetbWPARAMwParamWPARAM wParam,	//Virtual-key codetbLPARAMlParamLPARAM lParam	//Keystroke-message information
KillTimerBOOL00cbHWNDhwndNULLHWND hwnd,	//Handle of window that installed timertbUINTidEventUINT idEvent	//Timer identifier
LCMapString00tbLCIDlcidLCID lcid,	// locale identifiertbDWORDdwMapFlagsDWORD  dwMapFlags,	// mapping transformation typetbLPCTSTRlpSrcStrLPCTSTR  lpSrcStr,	// address of source stringtbintcchSrcint  cchSrc,	// number of characters in source stringtbLPTSTRlpDestStrLPTSTR  lpDestStr,	// address of destination buffertbintcchDestint  cchDest	// size of destination buffer
LCMapStringWint00tbLCIDlcidLCID lcid,	//Locale identifierxbDWORDLCMAP_BYTEREVLCMAP_LOWERCASELCMAP_SORTKEYLCMAP_UPPERCASENORM_IGNORECASENORM_IGNORENONSPACENORM_IGNORESYMBOLSSORT_STRINGSORTDWORD fdwMap,	//Mapping typetbLPCWSTRlpSrcStrLPCWSTR lpSrcStr,	//Address of source stringtbintcchSrcint cchSrc,	//Number of characters in source stringtbLPWSTRlpDestStrLPWSTR lpDestStr,	//Address of destination buffertbintcchDestint cchDest	//Size of destination buffer
LeaveCriticalSectionVOID00tbLPCRITICAL_SECTIONlpcsCriticalSectionLPCRITICAL_SECTION lpcsCriticalSection	//Address of critical section object
LineDDABOOL00tbintnXStartintnXStart,	//X-coordinate of line's starting pointtbintnYStartint nYStart,	//Y-coordinate of line's starting pointtbintnXEndint nXEnd,	//X-coordinate of line's ending pointtbintnYEndint nYEnd,	//Y-coordinate of line's ending pointtbLINEDDAPROClpLineFuncLINEDDAPROC lpLineFunc,	//Address of application-defined callback functiontbLPARAMlpDataLPARAM lpData	//Address of application-defined data
LineDDAProc00tbintnXStartintnXStart,	//X-coordinate of line's starting pointtbintnYStartint  nYStart,	//Y-coordinate of line's starting pointtbintnXEndint  nXEnd,	//X-coordinate of line's ending pointtbintnYEndint  nYEnd,	//Y-coordinate of line's ending pointtbLINEDDAPROClpLineFuncLINEDDAPROC  lpLineFunc,	//Address of application-defined callback functiontbLPARAMlpDataLPARAM  lpData	//Address of application-defined data
LineToBOOL00tbHDChdcHDC hdc,	//Device context handletbintnXEndint nXEnd,	//X-coordinate of line's ending pointtbintnYEndint nYEnd	//Y-coordinate of line's ending point
LoadAcceleratorsHACCEL00tbHINSTANCEhinstHINSTANCE hinst,	//Handle of application instancetbLPCTSTRlpTableNameLPCTSTR lpTableName	//Address of table-name string
LoadBitmapHBITMAP00tbHINSTANCEhinstHINSTANCE hinst,	//Handle of application instancetbLPCTSTRlpszBitmapLPCTSTR lpszBitmap	//Address of bitmap resource name
LoadCursorHCURSOR00cbHINSTANCEhinstNULLHINSTANCE hinst,	//Handle of application instancecbLPCTSTRlpszCursorIDC_APPSTARTINGIDC_ARROWIDC_CROSSIDC_IBEAMIDC_ICONIDC_NOIDC_SIZEIDC_SIZEALLIDC_SIZENESWIDC_SIZENSIDC_SIZENWSEIDC_SIZEWEIDC_UPARROWIDC_WAITLPCTSTR lpszCursor	//Name string or cursor resource identifier
LoadCursorFromFileHCURSOR00tbLPWSTRlpszFilenameLPWSTR  lpszFilename	// pointer to name of cursor file, or system cursor identifier
LoadIconHICON00cbHINSTANCEhinstNULLHINSTANCE hinst,	//Handle of application instancecbLPCTSTRlpszIconIDI_APPLICATIONIDI_ASTERISKIDI_EXCLAMATIONIDI_HANDIDI_QUESTIONLPCTSTR lpszIcon	//Icon-name string or icon resource identifier
LoadKeyboardLayoutHKL00tbLPCTSTRlpszKLNameLPCTSTR lpszKLName,	//Address of buffer for layout namerbUINTKLF_ACTIVATEKLF_REORDERKLF_SUBSTITUTE_OKKLF_UNLOADPREVIOUSUINT fuFlags	//Keyboard layout flags
LoadLibraryHINSTANCE00tbLPCTSTRlpszLibFileLPCTSTR lpszLibFile	//Address of file name of executable module
LoadLibraryExHINSTANCE00tbLPCTSTRlpszLibFileLPCTSTR lpszLibFile,	//Address of library-file namecbHANDLENULLhFileHANDLE hFile,	//Reserved, must be NULLxbDWORDDONT_RESOLVE_DLL_REFERENCESDWORD dwFlags	//Entrypoint execute flag
LoadMenuHMENU00tbHINSTANCEhinstHINSTANCE hinst,	//Handle of application instancetbLPCTSTRlpMenuNameLPCTSTR lpMenuName	//Menu name string or menu-resource identifier
LoadMenuIndirectHMENU00tbLPCTSTRlpMenuNameLPCTSTR lpMenuName	//Menu name string or menu-resource identifie
LoadModuleDWORD00tbLPCSTRlpszModuleLPCSTR lpszModule,	//Address of filename to loadtbLPVOIDlpvParamBlockLPVOID lpvParamBlock	//Address of parameter block for new module
LoadResourceHGLOBAL00cbHINSTANCEhModuleNULLHINSTANCE hModule,	//Resource-module handletbHRSRChResInfoHRSRC hResInfo	//Resource handle
LoadStringint00tbHINSTANCEhinstHINSTANCE hinst,	//Handle of module containing string resourcetbUINTwIDUINT wID,	//Resource identifiertbLPTSTRlpBufferLPTSTR lpBuffer,	//Address of buffer for resourcetbintcchBufferint cchBuffer	//Size of buffer
LocalAllocHLOCAL00xbUINTLMEM_FIXEDLMEM_MOVEABLELPTRLHNDNONZEROLHNDNONZEROLPTRLMEM_DISCARDABLELMEM_NOCOMPACTLMEM_NODISCARDLMEM_ZEROINITUINT fuFlags,	//Allocation attributestbUINTcbBytesUINT cbBytes	//Number of bytes to allocate
LocalDiscardHLOCAL00tbHLOCALhlocMemHLOCAL hlocMem	//Handle of local memory object
LocalFileTimeToFileTimeBOOL00tbCONSTFILETIME * lpftLocalCONST FILETIME * lpftLocal,	//Address of local file time to converttbLPFILETIMElpftLPFILETIME lpft	//Address of converted file time
LocalFlagsUINT00tbHLOCALhlocMemHLOCAL hlocMem	//Handle of local memory object
LocalFree00tbHLOCALhlocMemHLOCAL hlocMem	//Handle of local memory object
LocalHandleHLOCAL00tbLPCVOIDlpvMemLPCVOID lpvMem	//Address of local memory object
LocalLockLPVOID00tbHLOCALhlocMemHLOCAL hlocMem	//Handle of local memory object
LocalReAllocHLOCAL00tbHLOCALhlocMemHLOCAL hlocMem,	//Handle of local memory objecttbUINTcbBytesUINT cbBytes,	//New size of blockxbUINTLMEM_DISCARDABLELMEM_MOVEABLELMEM_MOVEABLELMEM_NOCOMPACTLMEM_ZEROINIT	UINT cbBytes	//New size of block
LocalSizeUINT00tbHLOCALhlocMemHLOCAL hlocMem	//Handle of local memory object
LocalUnlockBOOL00tbHLOCALhlocMemHLOCAL hlocMem	//Handle of local memory object
LockFileBOOL00tbHANDLEhFileHANDLE hFile,	//Handle of file to locktbDWORDdwFileOffsetLowDWORD dwFileOffsetLow,	//Low-order word of lock region offsettbDWORDdwFileOffsetHighDWORD dwFileOffsetHigh,	//High-order word of lock region offsettbDWORDcbLockLowDWORD cbLockLow,	//Low-order word of length to locktbDWORDcbLockHighDWORD cbLockHigh	//High-order word of length to lock
LockFileExBOOL00tbHANDLEhFileHANDLE hFile,	//Handle of file to lockxbDWORDLOCKFILE_FAIL_IMMEDIATELYLOCKFILE_EXCLUSIVE_LOCKDWORD dwFlags,	//Functional behavior modification flagscbDWORD0dwReservedDWORD dwReserved,	//Reserved, must be set to zerotbDWORDnNumberOfBytesToLockLowDWORD nNumberOfBytesToLockLow,	//Low order 32-bits of length to locktbDWORDnNumberOfBytesToLockHighDWORD nNumberOfBytesToLockHigh,	//High order 32-bits of length to locktbLPOVERLAPPEDlpOverlappedLPOVERLAPPED lpOverlapped	//Pointer to struct with lock region start offset
LockResourceLPVOID00tbHGLOBALhglbHGLOBAL hglb	//Handle to resource to lock
LockServiceDatabaseSC_LOCK00tbSC_HANDLEschSCManagerSC_HANDLE schSCManager	//Handle of service control manager database
LockWindowUpdateBOOL00tbHWNDhwndLockHWND hwndLock	//Handle of window to lock
LookupAccountNameBOOL00tbLPCTSTRlpszSystemLPCTSTR lpszSystem,	//Address of string for system nametbLPCTSTRlpszAccountLPCTSTR lpszAccount,	//Address of string for account nametbPSIDpsidPSID psid,	//Address of security identifiertbLPDWORDlpcbSidLPDWORD lpcbSid,	//Address of size of security identifiertbLPTSTRlpszReferencedDomainLPTSTR lpszReferencedDomain,	//Address of string for referenced domaintbLPDWORDlpcchReferencedDomainLPDWORD lpcchReferencedDomain,	//Address of size of domain stringtbPSID_NAME_USEpsnuPSID_NAME_USE psnu	//Address of SID-type indicator
LookupAccountSidBOOL00cbLPCTSTRlpszSystemNULLLPCTSTR lpszSystem,	//Address of string for system nametbPSIDpsidPSID psid,	//Address of security identifiertbLPTSTRlpszAccountLPTSTR lpszAccount,	//Address of string for account nametbLPDWORDlpcchAccountLPDWORD lpcchAccount,	//Address of size account stringtbLPTSTRlpszReferencedDomainLPTSTR lpszReferencedDomain,	//Address of string for referenced domaintbLPDWORDlpcchReferencedDomainLPDWORD lpcchReferencedDomain,	//Address of size domain stringtbPSID_NAME_USEpsnuPSID_NAME_USE psnu	//Address of structure for SID type
LookupIconIdFromDirectoryint00tbPBYTEpresbitsPBYTE presbits,	//Address of resource datacbBOOLfIconTRUEFALSEBOOL fIcon	//Look for icon or cursor
LookupPrivilegeDisplayNameBOOL00cbLPCTSTRlpszSystemNameNULLLPCTSTR lpszSystemName,	//Address of string specifying the systemcbLPCTSTRlpszProgramNameSE_REMOTE_SHUTDOWN_NAMELPCTSTR lpszProgramName,	//Address of string specifying the privilegetbLPTSTRlpszDisplayNameLPTSTR lpszDisplayName,	//Address of string receiving the displayable nametbLPDWORDlpcchDisplayNameLPDWORD lpcchDisplayName,	//Address of size of string for displayable nametbLPDWORDlpdwLanguageIdLPDWORD lpdwLanguageId	//Address of language identifier
LookupPrivilegeNameBOOL00tbLPCTSTRlpszSystemNameLPCTSTR lpszSystemName,	//Address of string specifying the systemtbPLUIDpluidPLUID pluid,	//Address of locally unique identifiercbLPTSTRlpszProgramNameSE_SECURITY_NAMELPTSTR lpszProgramName,	//Address of string specifying the privilegetbLPDWORDlpcchNameLPDWORD lpcchName	//Address of size of string for displayable name
LPtoDPBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbLPPOINTlpPointsLPPOINT lpPoints,	//Array of pointstbintnCountint nCount	//Count of points
lstrcatLPTSTR00tbLPTSTRlpszString1LPTSTR lpszString1,	//Address of buffer for concatenated stringstbLPCTSTRlpszString2LPCTSTR lpszString2	//Address of string to add to string
lstrcmpint00tbLPCTSTRlpszString1LPCTSTR lpszString1,	//Address of first stringtbLPCTSTRlpszString2LPCTSTR lpszString2	//Address of second string
lstrcmpiint00tbLPCTSTRlpszString1LPCTSTR lpszString1,	//Address of first stringtbLPCTSTRlpszString2LPCTSTR lpszString2	//Address of second string
lstrcpyLPTSTR00tbLPTSTRlpszString1LPTSTR lpszString1,	//Address of buffertbLPCTSTRlpszString2LPCTSTR lpszString2	//Address of string to copy
lstrlenint00tbLPCTSTRlpszStringLPCTSTR lpszString	//Address of string to count
lstrlenint00tbLPCTSTRlpszStringLPCTSTR lpszString	//Address of string to count
LZCloseVOID00tbINThFileINT hFile	//LZ file handle identifying file to be closed
LZCopyLONG00tbINThfSourceINT hfSource,	//LZ file handle identifying source filetbINThfDestINT hfDest	//LZ file handle identifying destination file
LZInitINT00tbINThfSourceINT hfSource	//Handle of source file
LZOpenFileINT00tbLPTSTRlpFileNameLPTSTR lpFileName,	//Address of name of file to be openedtbLPOFSTRUCTlpReOpenBufLPOFSTRUCT lpReOpenBuf,	//Address of open file structurexbWORDOF_CANCELOF_CREATEOF_DELETEOF_EXISTOF_PARSEOF_PROMPTOF_READWRITEOF_REOPENOF_SHARE_DENY_NONEOF_SHARE_DENY_READOF_SHARE_DENY_WRITEOF_SHARE_EXCLUSIVEOF_WRITEWORD wStyle	//Action to take
LZReadINT00tbINThFileINT hFile,	//LZ file handle of filetbLPSTRlpBufferLPSTR lpBuffer,	//Address of buffer for bytestbINTcbReadINT cbRead	//Count of bytes
LZSeekLONG00tbINThFileINT hFile,	//Handle identifying filetbLONGlOffsetLONG lOffset,	//Number of bytes to movetbINTiOriginINT iOrigin	//Original position
MakeAbsoluteSDBOOL00tbPSECURITY_DESCRIPTORpsdSelfPSECURITY_DESCRIPTOR psdSelf,	//Address self-relative SDtbPSECURITY_DESCRIPTORpsdAbsPSECURITY_DESCRIPTOR psdAbs,	//Address of absolute SDtbLPDWORDlpcbsdAbsoluteLPDWORD lpcbsdAbsolute,	//Address of size of absolute SDtbPACLpaclDiscretionaryPACL paclDiscretionary,	//Address of discretionary ACLtbLPDWORDlpcbDaclLPDWORD lpcbDacl,	//Address of size of discretionary ACLtbPACLpaclSystemPACL paclSystem,	//Address of system ACLtbLPDWORDlpcbSaclLPDWORD lpcbSacl,	//Address of size of system ACLtbPSIDpsidOwnerPSID psidOwner,	//Address of owner SIDtbLPDWORDlpcbsidOwnerLPDWORD lpcbsidOwner,	//Address of size of owner SIDtbPSIDpsidPrimaryGroupPSID psidPrimaryGroup,	//Address of primary-group SIDtbLPDWORDlpcbsidPrimaryGroupLPDWORD lpcbsidPrimaryGroup	//Address of size of group SID
MakeSelfRelativeSDBOOL00tbPSECURITY_DESCRIPTORpsdAbsolutePSECURITY_DESCRIPTOR psdAbsolute,	//Address of absolute SDtbPSECURITY_DESCRIPTORpsdSelfRelativePSECURITY_DESCRIPTOR psdSelfRelative,	//Address self-relative SDtbLPDWORDlpcbsdSelfRelativeLPDWORD lpcbsdSelfRelative	//Address of SD size
MapDialogRectBOOL00tbHWNDhwndDlgHWND hwndDlg,	//Handle of dialog boxcbLPRECT&rclprcLPRECT lprc	//Address of structure with rectangle
MapGenericMaskVOID00tbPDWORDpdwAccessMaskPDWORD pdwAccessMask,	//Address of access masktbPGENERIC_MAPPINGpgmPGENERIC_MAPPING pgm	//Address of GENERIC_MAPPING structure
MapViewOfFileLPVOID00tbHANDLEhMapObjectHANDLE hMapObject,	//File-mapping object to map into address spacexbDWORDFILE_MAP_WRITEFILE_MAP_READFILE_MAP_ALL_ACCESSFILE_MAP_COPYDWORD fdwAccess,	//Access modetbDWORDdwOffsetHighDWORD dwOffsetHigh,	//High-order 32 bits of file offsettbDWORDdwOffsetLowDWORD dwOffsetLow,	//Low-order 32 bits of file offsettbDWORDcbMapDWORD cbMap	//Number of bytes to map
MapViewOfFileExLPVOID00tbHANDLEhMapObjectHANDLE hMapObject,	//File-mapping object to map into address spacerbDWORDFILE_MAP_WRITEFILE_MAP_READFILE_MAP_ALL_ACCESSFILE_MAP_COPYDWORD fdwAccess,	//Access modetbDWORDdwOffsetHighDWORD dwOffsetHigh,	//High-order 32 bits of file offsettbDWORDdwOffsetLowDWORD dwOffsetLow,	//Low-order 32 bits of file offsettbDWORDcbMapDWORD cbMap,	//Number of bytes to maptbLPVOIDlpvBaseLPVOID lpvBase	//Suggested starting address for mapped view
MapVirtualKeyUINT00tbUINTuCodeUINT uCode,	//Virtual-key code or scan codetbUINTfuMapTypeUINT fuMapType	//Translation to perform
MapWindowPointsint00tbHWNDhwndFromHWND hwndFrom,	//Handle of window to be mapped fromtbHWNDhwndToHWND hwndTo,	//Handle of window to be mapped totbLPPOINTlpptLPPOINT lppt,	//Address of structure array with points to maptbUINTcPointsUINT cPoints	//Number of structures in array
MaskBltBOOL00tbHDChdcDestHDC hdcDest,	//Handle of destination device contexttbintnXDestint nXDest,	//X-coord. of upper left corner of destination rectangletbintnYDestint nYDest,	//Y-coord. of upper left corner of destination rectangletbintnWidthint nWidth,	//Width of source and destination rectanglestbintnHeightint nHeight,	//Height of source and destination rectanglestbHDChdcSrcHDC hdcSrc,	//Handle of source device contexttbintnXSrcint nXSrc,	//X-coord. of upper left corner of source rectangletbintnYSrcint nYSrc,	//Y-coord. of upper left corner of source rectangletbHBITMAPhbmMaskHBITMAP hbmMask,	//Handle of monochrome bit masktbintxMaskint xMask,	//Horizontal pixel offset into the mask bitmaptbintyMaskint yMask,	//Vertical pixel offset into the mask bitmaptbDWORDdwRopDWORD dwRop	//Raster operation code
mciGetCreatorTaskHANDLE00tbMCIDEVICEIDIDDeviceMCIDEVICEID IDDevice	//Device to get creator task for
mciGetDeviceIdMCIDEVICEID00tbLPCTSTRlpszDeviceLPCTSTR lpszDevice	//Address of device name
mciGetErrorStringBOOL00tbDWORDfdwErrorDWORD fdwError,	//Error codetbLPTSTRlpszErrorTextLPTSTR lpszErrorText,	//Address of buffer for error stringtbUINTcchErrorTextUINT cchErrorText	//Size of buffer, in characters
mciGetYieldProcYIELDPROC00tbMCIDEVICEIDIDDeviceMCIDEVICEID IDDevice,	//Device being monitoredtbLPDWORDlpdwYieldDataLPDWORD lpdwYieldData	//Address of yield data to be passed
mciSendCommandMCIERROR00tbMCIDEVICEIDIDDeviceMCIDEVICEID IDDevice,	//Device to send message totbUINTuMsgUINT uMsg,	//Message to sendtbDWORDfdwCommandDWORD fdwCommand,	//Message-specific parametertbDWORDdwParamDWORD dwParam	//Message-specific parameter
mciSendStringMCIERROR00tbLPCTSTRlpszCommandLPCTSTR lpszCommand,	//Address of MCI command stringcbLPTSTRlpszReturnStringNULLLPTSTR lpszReturnString,	//Address of return buffertbUINTcchReturnUINT cchReturn,	//Size of return buffer, in characterstbHANDLEhwndCallbackHANDLE hwndCallback	//Callback-window handle
mciSetYieldProcBOOL00tbMCIDEVICEIDIDDeviceMCIDEVICEID IDDevice,	//Device to set yield procedure forcbYIELDPROCypNULLYIELDPROC yp,	//Address of yield proceduretbDWORDdwYieldDataDWORD dwYieldData	//Yield-procedure data
MessageBeepBOOL00rbUINT-1MB_ICONASTERISKMB_ICONEXCLAMATIONMB_ICONHANDMB_ICONQUESTIONMB_OKUINT fuType	//Sound type
MessageBoxint00tbHWNDhwndOwnerHWND hwndOwner	//handle of owner windowtbLPCTSTRlpszTextLPCTSTR lpszText	//Address of text in message boxtbLPCTSTRlpszTitleLPCTSTR lpszTitle	//Address of title of message boxxbUINTMB_OKMB_OKCANCELMB_ABORTRETRYIGNOREMB_YESNOCANCELMB_YESNOMB_RETRYCANCELMB_ICONHANDMB_ICONQUESTIONMB_ICONEXCLAMATIONMB_ICONASTERISKMB_ICONINFORMATIONMB_ICONSTOPMB_DEFBUTTON1MB_DEFBUTTON2MB_DEFBUTTON3MB_APPLMODALMB_SYSTEMMODALMB_TASKMODALMB_NOFOCUSMB_SETFOREGROUNDMB_DEFAULT_DESKTOP_ONLYMB_TYPEMASKMB_ICONMASKMB_DEFMASKMB_MODEMASKMB_MISCMASKUINT fuStyle	//style of message box
MessageBoxExint00tbHWNDhwndOwnerHWND hwndOwner	//handle of owner windowtbLPCTSTRlpszTextLPCTSTR lpszText	//Address of text in message boxtbLPCTSTRlpszTitleLPCTSTR lpszTitle	//Address of title of message boxxbUINTMB_OKMB_OKCANCELMB_ABORTRETRYIGNOREMB_YESNOCANCELMB_YESNOMB_RETRYCANCELMB_ICONHANDMB_ICONQUESTIONMB_ICONEXCLAMATIONMB_ICONASTERISKMB_ICONINFORMATIONMB_ICONSTOPMB_DEFBUTTON1MB_DEFBUTTON2MB_DEFBUTTON3MB_APPLMODALMB_SYSTEMMODALMB_TASKMODALMB_NOFOCUSMB_SETFOREGROUNDMB_DEFAULT_DESKTOP_ONLYMB_TYPEMASKMB_ICONMASKMB_DEFMASKMB_MODEMASKMB_MISCMASKUINT fuStyle	//style of message boxtbWORDwLanguageIDWORD wLanguageID	//Language identifier
MessageProcLRESULTCALLBACK00cbintMSGF_DDEMGRMSGF_DIALOGBOXMSGF_MENUMSGF_NEXTWINDOWMSGF_SCROLLBAR-1int nCode,	//Hook codecbWPARAMNULLwParamWPARAM wParam,	//UndefinedtbLPARAMlParamLPARAM lParam	//Address of structure with message data
midiInAddBufferMMRESULT00tbHMIDIINhMidiInHMIDIIN hMidiIn,	//MIDI input devicetbLPMIDIHDRlpmidiihLPMIDIHDR lpmidiih,	//Address of MIDI header structuretbUINTcbMidiIhUINT cbMidiIh	//Size of MIDI header structure, in bytes
midiInCloseMMRESULT00tbHMIDIINhMidiInHMIDIIN hMidiIn	//Handle of input device to close
midiInGetDevCapsMMRESULT00tbUINTIDDeviceUINT IDDevice,	//Identifier of device to querytbLPMIDIINCAPSlpmicLPMIDIINCAPS lpmic,	//Address of structure for capabilitiestbUINTcbmicUINT cbmic	//Size of structure, in bytes
midiInGetErrorTextMMRESULT00tbMMRESULTmmrErrorMMRESULT mmrError,	//Error code to get description fortbLPTSTRlpszDescLPTSTR lpszDesc,	//Address of buffer for descriptiontbUINTcchDescUINT cchDesc	//Length of buffer, in characters
midiInGetIDMMRESULT00tbHMIDIINhMidiInHMIDIIN hMidiIn,	//Identifier of MIDI input device to querytbPUINTlpIDDevicePUINT lpIDDevice	//Address of buffer for device identifier
midiInOpenMMRESULT00tbLPHMIDIINlphMidiInLPHMIDIIN lphMidiIn,	//Address of variable for device handletbUINTIDDeviceUINT IDDevice,	//Device identifiercbDWORDdwCallbackNULLDWORD dwCallback,	//Address of callback functiontbDWORDdwCallbackInstanceDWORD dwCallbackInstance,	//Callback instance datarbDWORDCALLBACK_WINDOWCALLBACK_FUNCTIONCALLBACK_NULLDWORD fdwCallback	//Callback type
midiInPrepareHeaderMMRESULT00tbHMIDIINhMidiInHMIDIIN hMidiIn,	//Handle of MIDI input devicetbLPMIDIHDRlpmidihLPMIDIHDR lpmidih,	//Address of structure for buffer to preparetbUINTcbmidihUINT cbmidih	//Size of structure in bytes
midiInResetMMRESULT00tbHMIDIINhMidiInHMIDIIN hMidiIn	//Handle of device to reset
midiInStartMMRESULT00tbHMIDIINhMidiInHMIDIIN hMidiIn	//Handle of device to start
midilnUnprepareHeaderMMRESULT00tbHMIDIINhMidiInHMIDIIN hMidiIn	//Handle of the MIDI input devicetbLPMIDIHDRlpmidihLPMIDIHDR  pmidih,	//Address of structure for data buffertbUINTcbmidih\t// size of structureUINT  cbmidih	//Size of structure, in bytes
midilnUprepareHeader00
midiOutCacheDrumPatchesMMRESULT00tbHMIDIOUThMidiOutHMIDIOUT hMidiOut,	//Handle of MIDI output devicetbUINTuPatchUINT uPatch,	//Patch numbertbLPWORDlpwkyaLPWORD lpwkya,	//Address of key arrayrbUINTMIDI_CACHE_ALLMIDI_CACHE_BESTFITMIDI_CACHE_QUERYMIDI_UNCACHEUINT fuCache	//Cache options
midiOutCachePatchesMMRESULT00tbHMIDIOUThMidiOutHMIDIOUT hMidiOut,	//Handle of MIDI output devicetbUINTuBankUINT uBank,	//Patch bank numbertbLPWORDlpwpaLPWORD lpwpa,	//Address of patch arrayrbUINTMIDI_CACHE_ALLMIDI_CACHE_BESTFITMIDI_CACHE_QUERYMIDI_UNCACHEUINT fuCache,	//Cache options
midiOutCloseMMRESULT00tbHMIDIOUThMidiOutHMIDIOUT hMidiOut	//Handle of device to close
midiOutGetDevCapsMMRESULT00tbUINTIDDeviceUINT IDDevice,	//Device identifier to querytbLPMIDIOUTCAPSlpmidiocLPMIDIOUTCAPS lpmidioc,	//Address of structure for device capstbUINTcbmidiocUINT cbbmidioc	//Size of structure, in bytes
midiOutGetErrorTextMMRESULT00tbMMRESULTmmrErrorMMRESULT mmrError,	//Error codetbLPTSTRlpszDescLPTSTR lpszDesc,	//Address of buffer for descriptiontbUINTcchDescUINT cchDesc	//Size of buffer, in characters
midiOutGetIDMMRESULT00tbHMIDIOUThMidiOutHMIDIOUT hMidiOut,	//Handle of device to return ID forcbPUINT&IDDevicelpIDDevicePUINT lpIDDevice	//Address of buffer for device ID
midiOutLongMsgMMRESULT00tbHMIDIOUThMidiOutHMIDIOUT hMidiOut,	//Handle of device to send message totbLPMIDIHDRlpmidihLPMIDIHDR lpmidih,	//Structure with data buffertbUINTcbmidihUINT cbmidih	//Size of structure, in bytes
midiOutMessageMMRESULT00tbHMIDIOUThMidiOutHMIDIOUT hMidiOut,	//Handle of device to send message totbUINTuMsgUINT uMsg,	//MessagetbDWORDdwParam1DWORD dwParam1,	//Application-defined parametertbDWORDdwParam2DWORD dwParam2	//Application-defined parameter
midiOutOpenMMRESULT00cbLPHMIDIOUT&hMidiOutlphMidiOutLPHMIDIOUT lphMidiOut,	//Variable to receive output device handletbUINTIDDeviceUINT IDDevice,	//Device IDcbDWORDdwCallbackNULLDWORD dwCallback,	//Address of callback functiontbDWORDdwCallbackInstanceDWORD dwCallbackInstance,	//Callback instance datarbDWORDCALLBACK_WINDOWCALLBACK_FUNCTIONCALLBACK_NULLDWORD fdwCallback	//Callback type
midiOutPrepareHeaderMMRESULT00tbHMIDIOUThMidiOutHMIDIOUT hMidiOut,	//Handle of MIDI output devicetbLPMIDIHDRlpmidihLPMIDIHDR lpmidih,	//Address of structure for buffer to preparetbUINTcbmidihUINT cbmidih	//Size of structure in bytes
midiOutResetMMRESULT00tbHMIDIOUThMidiOutHMIDIOUT hMidiOut	//Handle of output device to stop
midiOutSetVolumeMMRESULT00tbUINTIDDeviceUINT IDDevice,	//Identifier of MIDI device to set volume fortbDWORDdwVolumeDWORD dwVolume	//New volume setting
midiOutUnprepareHeaderMMRESULT00tbHMIDIOUThMidiOutHMIDIOUT hMidiOut,	//Handle of the MIDI output devicecbLPMIDIHDR&midihlpmidihLPMIDIHDR lpmidih,	//Address of structure for data buffertbUINTcbmidihUINT cbmidih	//Size of structure, in bytes
midiOutUnprepareHeaderMMRESULT00tbHMIDIOUThMidiOutHMIDIOUT hMidiOut,	//Handle of the MIDI output devicecbLPMIDIHDR&midihlpmidihLPMIDIHDR lpmidih,	//Address of structure for data buffertbUINTcbmidihUINT cbmidih	//Size of structure, in bytes
MidiProcvoid00tbHMIDIINhMidiInHMIDIIN hMidiIn,	//Handle of MIDI devicetbUINTuMsgUINT uMsg,	//MIDI messagetbUINTuMsgUINT uMsg,	//MIDI messagetbDWORDdwParam1DWORD dwParam1,	//Application-defined parametertbDWORDdwParam2DWORD dwParam2	//Application-defined parameter
mmioAdvanceMMRESULT00tbHMMIOhmmioHMMIO hmmio,	//File handletbLPMMIOINFOlpmmioinfoLPMMIOINFO lpmmioinfo,	//Address of structure for file operationtbUINTfuOperationUINT fuOperation	//Specifies operation
mmioAscendMMRESULT00tbHMMIOhmmioHMMIO hmmio,	//Handle of RIFF filetbLPMMCKINFOlpmmckiLPMMCKINFO lpmmcki,	//Address of chunk information structurecbUINT0uReservedUINT uReserved,	//Reserved, must be zero
mmioCloseMMRESULT00tbHMMIOhmmioHMMIO hmmio,	//Handle of file to closexbUINTMMIO_FHOPENUINT fuOption,	//Specifies optional operation
mmioCreateChunkMMRESULT00tbHMMIOhmmioHMMIO hmmio,	//Identifies filetbLPMMCKINFOlpmmckiLPMMCKINFO lpmmcki,	//Address of chunk information structurerbUINTMMIO_CREATERIFFMMIO_CREATELISTUINT fuOptions	//Chunk creation options
mmioDescendMMRESULT00tbHMMIOhmmioHMMIO hmmio,	//Handle of open RIFF filetbLPMMCKINFOlpmmckiLPMMCKINFO lpmmcki,	//Address of chunk information structurecbLPMMCKINFOlpmmckiParentNULLLPMMCKINFO lpmmckiParent,	//Address of optional parent structurerbUINT0MMIO_FINDCHUNKMMIO_FINDRIFFMMIO_FINDLISTUINT fuSearch	//Search-option flags
mmioFlushMMRESULT00tbHMMIOhmmioHMMIO hmmio,	//Handle of file to flush tocbUINT0uReservedUINT uReserved	//Reserved, must be zero
mmioFOURCCFOURCC00tbCHARch0CHAR ch0,	//Character onetbCHARch1CHAR ch1,	//Character twotbCHARch2CHAR ch2,	//Character threetbCHARch3CHAR ch3	//Character four
mmioInstallIOProcLPMMIOPROC00tbFOURCCfccProcFOURCC fccProc,	//Four-character code for procedurecbLPMMIOPROClpmmioprocNULLLPMMIOPROC lpmmioproc,	//Address of procedure to installrbDWORDMMIO_INSTALLPROCMMIO_GLOBALPROCMMIO_REMOVEPROCMMIO_FINDPROCDWORD fdwInstall	//Install option flags
mmioInstallIOProcLPMMIOPROC00tbFOURCCfccProcFOURCC fccProc,	//Four-character code for procedurecbLPMMIOPROClpmmioprocNULLLPMMIOPROC lpmmioproc,	//Address of procedure to installrbDWORDMMIO_INSTALLPROCMMIO_GLOBALPROCMMIO_REMOVEPROCMMIO_FINDPROCDWORD fdwInstall	//Install option flags
mmioOpenHMMIO00cbLPTSTRlpszFilenameNULLLPTSTR lpszFilename,	//Specifies name of file to opencbLPMMIOINFOlpmmioinfoNULLLPMMIOINFO lpmmioinfo,	//Address of structure for file informationxbDWORDMMIO_READMMIO_WRITEMMIO_READWRITEMMIO_CREATEMMIO_DELETEMMIO_PARSEMMIO_EXISTMMIO_ALLOCBUFMMIO_COMPATMMIO_EXCLUSIVEMMIO_DENYWRITEMMIO_DENYREADMMIO_DENYNONEMMIO_GETTEMPDWORD fdwOpen	//Open option flags
MMIOProcLRESULTCALLBACK00tbLPSTRlpmmioinfoLPSTR  lpmmioinfo,	// address of structure with file informationtbUINTuMsgUINT  uMsg,	// specifies sent messagetbLONGlParam1LONG  lParam1,	// application-defined parametertbLONGlParam2LONG  lParam2	// application-defined parameter
mmioReadLRESULT00tbHMMIOhmmioHMMIO hmmio,	//Handle of file to read fromtbLPSTRpbLPSTR pb,	//Address of buffer for read bytestbLONGcbReadLONG cbRead	//Number of bytes to read
mmioRenameMMRESULT00tbLPCTSTRlpszOldNameLPCTSTR lpszOldName,	//Address of old filenametbLPCTSTRlpszNewNameLPCTSTR lpszNewName,	//Address of new filenametbLPMMIOINFOlpmmioinfoLPMMIOINFO lpmmioinfo,	//Address of structure with additional infocbDWORD0dwReservedDWORD dwReserved,	//Reserved must be zero
mmioSeekLRESULT00tbHMMIOhmmioHMMIO hmmio,	//Handle of file to seek intbLONGlOffsetLONG lOffset,	//Specifies change in file positionxbintSEEK_SETSEEK_CURSEEK_ENDint nOrigin	//Specifies how to change file position
mmioSendMessageLRESULT00tbHMMIOhmmioHMMIO hmmio,	//Handle of file associated with I/O proceduretbUINTuMsgUINT uMsg,	//Message to sendtbLONGlParam1LONG lParam1,	//Application-defined parametertbLONGlParam2LONG lParam2	//Application-defined parameter
mmioSetBufferMMRESULT00tbHMMIOhmmioHMMIO hmmio,	//Handle of file to set buffer forcbLPSTRpbBufferNULLLPSTR pbBuffer,	//Address of buffercbLONGcbBufferNULLLONG cbBuffer,	//Size of buffercbUINT0uReservedUINT uReserved,	//Reserved, must be zero
mmioSetInfoMMRESULT00tbHMMIOhmmioHMMIO hmmio,	//Handle of the file to settbLPMMIOINFOlpmmioinfoLPMMIOINFO lpmmioinfo,	//Address of file-information structurecbUINT0uReservedUINT uReserved	//Reserved, must be zero
mmioStringToFOURCCFOURCC00tbLPCTSTRlpszLPCTSTR lpsz,	//Address of string to convertxbUINTMMIO_TOUPPERUINT fuOptions	//Options flags
ModifyWorldTransformBOOL00tbHDChdcHDC hdc,	//Handle of device contextcbCONST XFORM *&Xform lpXformCONST XFORM * lpXform,	//Address of transformation datarbDWORDMWT_IDENTITYMWT_LEFTMULTIPLYMWT_RIGHTMULTIPLYDWORD iMode	//Modification mode
MouseProcLRESULT00rbintHC_ACTIONHC_NOREMOVEint nCode,	//Hook codetbWPARAMwParamWPARAM wParam,	//Message identifiertbLPARAMlParamLPARAM lParam	//Mouse coordinates
mouse_eventBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbCONST XFORM *  lpXformCONST XFORM *  lpXform,	//Address of transformation datatbDWORDiModeDWORD  iMode	//Modification mode
mouse_eventBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbCONST XFORM *  lpXformCONST XFORM *  lpXform,	//Address of transformation datatbDWORDiModeDWORD  iMode	//Modification mode
MoveFileBOOL00tbLPCTSTRlpszExistingLPCTSTR lpszExisting,	//Address of name of the existing filetbLPCTSTRlpszNewLPCTSTR lpszNew	//Address of new name for the file
MoveFileExBOOL00tbLPCTSTRlpszExistingLPCTSTR lpszExisting,	//Address of name of the existing filetbLPCTSTRlpszNewLPCTSTR lpszNew,	//Address of new name for the filerbDWORDMOVEFILE_REPLACE_EXISTINGMOVEFILE_COPY_ALLOWEDMOVEFILE_DELAY_UNTIL_REBOOTDWORD fdwFlags	//Flag to determine how to move file
MoveMemoryVOID00tbPVOIDDestinationPVOID Destination,	//Address of move destinationtbCONST VOID * SourceCONST VOID * Source,	//Address of block to movetbDWORDLengthDWORD Length	//Size in bytes of block to move
MoveToExBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbintXint X,	//X-coordinate of new current positiontbintYint Y,	//Y-coordinate of new current positioncbLPPOINTlpPointNULLLPPOINT lpPoint	//Address of old current position
MoveWindowBOOL00tbHWNDhwndHWND hwnd,	//Handle of windowtbintxint x,	//Horizontal positiontbintyint y,	//Vertical positiontbintcxint cx,	//Widthtbintcyint cy,	//HeightcbBOOLbRepaintTRUEFALSEBOOL bRepaint	//Repaint flag
MsgWaitForMultipleObjectsDWORD00tbDWORDcObjectsDWORD cObjects,	//Number of handles in handle arraytbLPHANDLElphObjectsLPHANDLE lphObjects,	//Address of object-handle arraycbBOOLfWaitAllTRUEFALSEBOOL fWaitAll,	//Wait for all or wait for onetbDWORDdwTimeoutDWORD dwTimeout,	//Time-out interval in millisecondsxbDWORDQS_ALLINPUTQS_HOTKEYQS_INPUTQS_KEYQS_MOUSEQS_MOUSEBUTTONQS_MOUSEMOVEQS_PAINTQS_POSTMESSAGEQS_SENDMESSAGEQS_TIMERDWORD fdwWakeMask	//Type of input events to wait for
MulDivint00tbintnMultiplicandintnMultiplicand,	//32-bit signed multiplicandtbintnMultiplierint nMultiplier,	//32-bit signed multipliertbintnDivisorint nDivisor	//32-bit signed divisor
NDdeGetErrorStringUINT00tbUINTuErrorCodeUINT uErrorCode	//Error code to get string fortbLPTSTRlpszErrorStringLPTSTR lpszErrorString,	//Buffer to hold error stringtbDWORDcBufSizeDWORD cBufSize	//Sizeof buffer
NDdeGetShareSecurityUINT00tbLPTSTRlpszServerLPTSTR lpszServer,	//Server to execute ontbLPTSTRlpszShareNameLPTSTR lpszShareName,	//Name of share to deletetbSECURITY_INFORMATIONsiSECURITY_INFORMATION si,	//Requested informationcbPSECURITY_DESCRIPTORpSDNULLPSECURITY_DESCRIPTOR pSD,	//Address of SD buffertbDWORDcbSDDWORD cbSD,	//Size of SD buffertbLPDWORDlpcbsdRequiredLPDWORD lpcbsdRequired	//Address of required size for SD buffer
NDdeGetTrustedShareUINT00tbLPTSTRlpszServerLPTSTR lpszServer,	//Server to execute ontbLPTSTRlpszShareNameLPTSTR lpszShareName,	//Name of share to querytbLPDWORDlpdwTrustOptionsLPDWORD lpdwTrustOptions,	//Trust options in effecttbLPDWORDlpdwShareModId0LPDWORD lpdwShareModId0,	//First word of share mod idtbLPDWORDlpdwShareModId1LPDWORD lpdwShareModId1	//Second word of share mod id
NddeIsValidShareNameBOOL00tbLPTSTRlpszShareLPTSTR lpszShare	//Points to share name to validate
NDdeSetShareSecurityUINT00tbLPTSTRlpszServerLPTSTR lpszServer,	//Server to execute ontbLPTSTRlpszShareNameLPTSTR lpszShareName,	//Name of share to deletetbSECURITY_INFORMATIONsiSECURITY_INFORMATION si,	//Type of informationtbPSECURITY_DESCRIPTORpSDPSECURITY_DESCRIPTOR pSD	//Address of security descriptor to set
NddeSetTrustedShareUINT00tbLPTSTRlpszServerLPTSTR lpszServer,	//Server to execute ontbLPTSTRlpszShareNameLPTSTR lpszShareName,	//Name of share to deletexbDWORDNDDE_TRUST_SHARE_STARTNDDE_TRUST_SHARE_INITNDDE_TRUST_SHARE_DELNDDE_TRUST_CMD_SHOWNDDE_CMD_SHOW_MASKDWORD dwTrustOptions	//Trust options to apply
NddeSetTrustedShareUINT00tbLPTSTRlpszServerLPTSTR lpszServer,	//Server to execute ontbLPTSTRlpszShareNameLPTSTR lpszShareName,	//Name of share to deletexbDWORDNDDE_TRUST_SHARE_STARTNDDE_TRUST_SHARE_INITNDDE_TRUST_SHARE_DELNDDE_TRUST_CMD_SHOWNDDE_CMD_SHOW_MASKDWORD dwTrustOptions	//Trust options to apply
NDdeShareAddUINT00tbLPTSTRlpszServerLPTSTR lpszServer,	//Server to execute oncbUINT2nLevelUINT nLevel,	//Info level must be 2tbPSECURITY_DESCRIPTORpSDPSECURITY_DESCRIPTOR pSD,	//Initial security descriptortbLPBYTElpBufferLPBYTE lpBuffer,	//Address of NDDESHAREINFOtbDWORDcBufSizeDWORD cBufSize	//Sizeof supplied buffer
NDdeShareDelUINT00tbDWORDcBufSizeDWORD cBufSize,	//Sizeof supplied buffertbLPTSTRlpszShareNameLPTSTR lpszShareName,	//Name of share to deletecbUINT0wReservedUINT wReserved,	//Must be 0
NDdeShareEnumUINT00tbLPTSTRlpszServerLPTSTR lpszServer,	//Server to execute oncbUINT0nLevelUINT nLevel,	//Must be 0tbLPBYTElpBufferLPBYTE lpBuffer,	//Pointer to buffertbDWORDcBufSizeDWORD cBufSize,	//Size of buffertbLPDWORDlpnEntriesReadLPDWORD lpnEntriesRead,	//Number of names returnedtbLPDWORDlpcbTotalAvailableLPDWORD lpcbTotalAvailable	//Number of bytes available
NDdeShareGetInfoUINT00tbLPTSTRlpszServerLPTSTR lpszServer,	//Server to execute ontbLPTSTRlpszShareNameLPTSTR lpszShareName,	//Name of sharecbUINT2nLevelUINT nLevel,	//Info level must be 2tbLPBYTElpBufferLPBYTE lpBuffer,	//Contains (NDDESHAREINFO) + datatbDWORDcBufSizeDWORD cBufSize,	//Sizeof buffertbLPDWORDlpnTotalAvailableLPDWORD lpnTotalAvailable,	//Number of bytes availablecbLPWORDlpnItems0LPWORD lpnItems	//Item mask for partial getinfo
NDdeShareSetInfoUINT00tbLPTSTRlpszServerLPTSTR lpszServer,	//Server to execute ontbLPTSTRlpszShareNameLPTSTR lpszShareName,	//Name of sharecbUINT2nLevelUINT nLevel,	//Info level must betbLPBYTElpBufferLPBYTE lpBuffer,	//Address of NDDESHAREINFOtbDWORDcBufSizeDWORD cBufSize,	//Sizeof buffercbWORDsParmNum0WORD sParmNum	//Parameter index
NDdeTrustedShareEnumUINT00tbLPTSTRlpszServerLPTSTR lpszServer,	//Server to execute oncbUINT0nLevelUINT nLevel,	//Must be 0cbLPBYTElpBufferNULLLPBYTE lpBuffer,	//Pointer to buffercbDWORDcBufSize0DWORD cBufSize,	//Size of buffertbLPDWORDlpnEntriesReadLPDWORD lpnEntriesRead,	//Number of names returnedtbLPDWORDlpcbTotalAvailableLPDWORD lpcbTotalAvailable	//Number of bytes available
NetAccessAddNET_API_STATUSNET_API_FUNCTION00tbLPWSTROPTIONALLPWSTR servername OPTIONAL,tbDWORDlevelDWORD level,tbLPBYTEbufLPBYTE buf,tbOUTOPTIONALOUT LPDWORD parm_err OPTIONAL
NetAccessCheckNET_API_STATUSNET_API_FUNCTION00tbLPWSTROPTIONALLPWSTR servername OPTIONAL,tbLPWSTRusernameLPWSTR username,tbLPWSTRresourceLPWSTR resource,tbDWORDoperationDWORD operation,tbOUTresultOUT LPDWORD result
NetAccessDelNET_API_STATUSNET_API_FUNCTION00tbLPWSTROPTIONALLPWSTR servername OPTIONAL,tbNresourceN LPWSTR resource
NetAccessGetUserPermsNET_API_STATUSNET_API_FUNCTION00tbLPWSTROPTIONALLPWSTR servername OPTIONAL,tbLPWSTRUGnameLPWSTR UGname,tbLPWSTRresourceLPWSTR resource,tbOUTPermsOUT LPDWORD Perms
NetAccessSetInfoNET_API_STATUSNET_API_FUNCTION00tbLPWSTRservername OPTIONALLPWSTR servername OPTIONAL,tbLPWSTRresourceLPWSTR resource,tbDWORDlevelDWORD level,tbLPBYTEbufLPBYTE buf,tbOUTOPTIONALOUT LPDWORD parm_err OPTIONAL
NetAlertRaiseNET_API_STATUSNET_API_FUNCTION00tbLPWSTReventLPWSTR event,tbINLPBYTE bufferIN LPBYTE buffer,tbDWORDnumbytesDWORD numbytes
NetAlertRaiseExNET_API_STATUSNET_API_FUNCTION00tbLPWSTReventLPWSTR event,tbINVariableInfoIN LPVOID VariableInfo,tbDWORDVariableInfoSizeDWORD VariableInfoSizetbLPWSTRServiceNameLPWSTR ServiceName
NetApiBufferAllocateNET_API_STATUSNET_API_FUNCTION00tbDWORDByteCountDWORD ByteCount,tbLPBYTE * bufferLPBYTE * buffer
NetApiBufferFreeNET_API_STATUSNET_API_FUNCTION00tbLPVOIDbufferLPVOID buffer
NetApiBufferReallocateNET_API_STATUSNET_API_FUNCTION00tbLPVOIDOldBufferLPVOID OldBuffer,tbDWORDNewByteCountDWORD NewByteCount,tbLPVOIDbufferLPVOID buffer
NetApiBufferSizeNET_API_STATUSNET_API_FUNCTION00tbLPVOIDbufferLPVOID buffer,tbDWORDByteCountDWORD ByteCount
NetAuditClearNET_API_STATUSNET_API_FUNCTION00tbLPWSTRserverLPWSTR server,tbIN LPWSTR backupfileOPTIONALIN LPWSTR backupfile OPTIONAL,tbLPWSTR serviceOPTIONALLPWSTR service OPTIONAL
NetAuditReadNET_API_STATUSNET_API_FUNCTION00tbLPWSTRserverLPWSTR server,tbLPWSTR service OPTIONALLPWSTR service OPTIONAL,tbIN LPHLOG auditloghandleIN LPHLOG auditloghandle,tbIN DWORD offsetIN DWORD offset,tbIN LPDWORD reserved1 OPTIONALIN LPDWORD reserved1 OPTIONAL,tbIN DWORD reservedIN DWORD reserved,tbIN DWORD offsetflagIN DWORD offsetflag,tbOUT LPBYTE *bufptrOUT LPBYTE * bufptr,tbIN DWORD prefmaxlenIN DWORD prefmaxlen,tbOUT LPDWORDbytesreadOUT LPDWORD bytesread,tbLPDWORDtotalavailableLPDWORD totalavailable
NetbiosUCHAR00tbPNCBpncbPNCB pncb	//Address of the network-control block
NetConfigGetNET_API_STATUSNET_API_FUNCTION00tbLPWSTRserverLPWSTR server,tbIN LPWSTRcomponentIN LPWSTR component,tbIN LPWSTRparameterIN LPWSTR parameter,tbOUT LPBYTE * bufptrOUT LPBYTE * bufptr
NetConfigGetAllNET_API_STATUSNET_API_FUNCTION00tbLPWSTRserverLPWSTR server,tbINcomponentIN LPWSTR component,tbOUT LPBYTE * bufptrOUT LPBYTE * bufptr
NetConfigSetNET_API_STATUSNET_API_FUNCTION00tbLPWSTRserverLPWSTR server,tbIN LPWSTR reserved1OPTIONALIN LPWSTR reserved1 OPTIONAL,tbIN LPWSTRcomponentIN LPWSTR component,tbIN DWORDlevelIN DWORD level,tbIN DWORDDWORD reservedIN DWORD reserved,tbLPBYTEbufLPBYTE buf,tbDWORDreserved3DWORD reserved3
NetErrorLogClearNET_API_STATUSNET_API_FUNCTION00tbLPWSTRserverLPWSTR server,tbIN LPWSTR backupfileOPTIONALIN LPWSTR backupfile OPTIONAL,
NotifyBootConfigStatusBOOL00cbBOOLfBootAcceptableTRUEFALSEBOOL fBootAcceptable	//Indicates acceptability of boot configuration
NotifyChangeEventLogBOOL00tbHANDLEhEventLogHANDLE  hEventLog,	//Special default locale value to be convertedtbHANDLEhEventHANDLE  hEvent	//Special default locale value to be converted
ObjectCloseAuditAlarmBOOL00tbLPCTSTRlpszSubsystemLPCTSTR lpszSubsystem,	//Address of string for subsystem nametbLPVOIDlpvHandleIdLPVOID lpvHandleId,	//Address of handle identifiercbBOOLfGenerateOnCloseTRUEFALSEBOOL fGenerateOnClose	//Flag for audit generation
ObjectOpenAuditAlarmBOOL00tbLPCTSTRlpszSubsystemLPCTSTR lpszSubsystem,	//Address of string for subsystem nametbLPVOIDlpvHandleIdLPVOID lpvHandleId,	//Address of handle identifiertbLPTSTRlpszObjectTypeLPTSTR lpszObjectType,	//Address of string for object typetbLPTSTRlpszObjectLPTSTR lpszObject,	//Address of string for object nametbPSECURITY_DESCRIPTORpsdPSECURITY_DESCRIPTOR psd,	//Address of security descriptortbHANDLEhClientTokenHANDLE hClientToken,	//Handle of client's access tokentbDWORDdwDesiredAccessDWORD dwDesiredAccess,	//Mask for desired access rightstbDWORDdwGrantedAccessDWORD dwGrantedAccess,	//Mask for granted access rightstbPPRIVILEGE_SETppsPPRIVILEGE_SET pps,	//Address of privilegescbBOOLfObjectCreationTRUEFALSEBOOL fObjectCreation,	//Flag for object creationcbBOOLfAccessGrantedTRUEFALSEBOOL fAccessGranted,	//Flag for resultscbLPBOOL&fGenerateOnCloselpfGenerateOnCloseLPBOOL lpfGenerateOnClose	//Address of flag for audit generation
ObjectPrivilegeAuditAlarmBOOL00tbLPCTSTRlpszSubsystemLPCTSTR lpszSubsystem,	//Address of string for subsystem nametbLPVOIDlpvHandleIdLPVOID lpvHandleId,	//Address of handle identifiertbHANDLEhClientTokenHANDLE hClientToken,	//Handle of client's access tokentbDWORDdwDesiredAccessDWORD dwDesiredAccess,	//Mask for desired access rightscbPPRIVILEGE_SETppsNULLPPRIVILEGE_SET pps,	//Address of privilegescbBOOLfAccessGrantedTRUEFALSEBOOL fAccessGranted	//Flag for results
OemKeyScanWORD00tbWORDwOemCharWORD wOemChar	//ASCII value of OEM character
OemToCharBOOL00tbLPCSTRlpszOemStrLPCSTR lpszOemStr,	//Address of string to translatetbLPTSTRlpszStrLPTSTR lpszStr	//Address of buffer for translated string
OemToCharBuffBOOL00tbLPCSTRlpOemStrLPCSTR lpOemStr,	//Address of string to translatetbLPTSTRlpszStrLPTSTR lpszStr,	//Address of buffer for translated stringtbDWORDcchStringDWORD cchString	//Size of buffer
OffsetClipRgnint00tbHDChdcHDC hdc,	//Handle of device contexttbintnXOffsetint nXOffset,	//Offset along x-axistbintnYOffsetint nYOffset	//Offset along y-axis
OffsetRectBOOL00tbLPRECTlprcLPRECT lprc,	//Address of structure with rectangletbintxint x,	//Horizontal offsettbintyint y	//Vertical offset
OffsetRgnint00tbintyinty,	//Vertical offsettbintnXOffsetint nXOffset,	//Offset along x-axistbintnYOffsetint nYOffset	//Offset along y-axis
OffsetViewportOrgExBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbintnXOffsetint nXOffset,	//Horizontal offsettbintnYOffsetint nYOffset,	//Vertical offsettbLPPOINTlpPointLPPOINT lpPoint	//Address of structure receiving original origin
OffsetWindowOrgExBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbintnXOffsetint nXOffset,	//Horizontal offsettbintnYOffsetint nYOffset,	//Vertical offsetcbLPPOINT&PointNULLlpPointLPPOINT lpPoint	//Address of structure receiving the original origin
OpenBackupEventLogHANDLE00cbLPCTSTRlpszUNCServerNameNULLLPCTSTR lpszUNCServerName,	//Backup file server nametbLPCTSTRlpszFileNameLPCTSTR lpszFileName	//Backup filename
OpenClipboardBOOL00cbHWNDhwndNULLHWND hwnd	//Handle of window opening clipboard
OpenEventHANDLE00xbDWORDEVENT_MODIFY_STATESYNCHRONIZEEVENT_ALL_ACCESSDWORD fdwAccess,	//Access flagcbBOOLfInheritTRUEFALSEBOOL fInherit,	//Inherit flagtbLPCTSTRlpszEventNameLPCTSTR lpszEventName	//Address of event-object name
OpenEventLogHANDLE00cbLPCTSTRlpszUNCServerNameNULLLPCTSTR lpszUNCServerName,	//Address of server nametbLPCTSTRlpszSourceNameLPCTSTR lpszSourceName	//Address of source name
OpenFileHFILE00tbLPCSTRlpszFileLPCSTR lpszFile,	//Address of filenametbLPOFSTRUCTlpOpenBuffLPOFSTRUCT lpOpenBuff,	//Address of buffer for file informationxbUINTOF_CANCELOF_CREATEOF_DELETEOF_EXISTOF_PARSEOF_PROMPTOF_READOF_READWRITEOF_REOPENOF_SHARE_COMPATOF_SHARE_DENY_NONEOF_SHARE_DENY_READOF_SHARE_DENY_WRITEOF_SHARE_EXCLUSIVEOF_VERIFYOF_WRITEUINT fuMode	//Action and attributes
OpenFileMappingHANDLE00cbDWORDFILE_MAP_WRITEFILE_MAP_READFILE_MAP_ALL_ACCESSFILE_MAP_COPYDWORD dwDesiredAccess,	//Access modecbBOOLbInheritHandleTRUEFALSEBOOL bInheritHandle,	//Inherit flagtbLPCTSTRlpNameLPCTSTR lpName	//Address of name of file-mapping object
OpenIconBOOL00tbHWNDhwndHWND hwnd	//Handle of window
OpenMutexHANDLE00xbDWORDSYNCHRONIZEMUTEX_ALL_ACCESSDWORD fdwAccess,	//Access flagcbBOOLfInheritTRUEFALSEBOOL fInherit,	//Inherit flagtbLPCTSTRlpszMutexNameLPCTSTR lpszMutexName	//Address of mutex-object name
OpenPrinterBOOL00tbLPTSTRpPrinterNameLPTSTR pPrinterName,	//Address of printer or server nametbLPHANDLEphPrinterLPHANDLE phPrinter,	//Address of printer or server handlecbLPPRINTER_DEFAULTSpDefaultNULLLPPRINTER_DEFAULTS pDefault	//Address of printer defaults structure
OpenProcessHANDLE00xbDWORDPROCESS_CREATE_PROCESSPROCESS_CREATE_THREADPROCESS_DUP_HANDLEPROCESS_QUERY_INFORMATIONPROCESS_SET_INFORMATIONPROCESS_TERMINATEPROCESS_VM_OPERATIONPROCESS_VM_READPROCESS_VM_WRITESYNCHRONIZEPROCESS_ALL_ACCESSDWORD fdwAccess,	//Access flagcbBOOLfInheritTRUEFALSEBOOL fInherit,	//Can child process inherittbDWORDIDProcessDWORD IDProcess	//Process identifier
OpenProcessTokenBOOL00tbHANDLEhProcessHANDLE hProcess,	//Handle of processxbDWORDTOKEN_ADJUST_DEFAULTTOKEN_ADJUST_GROUPSTOKEN_ADJUST_PRIVILEGESTOKEN_ALL_ACCESSTOKEN_ASSIGN_PRIMARYTOKEN_DUPLICATETOKEN_EXECUTETOKEN_IMPERSONATETOKEN_QUERYTOKEN_QUERY_SOURCETOKEN_READTOKEN_WRITEDWORD dwAccessMask,	//Desired access to processtbPHANDLEphTokenPHANDLE phToken	//Address of handle of open access token
OpenSCManagerSC_HANDLE00tbLPCTSTRlpszMachineNameLPCTSTR lpszMachineName,	//Address of machine name stringtbLPCTSTRlpszDatabaseNameLPCTSTR lpszDatabaseName,	//Address of database name stringxbDWORDSC_MANAGER_ALL_ACCESSSC_MANAGER_CONNECTSC_MANAGER_CREATE_SERVICESC_MANAGER_ENUMERATE_SERVICESC_MANAGER_LOCKSC_MANAGER_QUERY_LOCK_STATUSGENERIC_READGENERIC_WRITEGENERIC_EXECUTEDWORD fdwDesiredAccess	//Type of access
OpenSemaphoreHANDLE00xbDWORDSEMAPHORE_MODIFY_STATESYNCHRONIZESEMAPHORE_ALL_ACCESSDWORD fdwAccess,	//Access flagcbBOOLfInheritTRUEFALSEBOOL fInherit,	//Inherit flagtbLPCTSTRlpszSemNameLPCTSTR lpszSemName	//Address of semaphore-object name
OpenServiceSC_HANDLE00tbSC_HANDLEschSCManagerSC_HANDLE schSCManager,	//Handle of service control manager databasetbLPCTSTRlpszServiceNameLPCTSTR lpszServiceName,	//Address of name of service to startcbDWORDSERVICE_ALL_ACCESSSERVICE_CHANGE_CONFIGSERVICE_ENUMERATE_DEPENDENTSSERVICE_INTERROGATESERVICE_PAUSE_CONTINUESERVICE_QUERY_CONFIGSERVICE_QUERY_STATUSSERVICE_STARTSERVICE_STOPSERVICE_USER_DEFINE_CONTROLSTANDARD_RIGHTS_REQUIREDDELETEREAD_CONTROLWRITE_DAC|WRITE_OWNERGENERIC_READGENERIC_WRITEGENERIC_EXECUTEDWORD fdwDesiredAccess	//Type of access to service
OpenThreadTokenBOOL00tbHANDLEhThreadHANDLE hThread,	//Handle of threadxbDWORDTOKEN_ADJUST_DEFAULTTOKEN_ADJUST_GROUPSTOKEN_ADJUST_PRIVILEGESTOKEN_ALL_ACCESSTOKEN_ASSIGN_PRIMARYTOKEN_DUPLICATETOKEN_EXECUTETOKEN_IMPERSONATETOKEN_QUERYTOKEN_QUERY_SOURCETOKEN_READTOKEN_WRITEDWORD dwAccessMask,	//Access to processcbBOOLfOpenAsSelfTRUEFALSEBOOL fOpenAsSelf,	//Flag for process or thread securitycbPHANDLE&hTokenphTokenPHANDLE phToken	//Address of handle of open access token
OutputDebugStringVOID00tbLPCTSTRlpszOutputStringLPCTSTR lpszOutputString	//Address of string to be displayed
OutputProcBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbLPARAMlpDataLPARAM lpData,	//Address of string to be drawntbintcchDataint cchData	//Length of string to be drawn
PackDDElParamLONG00tbUINTuMsgUINT uMsg,	//DDE message to be postedtbUINTuLowUINT uLow,	//Low-order word of lParam of messagetbUINTuHighUINT uHigh	//High-order word of lParam of message
PaintRgnBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbHRGNhrgnHRGN hrgn	//Handle of region to be painted
PatBltBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbintnXLeftint nXLeft,	//X-coord. of upper left corner of rect. to be filledtbintnYLeftint nYLeft,	//Y-coord. of upper left corner of rect. to be filledtbintnWidthint nWidth,	//Width of rectangle to be filledtbintnHeightint nHeight,	//Height of rectangle to be filledrbDWORDPATCOPYPATINVERTDSTINVERTBLACKNESSWHITENESSDWORD dwRop	//Raster operation code
PathToRegionHGRN00tbHDChdcHDC hdc	//Handle of device context
PeekConsoleInputBOOL00tbHANDLEhConsoleInputHANDLE hConsoleInput,	//Handle of a console input buffertbPINPUT_RECORDpirBufferPINPUT_RECORD pirBuffer,	//Address of the buffer for peek datatbDWORDcInRecordsDWORD cInRecords,	//Number of records to readtbLPDWORDlpcReadLPDWORD lpcRead	//Address of number of records read
PeekMessageBOOL00tbLPMSGlpmsgLPMSG lpmsg,	//Address of structure for messagetbHWNDhwndHWND hwnd,	//Handle of windowtbUINTuMsgFilterMinUINT uMsgFilterMin,	//First messagetbUINTuMsgFilterMaxUINT uMsgFilterMax,	//Last messagerbUINTPM_NOREMOVEPM_REMOVEUINT fuRemoveMsg	//Removal flags
PeekNamedPipeBOOL00tbHANDLEhPipeHANDLE hPipe,	//Handle of pipe to copy fromcbLPVOIDlpvBufferNULLLPVOID lpvBuffer,	//Address of data buffercbDWORDcbBuffer0DWORD cbBuffer,	//Size in bytes of data buffercbLPDWORDlpcbReadNULLLPDWORD lpcbRead,	//Address of number of bytes readcbLPDWORDlpcbAvailNULLLPDWORD lpcbAvail,	//Address of total number of bytes availablecbLPDWORDlpcbMessageNULLLPDWORD lpcbMessage	//Address of unread bytes in this message
PieBOOL00tbHDChdcHDC hdc,	//Identifies the device contexttbintnLeftRectint nLeftRect,	//X-coord. of bounding rect. upper-left cornertbintnTopRectint nTopRect,	//Y-coord. of bounding rect. upper-left cornertbintnRightRectint nRightRect,	//X-coord. of bounding rect. lower-right cornertbintnBottomRectint nBottomRect,	//Y-coord. of bounding rect. lower-right cornertbintnXRadial1int nXRadial1,	//X-coord. of first radial's endpointtbintnYRadial1int nYRadial1,	//Y-coord. of first radial's endpointtbintnXRadial2int nXRadial2,	//X-coord. of second radial's endpointtbintnYRadial2int nYRadial2	//Y-coord. of second radial's endpoint
PlayEnhMetaFileBOOL00tbHDChdcHDC hdc,	//Handle of a device contexttbHENHMETAFILEhemfHENHMETAFILE hemf,	//Handle of an enhanced metafiletbCONST RECT * lpRectCONST RECT * lpRect	//Address of bounding rectangle
PlayEnhMetaFileRecordBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbLPHANDLETABLElpHandletableLPHANDLETABLE lpHandletable,	//Address of metafile handle tablecbCONST ENHMETARECORD *&EnhMetaRecordlpEnhMetaRecordCONST ENHMETARECORD * lpEnhMetaRecord,	//Address of metafile recordtbUINTnHandlesUINT nHandles	//Count of handles
PlayMetaFileBOOL00tbHDChdcHDC hdc,	//Handle of the device contexttbHMETAFILEhmfHMETAFILE hmf	//Handle of the metafile
PlayMetaFileRecordBOOL00tbHDChdcHDC hdc,	//Handle of device contextcbLPHANDLETABLE&HandleTablelpHandletableLPHANDLETABLE lpHandletable,	//Address of metafile handle tablecbLPMETARECORD&MetaRecordlpMetaRecordLPMETARECORD lpMetaRecord,	//Address of metafile recordtbUINTnHandlesUINT nHandles	//Count of handles
PlaySoundBOOL00tbLPCTSTRlpszNameLPCTSTR lpszName,	//Sound stringtbHANDLEhModuleHANDLE hModule,	//Sound resourcexbDWORDSND_ALIASSND_ASYNCSND_FILENAMESND_NODEFAULTSND_NOWAITSND_RESOURCESND_SYNCDWORD fdwSound	//Sound type
PlgBltBOOL00tbHDChdcDestHDC hdcDest,	//Handle of destination device contexttbLPPOINTlpPointLPPOINT lpPoint,	//Vertices of destination parallelogramtbHDChdcSrcHDC hdcSrc,	//Handle of source device contexttbintnXSrcint nXSrc,	//X-coord. of upper left corner of source rect.tbintnYSrcint nYSrc,	//Y-coord. of upper left corner of source rect.tbintnWidthint nWidth,	//Width of source rectangletbintnHeightint nHeight,	//Height of source rectangletbHBITMAPhbmMaskHBITMAP hbmMask,	//Handle of bitmasktbintxMaskint xMask,	//X-coord. of upper left corner of bitmask rect.tbintyMaskint yMask	//Y-coord. of upper left corner of bitmask rect.
PolyBezierBOOL00tbHDChdcHDC hdc,	//Handle of device contextcbCONST POINT *lpptCONST POINT * lppt,	//Address of endpoints and control pointstbDWORDcPointsDWORD cPoints	//Count of endpoints and control points
PolyBezierToBOOL00tbHDChdcHDC hdc,	//Handle of device contextcbCONST POINT *lpptCONST POINT * lppt,	//Address of endpoints and control pointstbDWORDcCountDWORD cCount	//Count of endpoints and control points
PolygonBOOL00tbHDChdcHDC hdc,	//Handle of device contextcbCONST POINT *lpPointsCONST POINT *lpPoints,	//Address of polygon's verticestbintnCountint nCount	//Count of polygon's vertices
PolylineToBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbCONST POINT *lpptCONST POINT * lppt,	//Address of array of pointstbDWORDcCountDWORD cCount	//Number of points in array
PolylineToBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbCONST POINT *lpptCONST POINT * lppt,	//Address of array of pointstbDWORDcCountDWORD cCount	//Number of points in array
PolyPolygonBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbCONST POINT *lpPointsCONST POINT *lpPoints,	//Address of vertices for all polygonstbLPINTlpPolyCountsLPINT lpPolyCounts,	//Count of vertices for each polygontbintnCountint nCount	//Count of polygons
PolyTextOutBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbCONST POLYTEXT *pptxtCONST POLYTEXT * pptxt,	//Address of array of structures that identify stringstbintcStringsint cStrings	//Number of structures in array
PostMessageBOOL00cbHWNDhwndHWND_BROADCASTNULLHWND hwnd,	//Handle of destination windowtbUINTuMsgUINT uMsg,	//Message to posttbUINTuMsgUINT uMsg,	//Message to posttbLPARAMlParamLPARAM lParam	//Second message parameter
PostQuitMessageVOID00tbintnExitCodeint nExitCode	//Exit code
PostThreadMessageBOOL00tbDWORDdwThreadIdDWORD dwThreadId,	//Thread identifiertbUINTuMsgUINT uMsg,	//Message to posttbWPARAMwParamWPARAM wParam,	//First message parametertbLPARAMlParamLPARAM lParam	//Second message parameter
PrepareTapeDWORD00tbHANDLEhDeviceHANDLE hDevice,	//Handle of open devicerbDWORDTAPE_LOADTAPE_LOCKTAPE_TENSIONTAPE_UNLOADTAPE_UNLOCKDWORD dwOperation,	//Preparation methodcbBOOLbImmediateTRUEFALSEBOOL bImmediate	//Return after operation begins
PrintDlgBOOL00cbLPPRINTDLG&pdlppdLPPRINTDLG lppd	//Pointer to structure with initialization data
PrinterMessageBoxHPRINTER00tbHANDLEhPrinterHANDLE hPrinter,	//Handle of printerrbDWORDERROR_OUT_OF_PAPERERROR_NOT_READYDWORD dwError,	//Error IDcbHWNDhwndOwnerNULLHWND hwndOwner,	//Handle of owner windowtbLPTSTRpTextLPTSTR pText,	//Pointer to message box textcbLPTSTRpCaptionNULLLPTSTR pCaption,	//Pointer to message box titlecbDWORDdwTypeMB_ICONSTOP | MB_RETRYCANCEL | MB_SETFOREGROUNDDWORD dwType,	//Style of message box
PrinterPropertiesBOOL00tbhwndhwndhwnd hwnd,	//Handle of window in which dialog box appearstbHANDLEhPrinterHANDLE hPrinter	//Handle of printer object
PrivilegeCheckBOOL00tbHANDLEhClientTokenHANDLE hClientToken,	//Handle of client's access tokencbPPRIVILEGE_SET&psppsPPRIVILEGE_SET pps,	//Address of privilegescbLPBOOL&fResultlpfResultLPBOOL lpfResult	//Address of flag for result
PrivilegedServiceAuditAlarmBOOL00tbLPCTSTRlpszSubsystemLPCTSTR lpszSubsystem,	//Address of string for subsystem nametbLPCTSTRlpszServiceLPCTSTR lpszService,	//Address of string for service nametbHANDLEhClientTokenHANDLE hClientToken,	//Handle of access tokencbPPRIVILEGE_SET&psppsPPRIVILEGE_SET pps,	//Address of privilegescbBOOLfAccessGrantedTRUEFALSEBOOL fAccessGranted	//Flag for granted access rights
PropEnumProcBOOLCALLBACK00tbHWNDhwndHWND  hwnd,	// handle of window with propertytbLPCTSTRlpszStringLPCTSTR  lpszString,	// atom or address of stringtbHANDLEhDataHANDLE  hData	// data handle
PropEnumProcExBOOLCALLBACK00tbHWNDhwndHWND  hwnd,	// handle of window with propertytbLPCTSTRlpszStringLPCTSTR  lpszString,	// atom or address of stringtbHANDLEhDataHANDLE  hData,	// data handletbDWORDdwDataDWORD  dwData	// application-defined data
PtInRectBOOL00tbCONSTRECT*lprcCONST RECT *lprc,	//Address of structure with rectangletbPOINTptPOINT pt	//Structure with point
PtInRegionBOOL00tbHRGNhrgnHRGN hrgn,	//Handle of regiontbintXint X,	//X-coordinate of pointtbintYint Y	//Y-coordinate of point
PtVisibleBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbintXint X,	//X-coordinate of pointtbintYint Y	//Y-coordinate of point
PulseEventBOOL00tbHANDLEhEventHANDLE hEvent	//Handle of event object
PurgeCommBOOL00tbHANDLEhCommDevHANDLE hCommDev,	//Handle of the communications resourcexbDWORDPURGE_TXABORTPURGE_RXABORTPURGE_TXCLEARPURGE_RXCLEARDWORD fdwAction	//Action to perform
QueryDosDeviceDWORD00cbLPCTSTRlpDeviceNameNULLLPCTSTR lpDeviceName,	//Pointer to DOS device name stringtbLPTSTRlpTargetPathLPTSTR lpTargetPath,	//Pointer to buffer for storing query resultstbDWORDucchMaxDWORD ucchMax	//Maximum storage capacity of that buffer
QueryPerformanceCounterBOOL00cbLARGE_INTEGER *&liPerformanceCountlpliPerformanceCountLARGE_INTEGER *lpliPerformanceCount	//Address of current counter value
QueryPerformanceFrequencyBOOL00cbLARGE_INTEGER *&liPerformanceCountlpliPerformanceCountLARGE_INTEGER *lpliPerformanceCount	//Address of current counter value
QueryServiceConfigBOOL00tbSC_HANDLEschServiceSC_HANDLE schService,	//Handle of servicetbLPQUERY_SERVICE_CONFIGlpqscServConfigiLPQUERY_SERVICE_CONFIG lpqscServConfig,	//Address of service config. structuretbDWORDcbBufSizeDWORD cbBufSize,	//Size of service configuration buffertbLPDWORDlpcbBytesNeededLPDWORD lpcbBytesNeeded	//Address of variable for bytes needed
QueryServiceLockStatusBOOL00tbSC_HANDLEschSCManagerSC_HANDLE schSCManager,	//Handle of svc. ctrl. mgr. databasetbLPQUERY_SERVICE_LOCK_STATUSlpqslsLockStatLPQUERY_SERVICE_LOCK_STATUS lpqslsLockStat,	//Address of lock status structuretbDWORDcbBufSizeDWORD cbBufSize,	//Size of service configuration buffercbLPDWORD&cbBytesNeededlpcbBytesNeededLPDWORD lpcbBytesNeeded	//Address of variable for bytes needed
QueryServiceObjectSecurityBOOL00tbSC_HANDLEschServiceSC_HANDLE schService,	//Handle of servicexbSECURITY_INFORMATIONOWNER_SECURITY_INFORMATIONGROUP_SECURITY_INFORMATIONDACL_SECURITY_INFORMATIONSACL_SECURITY_INFORMATION	SECURITY_INFORMATION fdwSecurityInfo,	//Type of security information requestedcbPSECURITY_DESCRIPTOR&sdSecurityDescpsdSecurityDescPSECURITY_DESCRIPTOR psdSecurityDesc,	//Address of security descriptortbDWORDcbBufSizeDWORD cbBufSize,	//Size of security descriptor buffercbLPDWORD&cbBytesNeededlpcbBytesNeededLPDWORD lpcbBytesNeeded,	//Address of variable for bytes needed
QueryServiceStatusBOOL00tbSC_HANDLEschServiceSC_HANDLE schService,	//Handle of servicetbLPSERVICE_STATUSlpssServiceStatusLPSERVICE_STATUS lpssServiceStatus	//Address of service status structure
RaiseExceptionVOID00tbDWORDdwExceptionCodeDWORD dwExceptionCode,	//Exception codetbDWORDdwExceptionFlagsDWORD dwExceptionFlags,	//Continuable exception flagtbDWORDcArgumentsDWORD cArguments,	//Number of arguments in arraycbCONST DWORD *lpArgumentsNULLCONST DWORD * lpArguments	//Address of array of arguments
RasDialDWORD00cbLPTSTRNULLreservedLPTSTR reserved,	//Reserved, must be set to NULLcbLPTSTRNULLlpszPhonebookPathLPTSTR lpszPhonebookPath,	//Full pathname to phonebook filetbLPRASDIALPARAMSlpRasDialParamsLPRASDIALPARAMS lpRasDialParams,	//Points to calling parameterscbLPVOIDNULLreserved2LPVOID reserved2,	//Reserved, must be set to NULLcbRASDIALFUNCnotifierNULLRASDIALFUNC notifier,	//Callback function for RasDial eventstbLPHRASCONNlphRasConnLPHRASCONN lphRasConn	//Points to variable to receive connection handle
RasDialFuncVOID00tbUINTunMsgUINT unMsg,	//Type of event that has occurredtbRASCONNSTATErasconnstateRASCONNSTATE rasconnstate,	//Connection state about to be enteredtbDWORDdwErrorDWORD dwError	//Error that may have occurred
RasDialFunc1VOID00tbHRASCONNhrasconnHRASCONN  hrasconn,	//Handle to RAS connectiontbUINTunMsgUINT  unMsg,	//Type of event that has occurredtbRASCONNSTATErascsRASCONNSTATE  rascs,	//Connection state about to be enteredtbDWORDdwErrorDWORD  dwError,	//Error that may have occurredtbDWORDdwExtendedErrorDWORD  dwExtendedError	//Extended error information for some errors
RasEnumConnectionsDWORD00tbLPRASCONNlprasconnLPRASCONN lprasconn,	//Buffer to receive connections datacbLPDWORD&cblpcbLPDWORD lpcb,	//Size in bytes of buffercbLPDWORD&cConnectionslpcConnectionsLPDWORD lpcConnections	//Number of connections written to buffer
RasEnumEntriesDWORD00cbLPTSTRNULLreservedLPTSTR reserved,	//Reserved, must be NULLcbLPTSTRNULLlpszPhonebookPathLPTSTR lpszPhonebookPath,	//Full path to phonebook filetbLPRASENTRYNAMElprasentrynameLPRASENTRYNAME lprasentryname,	//Buffer to receive phonebook entriestbLPDWORDlpcbLPDWORD lpcb,	//Size in bytes of buffertbLPDWORDlpcEntriesLPDWORD lpcEntries	//Number of entries written to buffer
RasGetConnectStatusDWORD00tbHRASCONNhrasconnHRASCONN hrasconn,	//Handle to RAS connection of interesttbLPRASCONNSTATUSlprasconnstatusLPRASCONNSTATUS lprasconnstatus	//Buffer to receive status data
RasGetErrorStringDWORD00tbUINTuErrorCodeUINT uErrorCode,	//Error code to get string fortbLPTSTRlpszErrorStringLPTSTR lpszErrorString,	//Buffer to hold error stringtbDWORDcBufSizeDWORD cBufSize	//Sizeof buffer
RasGetErrorStringDWORD00tbUINTuErrorCodeUINT uErrorCode,	//Error code to get string fortbLPTSTRlpszErrorStringLPTSTR lpszErrorString,	//Buffer to hold error stringtbDWORDcBufSizeDWORD cBufSize	//Sizeof buffer
RasGetProjectionInfoDWORD00tbHRASCONNhrasconnHRASCONN  hrasconn,	//Handle that specifies remote access connection of interesttbRASPROJECTIONrasprojectionRASPROJECTION  rasprojection,	//Specifies type of projection information to obtaintbLPVOIDlpprojectionLPVOID  lpprojection,	//Points to buffer that receives projection informationtbLPDWORDlpcbLPDWORD  lpcb	//Points to variable that specifies buffer size
RasHangUpDWORD00tbHRASCONNhrasconnHRASCONN hrasconn	//Handle to the RAS connection to hang up
ReadConsoleBOOL00tbHANDLEhConsoleInputHANDLE hConsoleInput,	//Handle of a console input buffertbLPVOIDlpvBufferLPVOID lpvBuffer,	//Address of buffer to receive datatbDWORDcchToReadDWORD cchToRead,	//Number of characters to readtbLPDWORDlpcchReadLPDWORD lpcchRead,	//Address of number of characters readcbLPVOIDNULLlpvReservedLPVOID lpvReserved	//Reserved
ReadConsoleInputBOOL00tbHANDLEhConsoleInputHANDLE hConsoleInput,	//Handle of a console input buffertbPINPUT_RECORDpirBufferPINPUT_RECORD pirBuffer,	//Address of the buffer for read datatbDWORDcInRecordsDWORD cInRecords,	//Number of records to readtbLPDWORDlpcReadLPDWORD lpcRead	//Address of number of records read
ReadConsoleInputBOOL00tbHANDLEhConsoleInputHANDLE hConsoleInput,	//Handle of a console input buffercbPINPUT_RECORD&irBufferpirBufferPINPUT_RECORD pirBuffer,	//Address of the buffer for read datatbDWORDcInRecordsDWORD cInRecords,	//Number of records to readtbLPDWORDlpcReadLPDWORD lpcRead	//Address of number of records read
ReadConsoleOutputAttributeBOOL00tbHANDLEhConsoleOutputHANDLE hConsoleOutput,	//Handle of a console screen buffercbLPWORDwAttributelpwAttributeLPWORD lpwAttribute,	//Address of buffer to receive attributestbDWORDcReadCellsDWORD cReadCells,	//Number of character cells to read fromtbCOORDcoordReadCoordCOORD coordReadCoord,	//Coordinates of first cell to read fromtbLPDWORDlpcNumberReadLPDWORD lpcNumberRead	//Address of number of cells read from
ReadConsoleOutputCharacterBOOL00tbHANDLEhConsoleOutputHANDLE hConsoleOutput,	//Handle of a console screen buffertbLPTSTRlpReadBufferLPTSTR lpReadBuffer,	//Address of buffer to receive characterstbDWORDcchReadDWORD cchRead,	//Number of character cells to read fromtbCOORDcoordReadCoordCOORD coordReadCoord,	//Coordinates of first cell to read fromtbLPDWORDlpcNumberReadLPDWORD lpcNumberRead	//Address of number of cells read from
ReadEventLogBOOL00tbHANDLEhEventLogHANDLE hEventLog,	//Handle of event logxbDWORDEVENTLOG_FORWARDS_READEVENTLOG_BACKWARDS_READEVENTLOG_SEEK_READEVENTLOG_SEQUENTIAL_READDWORD fdwRead,	//Specifies how to read logtbDWORDdwRecordNumberDWORD dwRecordNumber,	//Number of first recordtbLPVOIDlpvBufferLPVOID lpvBuffer,	//Address of buffer for read datatbDWORDcbBufferDWORD cbBuffer,	//Number of bytes to readtbDWORD *pcbReadDWORD *pcbRead,	//Number of bytes readtbDWORD *pcbRequiredDWORD *pcbRequired	//Number of bytes required for next record
ReadFileBOOL00tbHANDLEhFileHANDLE hFile,	//Handle of file to readtbLPVOIDlpBufferLPVOID lpBuffer,	//Address of buffer that receives datatbDWORDnNumberOfBytesToReadDWORD nNumberOfBytesToRead,	//Number of bytes to readtbLPDWORDlpNumberOfBytesReadLPDWORD lpNumberOfBytesRead,	//Address of number of bytes readtbLPOVERLAPPEDlpOverlappedLPOVERLAPPED lpOverlapped	//Address of structure for data
ReadFileExBOOL00tbHANDLEhFileHANDLE hFile,	//Handle of file to readtbLPVOIDlpBufferLPVOID lpBuffer,	//Address of buffertbDWORDnNumberOfBytesToReadDWORD nNumberOfBytesToRead,	//Number of bytes to readtbLPOVERLAPPEDlpOverlappedLPOVERLAPPED lpOverlapped,	//Address of offsettbLPOVERLAPPED_COMPLETION_ROUTINElpcrLPOVERLAPPED_COMPLETION_ROUTINE lpcr	//Address of completion routine
ReadPrinterBOOL00tbHANDLEhPrinterHANDLE hPrinter,	//Handle of printer objecttbLPVOIDlpBufLPVOID lpBuf,	//Address of array of bytes that receives datatbDWORDcbBufDWORD cbBuf,	//Size, in bytes, of arraytbLPDWORDlpdwBytesLPDWORD lpdwBytes	//Address of variable with number of bytes retrieved
ReadProcessMemoryBOOL00tbHANDLEhProcessHANDLE hProcess,	//Handle of the proc whose memory is readtbLPCVOIDlpBaseAddressLPCVOID lpBaseAddress,	//Address to start readingtbLPVOIDlpBufferLPVOID lpBuffer,	//Address of buffer to place read datatbDWORDcbReadDWORD cbRead,	//Number of bytes to readcbLPDWORDlpNumberOfBytesReadNULLLPDWORD lpNumberOfBytesRead	//Actual number of bytes read
RealizePaletteUINT00tbHDChdcHDC hdc	//Handle of device context
RectangleBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbintnLeftRectint nLeftRect,	//X-coord. of bounding rect. upper-left cornertbintnTopRectint nTopRect,	//Y-coord. of bounding rect. upper-left cornertbintnRightRectint nRightRect,	//X-coord. of bounding rect. lower-right cornertbintnBottomRectint nBottomRect	//Y-coord. of bounding rect. lower-right corner
RectInRegionBOOL00tbHRGNhrgnHRGN hrgn,	//Handle of regiontbCONST RECT *lprcCONST RECT *lprc	//Address of structure with rectangle
RectVisibleBOOL00tbHDChdcHDC hdc,	//Handle of the device contexttbCONST RECT *lprcCONST RECT *lprc	//Address of rectangle structure
RedrawWindowBOOL00cbHWNDhwndNULLHWND hwnd,	//Handle of windowtbCONST RECT *lprcUpdateCONST RECT *lprcUpdate,	//Address of structure with update rectanglecbHRGNhrgnUpdateNULLHRGN hrgnUpdate,	//Handle of update regionxbUINTRDW_ERASERDW_FRAMERDW_INTERNALPAINTRDW_INVALIDATERDW_NOERASERDW_NOFRAMERDW_NOINTERNALPAINTRDW_VALIDATERDW_ERASENOWRDW_UPDATENOWRDW_ALLCHILDRENRDW_NOCHILDRENUINT afuRedraw	//Array of redraw flags
RegCloseKeyLONG00tbHKEYhkeyHKEY hkey	//Handle of key to close
RegConnectRegistryLONG00cbLPTSTRlpszComputerNameNULLLPTSTR lpszComputerName,	//Address of name of remote computertbHKEYhkeyHKEY hkey,	//Predefined registry handletbPHKEYphkResultPHKEY phkResult	//Address of buffer for remote registry handle
RegCreateKeyLONG00cbHKEYhkeyHKEY_CLASSES_ROOTHKEY_CURRENT_USERHKEY_LOCAL_MACHINEHKEY_USERSHKEY hkey,	//Handle of an open keycbLPCTSTRlpszSubKeyNULLLPCTSTR lpszSubKey,	//Address of name of subkey to opentbPHKEYphkResultPHKEY phkResult	//Address of buffer for opened handle
RegDeleteKeyLONG00cbHKEYhkeyHKEY_CLASSES_ROOTHKEY_CURRENT_USERHKEY_LOCAL_MACHINEHKEY_USERSHKEY hkey,	//Handle of open keycbLPCTSTRlpszSubKeyNULLLPCTSTR lpszSubKey	//Address of name of subkey to delete
RegDeleteValueLONG00cbHKEYhkeyHKEY_CLASSES_ROOTHKEY_CURRENT_USERHKEY_LOCAL_MACHINEHKEY_USERSHKEY hkey,	//Handle of keycbLPTSTRlpszValueNULLLPTSTR lpszValue	//Address of value name
RegEnumKeyLONG00cbHKEYhkeyHKEY_CLASSES_ROOTHKEY_CURRENT_USERHKEY_LOCAL_MACHINEHKEY_USERSHKEY hkey,	//Handle of key to querytbDWORDiSubKeyDWORD iSubKey,	//Index of subkey to querytbLPTSTRlpszNameLPTSTR lpszName,	//Address of buffer for subkey nametbDWORDcchNameDWORD cchName	//Size of subkey buffer
RegEnumKeyExLONG00cbHKEYhkeyHKEY_CLASSES_ROOTHKEY_CURRENT_USERHKEY_LOCAL_MACHINEHKEY_USERSHKEY hkey,	//Handle of key to enumeratetbDWORDiSubkeyDWORD iSubkey,	//Index of subkey to enumeratetbLPTSTRlpszNameLPTSTR lpszName,	//Address of buffer for subkey namecbLPDWORD&cchNamelpcchNameLPDWORD lpcchName,	//Address for size of subkey buffercbLPDWORDNULLlpdwReservedLPDWORD lpdwReserved,	//ReservedcbLPTSTRlpszClassNULLLPTSTR lpszClass,	//Address of buffer for class stringcbLPDWORD&cchClasslpcchClassLPDWORD lpcchClass,	//Address for size of class buffercbPFILETIME&ftLastWritelpftLastWritePFILETIME lpftLastWrite	//Address for time key last written to
RegEnumValueLONG00cbHKEYhkeyHKEY_CLASSES_ROOTHKEY_CURRENT_USERHKEY_LOCAL_MACHINEHKEY_USERSHKEY hkey,	//Handle of key to querytbDWORDiValueDWORD iValue,	//Index of value to querytbLPTSTRlpszValueLPTSTR lpszValue,	//Address of buffer for value stringcbLPDWORD&cchValuelpcchValueLPDWORD lpcchValue,	//Address for size of value buffercbLPDWORDNULLlpdwReservedLPDWORD lpdwReserved,	//ReservedcbLPDWORD&dwTypelpdwTypeLPDWORD lpdwType,	//Address of buffer for type codecbLPBYTE&bDatalpbDataLPBYTE lpbData,	//Address of buffer for value datacbLPDWORD&cbDatalpcbDataLPDWORD lpcbData	//Address for size of data buffer
RegFlushKeyLONG00cbHKEYhkeyHKEY_CLASSES_ROOTHKEY_CURRENT_USERHKEY_LOCAL_MACHINEHKEY_USERSHKEY hkey	//Handle of key to write
RegGetKeySecurityLONG00tbHKEYhkeyHKEY hkey,	//Open handle of key to settbSECURITY_INFORMATIONSecInfSECURITY_INFORMATION SecInf,	//Descriptor contentscbPSECURITY_DESCRIPTOR&SecDescpSecDescPSECURITY_DESCRIPTOR pSecDesc,	//Address of descriptor for keycbLPDWORD&cbSecDesclpcbSecDescLPDWORD lpcbSecDesc	//Address of size of buffer and descriptor
RegisterClassATOM00tbCONSTWNDCLASS*lpwcCONST WNDCLASS *lpwc	//Address of structure with class data
RegisterClipboardFormatUINT00tbLPCTSTRlpszFormatLPCTSTR lpszFormat	//Address of name string
RegisterDialogClassesBOOL00tbHANDLEhinstHANDLE hinst	//Handle of application instance
RegisterEventSourceHANDLE00cbLPCTSTRlpszUNCServerNULLLPCTSTR lpszUNCServer,	//Server name for sourcetbLPCTSTRlpszSourceLPCTSTR lpszSource	//Source name for registered handle
RegisterHotKeyBOOLi00tbHWNDhwndHWND hwnd,	//Window to receive hot-key notificationtbintidHotKeyint idHotKey,	//Identifier of hot keyxbUINTMOD_ALTMOD_CONTROLMOD_SHIFTUINT fuModifiers,	//Key-modifier flagstbUINTuVirtKeyUINT uVirtKey	//Virtual-key code
RegisterWindowMessageUINT00tbLPCTSTRlpszLPCTSTR lpsz	//Address of message string
RegisterWindowMessageUINT00tbLPCTSTRlpszLPCTSTR lpsz	//Address of message string
RegLoadKeyLONG00cbHKEYhkeyHKEY_LOCAL_MACHINEHKEY_USERSHKEY hkey,	//Handle of open keytbLPCTSTRlpszSubKeyLPCTSTR lpszSubKey,	//Address of name of subkeytbLPCTSTRlpszFileLPCTSTR lpszFile	//Address of filename for registry information
RegNotifyChangeKeyValueLONG00cbHKEYhkeyHKEY_CLASSES_ROOTHKEY_CURRENT_USERHKEY_LOCAL_MACHINEHKEY_USERSHKEY hkey,	//Handle of key to watchcbBOOLfWatchSubTreeTRUEFALSEBOOL fWatchSubTree,	//Flag for subkey notificationxbDWORDREG_NOTIFY_CHANGE_NAMEREG_NOTIFY_CHANGE_ATTRIBUTESREG_NOTIFY_CHANGE_LAST_SETREG_NOTIFY_CHANGE_SECURITYDWORD fdwNotifyFilter,	//Changes to be reportedcbHANDLEhEventTRUEFALSEHANDLE hEvent,	//Handle of signaled eventcbBOOLfAsyncTRUEFALSEBOOL fAsync	//Flag for asynchronous reporting
RegOpenKeyLONG00cbHKEYhkeyHKEY_CLASSES_ROOTHKEY_CURRENT_USERHKEY_LOCAL_MACHINEHKEY_USERSHKEY hkey,	//Handle of open keycbLPCTSTRlpszSubKeyNULLLPCTSTR lpszSubKey,	//Address of name of subkey to opencbPHKEY&hkResultphkResultPHKEY phkResult	//Address of handle of open key
RegOpenKeyExLONG00cbHKEYhkeyHKEY_CLASSES_ROOTHKEY_CURRENT_USERHKEY_LOCAL_MACHINEHKEY_USERSHKEY hkey,	//Handle of open keycbLPCTSTRlpszSubKeyNULLLPCTSTR lpszSubKey,	//Address of name of subkey to opencbDWORD0dwReservedDWORD dwReserved,	//ReservedxbREGSAMKEY_ALL_ACCESSKEY_CREATE_LINKKEY_CREATE_SUB_KEYKEY_ENUMERATE_SUB_KEYSKEY_EXECUTEKEY_NOTIFYKEY_QUERY_VALUEKEY_READKEY_SET_VALUEKEY_WRITEREGSAM samDesired	//Security access masktbPHKEYphkResultPHKEY phkResult	//Address of handle of open key
RegQueryInfoKeyLONG00cbHKEYhkeyHKEY_CLASSES_ROOTHKEY_CURRENT_USERHKEY_LOCAL_MACHINEHKEY_USERSHKEY hkey,	//Handle of key to querytbLPTSTRlpszClassLPTSTR lpszClass,	//Address of buffer for class stringtbLPDWORDlpcchClassLPDWORD lpcchClass,	//Address of size of class string buffercbLPDWORDNULLlpdwReservedLPDWORD lpdwReserved,	//ReservedtbLPDWORDlpcSubKeysLPDWORD lpcSubKeys,	//Address of buffer for number of subkeystbLPDWORDlpcchMaxSubkeyLPDWORD lpcchMaxSubkey,	//Address of buffer for longest subkey name lengthtbLPDWORDlpcchMaxClassLPDWORD lpcchMaxClass,	//Address of buffer for longest class string lengthtbLPDWORDlpcValuesLPDWORD lpcValues,	//Address of buffer for number of value entriestbLPDWORDlpcchMaxValueNameLPDWORD lpcchMaxValueName,	//Address of buffer for longest value name lengthtbLPDWORDlpcbMaxValueDataLPDWORD lpcbMaxValueData,	//Address of buffer for longest value data lengthtbLPDWORDlpcbSecurityDescriptorLPDWORD lpcbSecurityDescriptor,	//Address of buffer for security descriptor lengthtbPFILETIMElpftLastWriteTimePFILETIME lpftLastWriteTime	//Address of buffer for last write time
RegQueryValueLONG00cbHKEYhkeyHKEY_CLASSES_ROOTHKEY_CURRENT_USERHKEY_LOCAL_MACHINEHKEY_USERSHKEY hkey,	//Handle of key to querycbLPCTSTRlpszSubKeyNULLLPCTSTR lpszSubKey,	//Address of name of subkey to querycbLPTSTRlpszValueNULLLPTSTR lpszValue,	//Address of buffer for returned stringcbPLONG&cbValuepcbValuePLONG pcbValue	//Address of buffer for size of returned string
RegQueryValueExLONG00cbHKEYhkeyHKEY_CLASSES_ROOTHKEY_CURRENT_USERHKEY_LOCAL_MACHINEHKEY_USERSHKEY hkey,	//Handle of key to querytbLPTSTRlpszValueNameLPTSTR lpszValueName,	//Address of name of value to querycbLPDWORDNULLlpdwReservedLPDWORD lpdwReserved,	//ReservedcbLPDWORD&dwTypelpdwTypeLPDWORD lpdwType,	//Address of buffer for value typecbLPBYTE&bDatalpbDataLPBYTE lpbData,	//Address of data buffercbLPDWORD&cbDatalpcbDataLPDWORD lpcbData	//Address of data buffer size
RegReplaceKeyLONG00cbHKEYhkeyHKEY_CLASSES_ROOTHKEY_CURRENT_USERHKEY_LOCAL_MACHINEHKEY_USERSHKEY hkey,	//Handle of open keycbLPCTSTRlpszSubKeyNULLLPCTSTR lpszSubKey,	//Address of name of subkeytbLPCTSTRlpszNewFileLPCTSTR lpszNewFile,	//Address of filename for file with new datatbLPCTSTRlpszBackupFileLPCTSTR lpszBackupFile	//Address of filename for backup file
RegRestoreKeyLONG00cbHKEYhkeyHKEY_CLASSES_ROOTHKEY_CURRENT_USERHKEY_LOCAL_MACHINEHKEY_USERSHKEY hkey,	//Handle of key where restore beginstbLPCTSTRlpszFileLPCTSTR lpszFile,	//Address of filename containing saved treexbDWORDREG_WHOLE_HIVE_VOLATILE DWORD fdw	//Optional flags
RegSaveKeyLONG00cbHKEYhkeyHKEY_CLASSES_ROOTHKEY_CURRENT_USERHKEY_LOCAL_MACHINEHKEY_USERSHKEY hkey,	//Handle of key where save beginstbLPCTSTRlpszFileLPCTSTR lpszFile,	//Address of filename to save tocbLPSECURITY_ATTRIBUTESlpsaNULLLPSECURITY_ATTRIBUTES lpsa	//Address of security structure
RegSetKeySecurityLONG00tbHKEYhkeyHKEY hkey,	//Open handle of key to settbSECURITY_INFORMATIONsiSECURITY_INFORMATION si,	//Descriptor contentstbPSECURITY_DESCRIPTORpsdPSECURITY_DESCRIPTOR psd	//Address of descriptor to for key
RegSetValueLONG00cbHKEYhkeyHKEY_CLASSES_ROOTHKEY_CURRENT_USERHKEY_LOCAL_MACHINEHKEY_USERSHKEY hkey,	//Handle of key to set value forcbLPCTSTRlpszSubKeyNULL""LPCTSTR lpszSubKey,	//Address of subkey namecbDWORDREG_SZfdwTypeDWORD fdwType,	//Type of valuetbLPCTSTRlpszDataLPCTSTR lpszData,	//Address of value datatbDWORDcbDataDWORD cbData	//Size of value data
RegSetValueExLONG00cbHKEYhkeyHKEY_CLASSES_ROOTHKEY_CURRENT_USERHKEY_LOCAL_MACHINEHKEY_USERSHKEY hkey,	//Handle of key to set value forcbLPCTSTRlpszValueNameNULLLPCTSTR lpszValueName,	//Address of value to setcbDWORD0dwReservedDWORD dwReserved,	//ReservedrbDWORDREG_BINARYREG_DWORDREG_DWORD_LITTLE_ENDIANREG_DWORD_BIG_ENDIANREG_EXPAND_SZREG_LINKREG_MULTI_SZREG_NONEREG_RESOURCE_LISTREG_SZDWORD fdwType,	//Flag for value typetbCONST BYTE *lpbDataCONST BYTE * lpbData,	//Address of value datatbDWORDcbDataDWORD cbData	//Size of value data
RegUnLoadKeyLONG00cbHKEYhkeyHKEY_LOCAL_MACHINEHKEY_USERSHKEY hkey,	//Handle of open keytbLPCTSTRlpszSubKeyLPCTSTR lpszSubKey	//Address of name of subkey to unload
ReleaseMutexBOOL00tbHANDLEhMutexHANDLE hMutex	//Handle of mutex object
ReleaseSemaphoreBOOL00tbHANDLEhSemaphoreHANDLE hSemaphore,	//Handle of the semaphore objecttbLONGcReleaseCountLONG cReleaseCount,	//Amount to add to current countcbLPLONGlplPreviousCountNULL&lPreviousCountLPLONG lplPreviousCount	//Address of previous count
RemoveDirectoryBOOL00tbLPCTSTRlpszDirLPCTSTR lpszDir	//Address of directory to remove
RemoveFontResourceBOOL00tbLPCTSTRlpFileNameLPCTSTR lpFileName	//Address of font-resource filename
RemoveMenuBOOL00tbHMENUhmenuHMENU hmenu,	//Handle of menutbUINTuItemUINT uItem,	//Menu item identifier or positionrbUINTMF_BYCOMMANDMF_BYPOSITIONUINT fuFlags	//Menu item flag
RemovePropHANDLE00tbHWNDhwndHWND hwnd,	//Handle of windowtbLPCTSTRlpszLPCTSTR lpsz	//Atom or address of string
ReplaceTextHWND00tbLPFINDREPLACElpfrLPFINDREPLACE lpfr	//Pointer to structure with initialization data
ReplyMessageBOOL00tbLRESULTlResultLRESULT lResult	//Message-dependent reply
ReportEventBOOL00tbHANDLEhEventSourceHANDLE hEventSource,	//Handle returned by RegisterEventSourcerbWORDEVENTLOG_ERROR_TYPEEVENTLOG_WARNING_TYPEEVENTLOG_INFORMATION_TYPEEVENTLOG_AUDIT_SUCCESSEVENTLOG_AUDIT_FAILUREWORD fwEventType,	//Event type to logtbWORDfwCategoryWORD fwCategory,	//Event categorytbDWORDIDEventDWORD IDEvent,	//Event identifiercbPSIDpUserSidNULLPSID pUserSid,	//User security identifier (optionaltbWORDcStringsWORD cStrings,	//Number of strings to merge with messagetbDWORDcbDataDWORD cbData,	//Size of raw (binary) data (in bytescbLPCTSTR *plpszStringsNULLLPCTSTR *plpszStrings,	//Array of strings to merge with messagecbLPVOIDlpvDataNULLLPVOID lpvData	//Address of binary data
ResetDCHDC00tbHDChdcHDC hdc,	//Handle of device contexttbCONST DEVMODE *lpInitDataCONST DEVMODE * lpInitData	//Address of structure with DC information
ResetEventBOOL00tbHANDLEhEventHANDLE hEvent	//Handle of event object
ResetPrinterBOOL00tbHANDLEhPrinterHANDLE hPrinter,	//Printer handletbLPPRINTER_DEFAULTSpDefaultLPPRINTER_DEFAULTS pDefault	//Address of printer defaults structure
ResizePaletteBOOL00tbHPALETTEhpalHPALETTE hpal,tbUINTnEntriesUINT nEntries
RestoreDCBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbintnSavedDCint nSavedDC	//Specifies state to be restored
ResumeThreadDWORD00tbHANDLEhThreadHANDLE hThread	//Identifies thread to restart
ReuseDDElParamLONG00tbLONGlParamLONG lParam,	//Posted lParam to be reusedtbUINTuMsgInUINT uMsgIn,	//Identifier of received messagetbUINTuMsgOutUINT uMsgOut,	//Identifier of posted messagetbUINTuLowUINT uLow,	//Low-order word of new lParamtbUINTuHighUINT uHigh	//High-order word of new lParam
SaveDCint00tbHDChdcHDC hdc	//Handleof device context
ScaleViewportExtExBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbintXnumint Xnum,	//Horizontal multiplicandtbintXdenomint Xdenom,	//Horizontal divisortbintYnumint Ynum,	//Vertical multiplicandtbintYdenomint Ydenom,	//Vertical divisortbLPSIZElpSizeLPSIZE lpSize	//Address of previous viewport extents
ScaleWindowExtExBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbintXnumint Xnum,	//Horizontal multiplicandtbintXdenomint Xdenom,	//Horizontal divisortbintYnumint Ynum,	//Vertical multiplicandtbintYdenomint Ydenom,	//Vertical divisorcbLPSIZElpSizeNULLLPSIZE lpSize	//Address of previous window extents
ScheduleJobBOOL00tbHANDLEhPrinterHANDLE hPrinter,	//Handle of printer objecttbDWORDdwJobIDDWORD dwJobID	//Job-identifier value
ScreenSaverConfigureDialogBOOL00tbHWNDhwndDlgHWND hwndDlg,	//Handle of dialog boxtbUINTuMsgUINT uMsg,	//MessagetbWPARAMwParamWPARAM wParam,	//First message parametertbLPARAMlParamLPARAM lParam	//Second message parameter
ScreenSaverProcLONG00tbHWNDhwndHWND hwnd,	//Handle of screen saver windowtbUINTuMsgUINT uMsg,	//MessagetbWPARAMwParamWPARAM wParam,	//First message parametertbLPARAMlParamLPARAM lParam	//Second message parameter
ScreenToClientBOOL00tbHWNDhwndHWND hwnd,	//Window handle for source coordinatescbLPPOINT&PointlpPointLPPOINT lpPoint	//Address of structure containing coordinates
ScrollConsoleScreenBufferBOOL00tbHANDLEhConsoleOutputHANDLE hConsoleOutput,	//Handle of a console screen buffercbPSMALL_RECTpsrctSourceRectPSMALL_RECT psrctSourceRect,	//Address of screen buffer rect. to movecbPSMALL_RECTpsrctClipRectNULLPSMALL_RECT psrctClipRect,	//Address of affected screen buffer rect.tbCOORDcoordDestOriginCOORD coordDestOrigin,	//New location of screen buffer rect.tbPCHAR_INFOpchiFillPCHAR_INFO pchiFill	//Address of fill character and color
ScrollDCBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbintdxint dx,	//Horizontal scroll unitstbintdyint dy,	//Vertical scroll unitstbCONST RECT *lprcScrollCONST RECT *lprcScroll,	//Address of structure for scrolling rectangletbCONST RECT *lprcClipCONST RECT *lprcClip,	//Address of structure for clipping rectangletbHRGNhrgnUpdateHRGN hrgnUpdate,	//Handle of scrolling regiontbLPRECTlprcUpdateLPRECT lprcUpdate	//Address of structure for update rectangle
ScrollWindowBOOL00tbHWNDhwndHWND hwnd,	//Handle of window to scrolltbintdxint dx,	//Amount of horizontal scrollingtbintdyint dy,	//Amount of vertical scrollingtbCONST RECT *lprcScrollCONST RECT * lprcScroll,	//Address of structure with scroll rectangletbCONST RECT *lprcClipCONST RECT * lprcClip	//Address of structure with clip rectangle
ScrollWindowExint00tbHWNDhwndHWND hwnd,	//Handle of window to scrolltbintdxint dx,	//Amount of horizontal scrollingtbintdyint dy,	//Amount of vertical scrollingtbCONST RECT *lprcScrollCONST RECT *lprcScroll,	//Address of structure with scroll rectangletbCONST RECT *lprcClipCONST RECT *lprcClip,	//Address of structure with clip rectangletbHRGNhrgnUpdateHRGN hrgnUpdate,	//Handle of update regiontbLPRECTlprcUpdateLPRECT lprcUpdate,	//Address of structure for update rectanglerbUINTSW_ERASESW_INVALIDATESW_SCROLLCHILDRENUINT fuScroll	//Scrolling flags
SearchPathDWORD00cbLPCTSTRlpszPathNULLLPCTSTR lpszPath,	//Address of the search pathtbLPCTSTRlpszFileLPCTSTR lpszFile,	//Address of the filenamecbLPCTSTRlpszExtensionNULLLPCTSTR lpszExtension,	//Address of the extensiontbDWORDcchReturnBufferDWORD cchReturnBuffer,	//Size, in characters, of the buffertbLPTSTRlpszReturnBufferLPTSTR lpszReturnBuffer,	//Address of buffer for found filenametbLPTSTR *plpszFilePartLPTSTR *plpszFilePart	//Address of pointer to file part
SelectClipPathBOOL00tbHDChdcHDC hdc,	//Handle of device contextrbintRGN_ANDRGN_COPYRGN_DIFFRGN_ORRGN_XORint iMode	//Clipping mode
SelectClipRgnint00tbHDChdcHDC hdc,	//Handle of device contexttbHRGNhrgnHRGN hrgn	//Handle of region to be selected
SelectObjectHGDIOBJ00tbHDChdcHDC hdc,	//Handle of DCtbHGDIOBJhgdiobjHGDIOBJ hgdiobj	//Handle of object
SelectPaletteHPALETTE00tbHDChdcHDC hdc,	//Handle of device contexttbHPALETTEhpalHPALETTE hpal,	//Handle of logical color-palettecbBOOLbForceBackgroundTRUEFALSEBOOL bForceBackground	//Foreground/background mode
SendAsyncProcVOIDCALLBACK00tbHWNDhwndHWND  hwnd,	// handle of destination windowtbUINTuMsgUINT  uMsg,	// messagetbDWORDdwDataDWORD  dwData,	// application-defined valuetbRESULTlResultRESULT  lResult	// result of message processing
SendDlgItemMessageLONG00tbHWNDhwndDlgHWND hwndDlg,	//Handle of dialog boxtbintidControlint idControl,	//Identifier of controltbUINTuMsgUINT uMsg,	//Message to sendtbWPARAMwParamWPARAM wParam,	//First message parametertbLPARAMlParamLPARAM lParam	//Second message parameter
SendMessageLRESULT00tbHWNDhwndHWND hwnd,	//Handle of destination windowtbUINTuMsgUINT uMsg,	//Message to sendtbWPARAMwParamWPARAM wParam,	//First message parametertbLPARAMlParamLPARAM lParam	//Second message parameter
SendMessageCallbackBOOL00tbHWNDhwndHWND hwnd,	//Handle of destination windowtbUINTuMsgUINT uMsg,	//Message to sendtbWPARAMwParamWPARAM wParam,	//First message parametertbLPARAMlParamLPARAM lParam,	//Second message parametertbSENDASYNCPROClpResultCallBackSENDASYNCPROC lpResultCallBack,	//Function to receive message valuetbDWORDdwDataDWORD dwData	//Value to pass to callback function
SendMessageTimeoutLRESULT00tbHWNDhwndHWND hwnd,	//Handle of destination windowtbUINTuMsgUINT uMsg,	//Message to sendtbWPARAMwParamWPARAM wParam,	//First message parametertbLPARAMlParamLPARAM lParam,	//Second message parameterxbUINTSMTO_ABORTIFHUNGSMTO_BLOCKSMTO_NORMALUINT fuFlags,	//How to send the messagetbUINTuTimeoutUINT uTimeout,	//Time-out durationtbLPDWORDlpdwResultLPDWORD lpdwResult	//Return value for synchronous call
SendNotifyMessageBOOL00tbHWNDhwndHWND hwnd,	//Handle of destination windowtbUINTuMsgUINT uMsg,	//Message to sendtbWPARAMwParamWPARAM wParam,	//First message parametertbLPARAMlParamLPARAM lParam	//Second message parameter
ServiceMainVOID00tbDWORDdwArgcDWORD dwArgc,	//Number of argumentstbLPTSTR *lpszArgvLPTSTR *lpszArgv	//Address of array of argument string pointers
SetAbortProcint00tbHDChdcHDC hdc,	//Handle of device contexttbABORTPROClpAbortProcABORTPROC  lpAbortProc	//Address of abort function
SetAclInformationBOOL00tbPACLpAclPACL pAcl,	//Address of access-control listtbLPVOIDlpvAclInfoLPVOID lpvAclInfo,	//Address of ACL informationtbDWORDcbAclInfoDWORD cbAclInfo,	//Size of ACL informationtbACL_INFORMATION_CLASSaclicACL_INFORMATION_CLASS aclic	//Specifies class of requested info
SetActiveWindowHWND00tbHWNDhwndHWND hwnd	//Handle of window to activate
SetArcDirectionint00tbHDChdcHDC hdc,	//Identifies the device contextrbintAD_COUNTERCLOCKWISEAD_CLOCKWISEint ArcDirection	//Specifies the new arc direction
SetBitmapBitsLONG00tbHBITMAPhbmpHBITMAP hbmp,	//Handle of bitmaptbDWORDcBytesDWORD cBytes,	//Number of bytes in bitmap arraytbCONST VOID *lpBitsCONST VOID *lpBits	//Address of array with bitmap bits
SetBitmapDimensionExBOOL00tbHBITMAPhBitmapHBITMAP hBitmap,	//Handle of bitmaptbintnWidthint nWidth,	//Bitmap width in .01-mm unitstbintnHeightint nHeight,	//Bitmap height in .01-mm unitscbLPSIZElpSizeNULLLPSIZE lpSize	//Address of structure for original dimensions
SetBkColorCOLORREF00tbHDChdcHDC hdc,	//Handle of device contexttbCOLORREFcrColorCOLORREF crColor	//Background color value
SetBkModeint00tbHDChdcHDC hdc,	//Handle of device contextrbintOPAQUETRANSPARENTint iBkMode	//Flag specifying background mode
SetBoundsRectUINT00tbHDChdcHDC hdc,	//Handle of device contextcbCONST RECT *lprcBoundsNULLCONST RECT *lprcBounds,	//Address of structure for rectanglexbUINTDCB_ACCUMULATEDCB_DISABLEDCB_ENABLEDCB_RESETUINT flags	//Controls rectangle combination
SetBrushOrgExBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbintnXOrgint nXOrg,	//X-coordinate of new origintbintnXOrgint nXOrg,	//X-coordinate of new origincbLPPOINTlppt&ptNULLLPPOINT lppt	//Points to previous brush origin
SetCaptureHWND00tbHWNDhwndHWND hwnd	//Handle of window to receive mouse capture
SetCaretBlinkTimeBOOL00tbUINTwMSecondsUINT wMSeconds	//Blink time, in milliseconds
SetCaretPosBOOL00tbintnXintnX,	//Horizontal positiontbintnYint nY	//Vertical position
SetClassLongDWORD00tbHWNDhwndHWND hwnd,	//Handle of windowcbintnIndexGCL_CBCLSEXTRAGCL_CBWNDEXTRAGCL_HBRBACKGROUNDGCL_HCURSORGCL_HICONGCL_HMODULEGCL_MENUNAMEGCL_STYLEGCL_WNDPROCint nIndex,	//Index of value to changetbLONGlNewValLONG lNewVal	//New value
SetClassWordWORD00tbHWNDhwndHWND hwnd,	//Handle of windowtbintnIndexint nIndex,	//Index of value to changetbWORDwNewWordWORD wNewWord	//New value
SetClipboardDataHANDLE00tbUINTuFormatUINT uFormat,	//Clipboard formatcbHANDLEhDataNULLHANDLE hData	//Data handle
SetClipboardViewerHWND00tbHWNDhwndHWND hwnd	//Handle of clipboard viewer
SetColorAdjustmentBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbCONST COLORADJUSTMENT *lpcaCONST COLORADJUSTMENT * lpca	//Address of coloradjustment structure
SetCommBreakBOOL00tbHANDLEhCommDevHANDLE hCommDev	//Handle of the communications device
SetCommMaskBOOL00tbHANDLEhCommDevHANDLE hCommDev,	//Handle of the communications devicexbDWORDEV_BREAKEV_CTSEV_DSREV_ERREV_RINGEV_RLSDEV_RXCHAREV_RXFLAGEV_TXEMPTYDWORD fdwEvtMask,	//Mask that identifies enabled events
SetCommStateBOOL00tbHANDLEhCommDevHANDLE hCommDev,	//Handle of the communications devicetbLPDCBlpdcbLPDCB lpdcb	//Address of device control block structure
SetCommTimeoutsBOOL00tbHANDLEhCommDevHANDLE hCommDev,	//Handle of the communications devicetbLPCOMMTIMEOUTSlpctmoLPCOMMTIMEOUTS lpctmo	//Address of comm timeout structure
SetComputerNameBOOL00tbLPCTSTRlpszNameLPCTSTR lpszName	//Address of new computer name
SetConsoleActiveScreenBufferBOOL00tbHANDLEhConsoleOutputHANDLE hConsoleOutput	//Handle of console screen buffer
SetConsoleCPBOOL00tbUINTIDCodePageUINT IDCodePage	//Code page to set
SetConsoleCtrlHandlerBOOL00cbPHANDLER_ROUTINEpHandlerRoutineNULLPHANDLER_ROUTINE pHandlerRoutine,	//Address of handler functioncbPHANDLER_ROUTINEpHandlerRoutineTRUEFALSEPHANDLER_ROUTINE pHandlerRoutine	//Address of handler function
SetConsoleCursorInfoBOOL00tbHANDLEhConsoleOutputHANDLE hConsoleOutput,	//Handle of console screen buffertbPCONSOLE_CURSOR_INFOpcciPCONSOLE_CURSOR_INFO pcci	//Address of cursor information
SetConsoleCursorPositionBOOL00tbHANDLEhConsoleOutputHANDLE hConsoleOutput,	//Handle of console screen buffertbCOORDcoordCursorCOORD coordCursor	//New cursor position coordinates
SetConsoleModeBOOL00tbHANDLEhConsoleHANDLE hConsole,	//Handle of console input or screen bufferxbDWORDENABLE_LINE_INPUTENABLE_ECHO_INPUTENABLE_PROCESSED_INPUTENABLE_WINDOW_INPUTENABLE_MOUSE_INPUTENABLE_PROCESSED_OUTPUTENABLE_WRAP_AT_EOL_OUTPUTDWORD fdwMode	//Input or output mode to set
SetConsoleOutputCPBOOL00tbUINTIDCodePageUINT IDCodePage	//Code page to set
SetConsoleScreenBufferSizeBOOL00tbHANDLEhConsoleOutputHANDLE hConsoleOutput,	//Handle of console screen buffertbCOORDcoordSizeCOORD coordSize	//New size in character rows and cols.
SetConsoleTextAttributeBOOL00tbHANDLEhConsoleOutputHANDLE hConsoleOutput,	//Handle of console screen bufferxbWORDFOREGROUND_BLUEFOREGROUND_GREENFOREGROUND_REDFOREGROUND_INTENSITYBACKGROUND_BLUEBACKGROUND_GREENBACKGROUND_REDBACKGROUND_INTENSITYWORD wAttr,	//Text and background colors
SetConsoleTitleBOOL00tbLPTSTRlpszTitleLPTSTR lpszTitle	//Address of new title
SetConsoleWindowInfoBOOL00tbHANDLEhConsoleOutputHANDLE hConsoleOutput,	//Handle of console screen buffercbBOOLfAbsoluteTRUEFALSEBOOL fAbsolute,	//Coordinate type flagtbPSMALL_RECTpsrctWindowRectPSMALL_RECT psrctWindowRect	//Address of new window rectangle
SetCurrentDirectoryBOOL00tbLPCTSTRlpszCurDirLPCTSTR lpszCurDir	//Address of name of new current directory
SetCursorHCURSOR00cbHCURSORhcurNULLHCURSOR hcur	//Handle of cursor
SetCursorPosBOOL00tbintXintX,	//Horizontal positiontbintYint Y	//Vertical position
SetDebugErrorLevelVOID00rbDWORD0SLE_ERRORSLE_MINORERRORSLE_WARNINGDWORD dwLevel	//Debugging error level
SetDIBColorTableUINT00tbHDChdcHDC hdc,	//Handle of device context whose DIB is of interesttbUINTuStartIndexUINT uStartIndex,	//Color table index of first entry to settbUINTcEntriesUINT cEntries,	//Number of color table entries to settbRGBQUAD *pColorsRGBQUAD *pColors	//Pointer to array of color table entries
SetDIBitsint00tbHDChdcHDC hdc,	//Handle of device contexttbHBITMAPhbmpHBITMAP hbmp,	//Handle of bitmaptbUINTuStartScanUINT uStartScan,	//Starting scan linetbUINTcScanLinesUINT cScanLines,	//Number of scan linestbCONST VOID *lpvBitsCONST VOID * lpvBits,	//Array of bitmap bitstbCONST BITMAPINFO * lpbmiCONST BITMAPINFO * lpbmi,	//Address of structure with bitmap datarbUINTDIB_PAL_COLORSDIB_RGB_COLORSDIB_PAL_INDICESUINT fuColorUse	//Type of color indices to use
SetDIBitsToDeviceint00tbHDChdcHDC hdc,	//Handle of device contexttbintXDestint XDest,	//X-coordinate of upper left corner of dest. rect.tbintYDestint YDest,	//Y-coordinate of upper left corner of dest. rect.tbDWORDdwWidthDWORD dwWidth,	//Source rectangle widthtbDWORDdwHeightDWORD dwHeight,	//Source rectangle heighttbintXSrcint XSrc,	//X-coordinate of lower left corner of source rect.tbintYSrcint YSrc,	//Y-coordinate of lower left corner of source rect.tbUINTuStartScanUINT uStartScan,	//First scan line in arraytbUINTcScanLinesUINT cScanLines,	//Number of scan linestbCONST VOID * lpvBitsCONST VOID * lpvBits,	//Address of array with DIB bitstbCONST BITMAPINFO *lpbmiCONST BITMAPINFO * lpbmi,	//Address of structure with bitmap info.tbUINTfuColorUseUINT fuColorUse	//RGB or palette indices
SetDlgItemIntBOOL00tbHWNDhwndDlgHWND hwndDlg,	//Handle of dialog boxtbintidControlint idControl,	//Identifier of controltbUINTuValueUINT uValue,	//Value to setcbBOOLfSignedTRUEFALSEBOOL fSigned	//Signed or unsigned indicator
SetDlgItemTextBOOL00tbHWNDhwndDlgHWND hwndDlg,	//Handle of dialog boxtbintidControlint idControl,	//Identifier of controltbLPCTSTRlpszLPCTSTR lpsz	//Text to set
SetDoubleClickTimeBOOL00tbUINTuIntervalUINT uInterval	//Double-click interval
SetEndOfFileBOOL00tbHANDLEhFileHANDLE hFile	//Handle of file whose EOF is to be set
SetEnhMetaFileBitsHENHMETAFILE00tbUINTcbBufferUINT cbBuffer,	//Buffer sizetbCONST BYTE * lpDataCONST BYTE * lpData	//Buffer that contains enhanced metafile data
SetEnvironmentVariableBOOL00tbLPCTSTRlpszNameLPCTSTR lpszName,	//Address of environment variable namecbLPCTSTRlpszValueNULLLPCTSTR lpszValue	//Address of new value for variable
SetErrorModeUINT00xbUINTSEM_FAILCRITICALERRORSSEM_NOGPFAULTERRORBOXSEM_NOOPENFILEERRORBOXUINT fuErrorMode	//Error mode
SetEventBOOL00tbHANDLEhEventHANDLE hEvent	//Handle of event object
SetFileAttributesBOOL00tbLPCTSTRlpFileNameLPCTSTR lpFileName,	//Address of filenamexbDWORDFILE_ATTRIBUTE_ARCHIVEFILE_ATTRIBUTE_NORMALFILE_ATTRIBUTE_HIDDENFILE_ATTRIBUTE_READONLYFILE_ATTRIBUTE_SYSTEMFILE_ATTRIBUTE_TEMPORARYFILE_ATTRIBUTE_ATOMIC_WRITEFILE_ATTRIBUTE_XACTION_WRITEDWORD dwFileAttributes	//Address of attributes to set
SetFilePointerDWORD00tbHANDLEhFileHANDLE hFile,	//Handle of filetbLONGlDistanceToMoveLONG lDistanceToMove,	//Number of bytes to move file pointertbPLONGlpDistanceToMoveHighPLONG lpDistanceToMoveHigh,	//Address of high-order word of distance to moverbDWORDFILE_BEGINFILE_CURRENTFILE_ENDDWORD dwMoveMethod	//How to move
SetFileSecurityBOOL00tbLPCTSTRlpszFileLPCTSTR lpszFile,	//Address of string for filenametbSECURITY_INFORMATIONsiSECURITY_INFORMATION si,	//Type of information to setcbPSECURITY_DESCRIPTOR&sdpsdPSECURITY_DESCRIPTOR psd	//Address of security descriptor
SetFileTimeBOOL00tbHANDLEhFileHANDLE hFile,	//Identifies the filecbCONST FILETIME *lpftCreationNULLCONST FILETIME * lpftCreation,	//Time the file was createdcbCONST FILETIME *lpftLastAccessNULLCONST FILETIME * lpftLastAccess,	//Time the file was last accessedcbCONST FILETIME *lpftLastWriteNULLCONST FILETIME * lpftLastWrite	//Time the file was last written
SetFocusHWND00cbHWNDhwndNULLHWND hwnd	//Handle of window to receive focus
SetForegroundWindowBOOL00tbHWNDhwndHWND hwnd	//Handle of window to bring to foreground
SetFormBOOL00tbHANDLEhPrinterHANDLE hPrinter,	//Handle of printer objecttbLPTSTRlpszFormLPTSTR lpszForm,	//Address of form namecbDWORD1dwLevelDWORD dwLevel,	//Structure leveltbLPBYTElpbFormLPBYTE lpbForm	//Address of structure array
SetGraphicsModeint00tbHDChdcHDC hdc,	//Handle of the device contextrbintGM_COMPATIBLEGM_ADVANCEDint iMode	//Graphics mode
SetHandleCountUINT00tbUINTcHandlesUINT cHandles	//Number of file handles needed
SetJobBOOL00tbHANDLEhPrinterHANDLE hPrinter,	//Handle of printer objecttbDWORDdwJobDWORD dwJob,	//Job-identification valuerbDWORD012DWORD dwLevel,	//Structure leveltbLPBYTElpbJobLPBYTE lpbJob,	//Address of job info structuresrbDWORDJOB_CONTROL_CANCELJOB_CONTROL_PAUSEJOB_CONTROL_RESTARTJOB_CONTROL_RESUMEDWORD dwCommand,	//Job-command value
SetKernelObjectSecurityBOOL00tbHANDLEhObjectHANDLE hObject,	//Handle of objecttbSECURITY_INFORMATIONsiSECURITY_INFORMATION si,	//Type of information to setcbPSECURITY_DESCRIPTOR&sdpsdPSECURITY_DESCRIPTOR psd	//Address of security descriptor
SetKeyboardStateBOOL00tbLPBYTElpbKeyStateLPBYTE lpbKeyState	//Address of array with virtual-key codes
SetLastErrorVOID00tbDWORDfdwErrorDWORD fdwError	//Per-thread error code
SetLastErrorExVOID00tbDWORDfdwErrorDWORD fdwError,	//Per-thread error coderbDWORDSLE_ERRORSLE_MINORERRORSLE_WARNING0DWORD fdwType	//Error type
SetLocaleInfoBOOL00tbLCIDLCIDLCIDLCID,	// locale identifiertbLCTYPELCTypeLCTYPE  LCType,	// type of information to settbLPCTSTRlpLCDataLPCTSTR  lpLCData	// pointer to information to set
SetLocalTimeBOOL00tbCONSTSYSTEMTIME*lpstCONST SYSTEMTIME * lpst	//Address of local time to set
SetMailslotInfoBOOL00tbHANDLEhMailslotHANDLE hMailslot,	//Mailslot handlerbDWORD0MAILSLOT_WAIT_FOREVERDWORD dwReadTimeout	//Read time-out
SetMapModeint00tbHDChdcHDC hdc,	//Handle of device contextrbintMM_ANISOTROPICMM_HIENGLISHMM_HIMETRICMM_ISOTROPICMM_LOENGLISHMM_LOMETRICMM_TEXTMM_TWIPSint fnMapMode	//New mapping mode
SetMapperFlagsDWORD00tbHDChdcHDC hdc,	//Handle of device contexttbDWORDdwFlagDWORD dwFlag	//Font-mapper flag
SetMenuBOOL00tbHWNDhwndHWND hwnd,	//Handle of windowcbHMENUhmenuNULLHMENU hmenu	//Handle of menu
SetMenuItemBitmapsBOOL00tbHMENUhmenuHMENU hmenu,	//Handle of menutbUINTuItemUINT uItem,	//Menu item to receive new bitmapsrbUINTMF_BYCOMMANDMF_BYPOSITIONUINT fuFlags,	//Menu item flagstbHBITMAPhbmUncheckedHBITMAP hbmUnchecked,	//Handle of unchecked bitmaptbHBITMAPhbmCheckedHBITMAP hbmChecked	//Handle of checked bitmap
SetMessageQueueBOOL00tbintcMessagesMaxint cMessagesMax	//Size of message queue
SetMetaFileBitsExHMETAFILE00tbUINTnSizeUINT nSize,	//Size of Windows-format metafiletbCONST BYTE *lpDataCONST BYTE * lpData	//Address of buffer containing metafile data
SetMiterLimitBOOL00cbHDChdcHDC hdc,	//Handle of device contexttbFLOATeNewLimitFLOAT  eNewLimit,	//New miter limittbPFLOATpeOldLimitPFLOAT  peOldLimit	//Previous miter limit
SetNamedPipeHandleStateBOOL00tbHANDLEhNamedPipeHANDLE hNamedPipe,	//Handle of named pipecbLPDWORDlpdwModeNULLLPDWORD lpdwMode,	//Address of new pipe modecbLPDWORDlpcbMaxCollectNULLLPDWORD lpcbMaxCollect,	//Address of max bytes before remote transmissioncbLPDWORDlpdwCollectDataTimeoutNULLLPDWORD lpdwCollectDataTimeout	//Address of max time before remote transmission
SetPaletteEntriesUINT00tbHPALETTEhpalHPALETTE hpal,	//Handle of palettetbUINTiStartUINT iStart,	//Index of first entry to settbUINTcEntriesUINT cEntries,	//Number of entries to settbCONST PALETTEENTRY *lppeCONST PALETTEENTRY *lppe	//Address of array of structures
SetParentHWND00tbHWNDhwndChildHWND hwndChild,	//Handle of window whose parent is changingcbWNDhwndNewParentNULLWND hwndNewParent	//Handle of new parent window
SetPixelCOLORREF00tbHDChdcHDC hdc,	//Handle of device contexttbintXint X,	//X-coordinate of pixeltbintYint Y,	//Y-coordinate of pixeltbCOLORREFcrColorCOLORREF crColor	//Pixel color
SetPixelVBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbintXint X,	//X-coordinate of pixeltbintYint Y,	//Y-coordinate of pixeltbintYint Y	//Y-coordinate of pixel
SetPolyFillModeint00tbHDChdcHDC hdc,	//Handle of device contextrbintALTERNATEWINDINGint iPolyFillMode	//Polygon fill mode
SetPrinterBOOL00tbHANDLEhPrinterHANDLE hPrinter,	//Handle of printer objectrbDWORD023DWORD dwLevel,	//Structure levelcbLPBYTElpbPrinterNULLLPBYTE lpbPrinter,	//Address of array containing printer datarbDWORD0PRINTER_CONTROL_PAUSEPRINTER_CONTROL_PURGEPRINTER_CONTROL_RESUMEDWORD dwCommand	//Printer-state command
SetPrinterDataDWORD00tbHANDLEhPrinterHANDLE hPrinter,	//Handle of printer objecttbLPTSTRlpszTypeLPTSTR lpszType,	//Address of data typerbDWORDREG_BINARYREG_DWORDREG_DWORD_LITTLE_ENDIANREG_DWORD_BIG_ENDIANREG_EXPAND_SZREG_LINKREG_MULTI_SZREG_NONEREG_RESOURCE_LISTREG_SZDWORD dwType,	//Flag for value typetbLPBYTElpbDataLPBYTE lpbData,	//Address of array that specifies printer datatbDWORDcbDataDWORD cbData	//Size, in bytes, of array
SetPriorityClassBOOL00tbHANDLEhProcessHANDLE hProcess,	//Handle to the processrbDWORDIDLE_PRIORITY_CLASSNORMAL_PRIORITY_CLASSHIGH_PRIORITY_CLASSREALTIME_PRIORITY_CLASSDWORD fdwPriority	//Priority class value
SetPrivateObjectSecurityBOOL00tbSECURITY_INFORMATIONsiSECURITY_INFORMATION si,	//Type of security informationtbPSECURITY_DESCRIPTORpsdSourcePSECURITY_DESCRIPTOR psdSource,	//Address of SD to apply to objecttbPSECURITY_DESCRIPTOR *lppsdTargetPSECURITY_DESCRIPTOR *lppsdTarget,	//Address of object's SDtbPGENERIC_MAPPINGpgmPGENERIC_MAPPING pgm,	//Address of access-mapping structtbHANDLEhClientTokenHANDLE hClientToken	//Handle of client access token
SetProcessShutdownParametersBOOL00tbDWORDdwLevelDWORD dwLevel,	//Shutdown priorityxbDWORDSHUTDOWN_NORETRYDWORD dwFlags	//Shutdown flags
SetProcessWorkingSetSizeBOOL00tbHANDLEhProcessHANDLE hProcess,	//Open handle to the process of interesttbDWORDdwMinimumWorkingSetSizeDWORD dwMinimumWorkingSetSize,	//Specifies minimum working set sizetbDWORDdwMaximumWorkingSetSizeDWORD dwMaximumWorkingSetSize	//Specifies maximum working set size
SetPropBOOL00tbHWNDhwndHWND hwnd,	//Handle of windowtbLPCTSTRlpszLPCTSTR lpsz,	//Atom or address of stringtbHANDLEhDataHANDLE hData	//Handle of data
SetRectBOOL00cbLPRECT&rclprcLPRECT lprc,	//Address of structure with rectangle to settbintnLeftint nLeft,	//Left sidetbintnTopint nTop,	//Top sidetbintnRightint nRight,	//Right sidetbintnBottomint nBottom	//Bottom side
SetRectRgnBOOL00tbHRGNhrgnHRGN hrgn,	//Handle of regiontbintnLeftRectint nLeftRect,	//X-coordinate of upper-left corner of rectangletbintnTopRectint nTopRect,	//Y-coordinate of upper-left corner of rectangletbintnRightRectint nRightRect,	//X-coordinate of lower-right corner of rectangletbintnBottomRectint nBottomRect	//Y-coordinate of lower-right corner of rectangle
SetRectRgnBOOL00tbHRGNhrgnHRGN hrgn,	//Handle of regiontbintnLeftRectint nLeftRect,	//X-coordinate of upper-left corner of rectangletbintnTopRectint nTopRect,	//Y-coordinate of upper-left corner of rectangletbintnRightRectint nRightRect,	//X-coordinate of lower-right corner of rectangletbintnBottomRectint nBottomRect	//Y-coordinate of lower-right corner of rectangle
SetROP2int00tbHDChdcHDC hdc,	//Handle of device contextrbintR2_BLACKR2_WHITER2_NOPR2_NOTR2_COPYPENR2_NOTCOPYPENR2_MERGEPENNOTR2_MASKPENNOTR2_MERGENOTPENR2_MASKNOTPENR2_MERGEPENR2_NOTMERGEPENR2_MASKPENR2_NOTMASKPENR2_XORPENR2_NOTXORPENint fnDrawMode	//Drawing mode
SetScrollPosint00tbHWNDhwndHWND hwnd,	//Handle of window with scroll barrbintSB_CTLSB_HORZSB_VERTint fnBar,	//Scroll bar flagtbintnPosint nPos,	//New position of scroll boxcbBOOLfRedrawTRUEFALSEBOOL fRedraw	//Redraw flag
SetScrollRangeBOOL00tbHWNDhwndHWND hwnd,	//Handle of window with scroll barrbintSB_CTLSB_HORZSB_VERTint fnBar,	//Scroll bar flagtbintnMinPosint nMinPos,	//Minimum scrolling positiontbintnMaxPosint nMaxPos,	//Maximum scrolling positioncbBOOLfRedrawTRUEFALSEBOOL fRedraw	//Redraw flag
SetSecurityDescriptorGroup00
SetSecurityDescriptorOwnerBOOL00tbPSECURITY_DESCRIPTORpsdPSECURITY_DESCRIPTOR psd,	//Address of security descriptorcbPSIDpsidOwnerNULLPSID psidOwner,	//Address of SID for ownercbBOOLfOwnerDefaultedTRUEFALSEBOOL fOwnerDefaulted	//Flag for default
SetSecurityDescriptorOwnerBOOL00tbPSECURITY_DESCRIPTORpsdPSECURITY_DESCRIPTOR psd,	//Address of security descriptorcbPSIDpsidOwnerNULLPSID psidOwner,	//Address of SID for ownercbBOOLfOwnerDefaultedTRUEFALSEBOOL fOwnerDefaulted	//Flag for default
SetSecurityDescriptorSaclBOOL00tbPSECURITY_DESCRIPTORpsdPSECURITY_DESCRIPTOR psd,	//Address of security descriptorcbBOOLfSaclPresentTRUEFALSEBOOL fSaclPresent,	//Flag for presence of system ACLtbPACLpAclPACL pAcl,	//Address of system ACLcbBOOLfSaclDefaultedTRUEFALSEBOOL fSaclDefaulted	//Flag for default system ACL
SetServiceObjectSecurityBOOL00tbSC_HANDLEschServiceSC_HANDLE schService,	//Handle of servicexbSECURITY_INFORMATIONOWNER_SECURITY_INFORMATIONGROUP_SECURITY_INFORMATIONDACL_SECURITY_INFORMATIONSACL_SECURITY_INFORMATIONSECURITY_INFORMATION fdwSecurityInfo,	//Type of security information requestedtbPSECURITY_DESCRIPTORpsdSecurityDescPSECURITY_DESCRIPTOR psdSecurityDesc	//Address of security descriptor
SetServiceStatusBOOL00tbSERVICE_STATUS_HANDLEsshServiceStatusSERVICE_STATUS_HANDLE sshServiceStatus,	//Service status handletbLPSERVICE_STATUSlpssServiceStatusLPSERVICE_STATUS lpssServiceStatus	//Address of status structure
SetStdHandleBOOL00rbDWORDSTD_INPUT_HANDLESTD_OUTPUT_HANDLESTD_ERROR_HANDLEDWORD IDStdHandle,	//Input, output, or error devicetbHANDLEhHandleHANDLE hHandle	//Handle to be a standard handle
SetStretchBltModeint00tbHDChdcHDC hdc,	//Handle of device contextrbintBLACKONWHITECOLORONCOLORWHITEONBLACKHALFTONEint iStretchMode	//Bitmap stretching mode
SetSysColorsBOOL00tbintcDspElementsint cDspElements,	//Number of elements to changerbCONST INT *COLOR_ACTIVEBORDERCOLOR_ACTIVECAPTIONCOLOR_APPWORKSPACECOLOR_BACKGROUNDCOLOR_BTNFACECOLOR_BTNSHADOWCOLOR_BTNTEXTCOLOR_CAPTIONTEXTCOLOR_GRAYTEXTCOLOR_HIGHLIGHTCOLOR_HIGHLIGHTTEXTCOLOR_INACTIVEBORDERCOLOR_INACTIVECAPTIONCOLOR_INACTIVECAPTIONTEXTCOLOR_MENUCOLOR_MENUTEXTCOLOR_SCROLLBARCOLOR_SHADOWCOLOR_WINDOWCOLOR_WINDOWFRAMECOLOR_WINDOWTEXTCONST INT *lpnDspElements,	//Address of array of elementstbCONST COLORREF *lpdwRgbValuesCONST COLORREF *lpdwRgbValues	//Address of array of RGB values
SetSystemCursorBOOL00tbHCURSORhCursorHCURSOR  hCursor,	// set specified system cursor to this cursor's contents, then destroy thistbDWORDdwCursorIDDWORD  dwCursorID	// system cursor specified by its identifier
SetSystemPaletteUseUINT00tbHDChdcHDC hdc,	//Handle of device contextrbUINTSYSPAL_NOSTATICSYSPAL_STATICUINT uUsage	//Palette-usage flag
SetSystemTimeBOOL00tbCONSTSYSTEMTIME*lpstCONST SYSTEMTIME * lpst	//Address of system time to set
SetSystemTimeAdjustmentBOOL00tbDWORDdwTimeAdjustmentDWORD  dwTimeAdjustment,	//Size, in 100-nanosecond units, of a periodic time adjustmenttbPBOOLbTimeAdjustmentDisabledPBOOL  bTimeAdjustmentDisabled	//Whether periodic time adjustment is to be disabled or enabled
SetTapeParametersDWORD00tbHANDLEhDeviceHANDLE hDevice,	//Handle of open devicerbDWORDSET_TAPE_MEDIA_INFORMATIONGET_TAPE_DRIVE_INFORMATIONDWORD dwOperation,	//Type of information to settbLPVOIDlpTapeInformationLPVOID lpTapeInformation	//Buffer for information to set
SetTapePositionDWORD00tbHANDLEhDeviceHANDLE hDevice,	//Handle of open devicerbDWORDTAPE_ABSOLUTE_BLOCKTAPE_LOGICAL_BLOCKTAPE_REWINDTAPE_SPACE_END_OF_DATATAPE_SPACE_FILEMARKSTAPE_SPACE_RELATIVE_BLOCKSTAPE_SPACE_SEQUENTIAL_FMKSTAPE_SPACE_SEQUENTIAL_SMKSTAPE_SPACE_SETMARKSDWORD dwPositionMethod,	//Type of positioning to performtbDWORDdwPartitionDWORD dwPartition,	//New tape partitiontbDWORDdwOffsetLowDWORD dwOffsetLow,	//Low-order 32 bits of tape positiontbDWORDdwOffsetHighDWORD dwOffsetHigh,	//High-order 32 bits of tape positioncbBOOLbImmediateTRUEFALSEBOOL bImmediate	//Return after operation begins
SetTextAlignUINT00tbHDChdcHDC hdc,	//Handle of device contextrbUINTTA_BASELINETA_BOTTOMTA_TOPTA_CENTERTA_LEFTTA_RIGHTTA_NOUPDATECPTA_UPDATECPVTA_BASELINEVTA_CENTERUINT fMode	//Text-alignment flag
SetTextCharacterExtraint00tbHDChdcHDC hdc,	//Handle of device contexttbintnCharExtraint nCharExtra	//Extra-space value
SetTextColorCOLORREF00tbHDChdcHDC hdc,	//Handle of device contexttbCOLORREFcrColorCOLORREF crColor	//Text color
SetTextJustificationBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbintnBreakExtraint nBreakExtra,	//Length of extra space, in logical unitstbintnBreakCountint nBreakCount	//Count of space characters in line of text
SetThreadAffinityMaskBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbintnBreakExtraint  nBreakExtra,	//Length of extra space, in logical unitstbintnBreakCountint nBreakCount	//Count of space characters in line of text
SetThreadContextBOOL00tbHANDLEhThreadHANDLE hThread,	//Handle of thread with contexttbCONST CONTEXT *lpContextCONST CONTEXT * lpContext	//Address of context structure
SetThreadLocaleBOOL00tbLCIDLocaleLCID Locale	//Locale identifier
SetThreadPriorityBOOL00tbHANDLEhThreadHANDLE hThread,	//Handle to the threadrbintTHREAD_PRIORITY_IDLETHREAD_PRIORITY_LOWESTTHREAD_PRIORITY_BELOW_NORMALTHREAD_PRIORITY_NORMALTHREAD_PRIORITY_ABOVE_NORMALTHREAD_PRIORITY_HIGHESTTHREAD_PRIORITY_TIME_CRITICALint nPriority	//Thread priority level
SetThreadTokenBOOL00tbPHANDLEThreadPHANDLE  Thread,	//Points to a handle to the threadtbHANDLETokenHANDLE  Token	//Handle to the impersonation token
SetTimerUINT00cbHWNDhwndNULLHWND hwnd,	//Handle of window for timer messagestbUINTidTimerUINT idTimer,	//Timer identifiertbUINTuTimeoutUINT uTimeout,	//Time-out valuetbTIMERPROCtmprcTIMERPROC tmprc	//Address of timer procedure
SetTimeZoneInformationBOOL00tbCONSTTIME_ZONE_INFORMATION *lptziCONST TIME_ZONE_INFORMATION * lptzi	//Address of time-zone settings
SetTokenInformationBOOL00tbHANDLEhTokenHANDLE hToken,	//Handle of access tokentbTOKEN_INFORMATION_CLASSticTOKEN_INFORMATION_CLASS tic,	//Type of information to settbLPVOIDlpvInformationLPVOID lpvInformation,	//Address of information to settbDWORDcbInformationDWORD cbInformation	//Size of information buffer
SetUnhandledExceptionFilterLPTOP_LEVEL_EXCEPTION_FILTER00cbLPTOP_LEVEL_EXCEPTION_FILTERlpTopLevelExceptionFilterNULLLPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter	//Exception filter function
SetupCommBOOL00tbHANDLEhCommDevHANDLE hCommDev,	//Handle of the communications devicetbDWORDcbInQueueDWORD cbInQueue,	//Size of the input buffertbDWORDcbOutQueueDWORD cbOutQueue	//Size of the output buffer
SetUserObjectSecurityBOOL00tbHANDLEhObjectHANDLE hObject,	//Handle of user objecttbPSECURITY_INFORMATIONpsiPSECURITY_INFORMATION psi,	//Address of security informationtbPSECURITY_DESCRIPTORpsdPSECURITY_DESCRIPTOR psd	//Address of security descriptor
SetViewportExtExBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbintnXExtentint nXExtent,	//New horizontal viewport extenttbintnYExtentint nYExtent,	//New vertical viewport extentcbLPSIZElpSizeNULLLPSIZE lpSize	//Original viewport extent
SetVolumeLabelBOOL00cbLPCTSTRlpRootPathNameNULLLPCTSTR lpRootPathName,	//Name of root directory of volumecbLPCTSTRlpVolumeNameNULLLPCTSTR lpVolumeName	//Name for the volume
SetWindowExtExBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbintnXExtentint nXExtent,	//New horizontal window extenttbintnYExtentint nYExtent,	//New vertical window extentcbLPSIZElpSizeNULLLPSIZE lpSize	//Original window extent
SetWindowPlacementBOOL00tbHWNDhwndHWND hwnd,	//Handle of windowtbCONST WINDOWPLACEMENT *lpwndplCONST WINDOWPLACEMENT * lpwndpl	//Address of structure with position data
SetWindowPosBOOL00tbHWNDhwndHWND hwnd,	//Handle of windowcbHWNDhwndInsertAfterHWND_BOTTOMHWND_NOTOPMOSTHWND_TOPHWND_TOPMOSTHWND hwndInsertAfter,	//Placement-order handle
SetWindowsHookExHHOOK00rbintWH_CALLWNDPROCWH_CBTWH_DEBUGWH_GETMESSAGEWH_JOURNALPLAYBACKWH_JOURNALRECORDWH_KEYBOARDWH_MOUSEWH_MSGFILTERWH_SHELLWH_SYSMSGFILTERint idHook,	//Type of hook to installtbHOOKPROChkprcHOOKPROC hkprc,	//Address of hook proceduretbHINSTANCEhModHINSTANCE hMod,	//Handle of application instancetbDWORDdwThreadIDDWORD dwThreadID	//Identity of thread to install hook for
SetWindowsHookExHHOOK00rbintWH_CALLWNDPROCWH_CBTWH_DEBUGWH_GETMESSAGEWH_JOURNALPLAYBACKWH_JOURNALRECORDWH_KEYBOARDWH_MOUSEWH_MSGFILTERWH_SHELLWH_SYSMSGFILTERint idHook,	//Type of hook to installtbHOOKPROChkprcHOOKPROC hkprc,	//Address of hook proceduretbHINSTANCEhModHINSTANCE hMod,	//Handle of application instancetbDWORDdwThreadIDDWORD dwThreadID	//Identity of thread to install hook for
SetWindowTextBOOL00tbHWNDhwndHWND hwnd,	//Handle of window or controltbLPCTSTRlpszLPCTSTR lpsz	//Address of string
SetWindowWordWORD00tbHWNDhwndHWND hwnd,	//Handle of windowtbintnIndexint nIndex,	//Offset of value to settbWORDwNewWordWORD wNewWord	//New value
SetWinMetaFileBitsUINT00tbUINTcbBufferUINT cbBuffer,	//Size of buffertbCONST BYTE * lpbBufferCONST BYTE * lpbBuffer,	//Address of buffered metafile datatbHDChdcRefHDC hdcRef,	//Handle of reference device contexttbCONST METAFILEPICT *lpmfpCONST METAFILEPICT * lpmfp	//Suggested size of metafile picture
SetWorldTransformBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbCONST XFORM *lpXformCONST XFORM * lpXform	//Address of transformation data
ShellAboutint00cbHWNDhWndNULLHWND hWnd,	//Handle of parent windowtbLPCTSTRszAppLPCTSTR szApp,	//Title bar and first line texttbLPCTSTRszOtherStuffLPCTSTR szOtherStuff,	//Other dialog textcbHICONhIconNULLHICON hIcon	//Icon to display
ShowCaretBOOL00cbHWNDhwndNULLHWND hwnd	//Handle of window with caret
ShellProcLRESULT00rbintHSHELL_WINDOWCREATEDHSHELL_WINDOWDESTROYEDint nCode,	//Hook codetbWPARAMwParamWPARAM wParam,	//Event-specific informationcbLPARAMNULLlParamLPARAM lParam	//Undefined
ShowCaretBOOL00cbHWNDhwndNULLHWND hwnd	//Handle of window with caret
ShowCursorint00cbBOOLbShowTRUEFALSEBOOL bShow	//Cursor visibility flag
ShowOwnedPopupsBOOL00tbHWNDhwndHWND hwnd,	//Handle of windowcbBOOLfShowTRUEFALSEBOOL fShow	//Window visibility flag
ShowScrollBarBOOL00tbHWNDhwndHWND hwnd,	//Handle of window with scroll barrbintSB_BOTHSB_CTLSB_HORZSB_VERTint fnBar,	//Scroll bar flagcbBOOLfShowTRUEFALSEBOOL fShow	//Scroll bar visibility flag
ShowWindowBOOL00tbHWNDhwndHWND hwnd,	//Handle of windowrbintSW_SHOWDEFAULTSW_HIDESW_MINIMIZESW_RESTORESW_SHOWSW_SHOWMAXIMIZEDSW_SHOWMINIMIZEDSW_SHOWMINNOACTIVESW_SHOWNASW_SHOWNOACTIVATESW_SHOWNORMALint nCmdShow	//Show state of window
SizeofResourceDWORD00tbHINSTANCEhModuleHINSTANCE hModule,	//Resource-module handletbHRSRChrsrcHRSRC hrsrc	//Resource handle
SleepVOID00tbDWORDcMillisecondsDWORD cMilliseconds	//Sleep time in milliseconds
SleepExDWORD00cbDWORDdwTimeout0 INFINITEDWORD dwTimeout,	//Time-out interval in millisecondscbBOOLfAlertableTRUEFALSEBOOL fAlertable	//Return if I/O is completed
sndPlaySoundBOOL00cbLPCTSTRlpszSoundNameNULLLPCTSTR lpszSoundName,	//Name of sound to playxbUINTSND_SYNCSND_ASYNCSND_NODEFAULTSND_MEMORYSND_LOOPSND_NOSTOPUINT fuOptions	//Options flags
StartDocint00tbHDChdcHDC  hdc,	//Handle of device contexttbCONST DOCINFO *lpdiCONST DOCINFO *  lpdi	//Address of structure with file names
StartDocPrinterDWORD00tbHANDLEhPrinterHANDLE hPrinter,	//Handle of printer objectcbDWORD1dwLevelDWORD dwLevel,	//Structure leveltbLPBYTElpbDocInfoLPBYTE lpbDocInfo	//Address of structure
StartPageint00tbHDChDCHDC hDC	//Handle of device context
StartPagePrinterBOOL00tbHANDLEhPrinterHANDLE hPrinter	//Handle of printer object
StartServiceBOOL00tbSC_HANDLEschServiceSC_HANDLE schService,	//Handle of servicetbDWORDdwNumServiceArgsDWORD dwNumServiceArgs,	//Number of argumentscbLPCTSTR *lpszServiceArgsNULLLPCTSTR *lpszServiceArgs	//Address of array of argument string pointers
StartServiceCtrlDispatcherBOOL00tbLPSERVICE_TABLE_ENTRYlpsteServiceTableLPSERVICE_TABLE_ENTRY lpsteServiceTable	//Address of service table
StrokeAndFillPathBOOL00tbHDChdcHDC hdc	//Handle of device context
StrokePathBOOL00tbHDChdcHDC hdc	//Handle of device context
SubtractPathBOOL00tbLPRECTlprcDestLPRECT  lprcDest,	//Pointer to destination rectangletbCONST RECT *lprcSrc1CONST RECT * lprcSrc1,	//Pointer to rectangle to subtract fromtbCONST RECT *lprcSrc2CONST RECT *  lprcSrc2	//Pointer to rectangle to subtract
SuspendThreadDWORD00tbHANDLEhThreadHANDLE hThread	//Handle to the thread
SwapMouseButtonBOOL00cbBOOLfSwapTRUEFALSEBOOL fSwap	//Reverse or restore buttons
SysMsgProcLRESULT CALLBACK00rbintMSGF_DIALOGBOXMSGF_MENUMSGF_SCROLLBARMSGF_NEXTWINDOWint nCode,	//Message flagcbWPARAMNULLwParamWPARAM wParam,	//UndefinedtbLPARAMlParamLPARAM lParam	//Address of structure with message data
SystemParametersInfoBOOL00rbUINTSPI_GETBEEPSPI_GETBORDERSPI_GETFASTTASKSWITCHSPI_GETGRIDGRANULARITYSPI_GETICONTITLELOGFONTSPI_GETICONTITLEWRAPSPI_GETKEYBOARDDELAYSPI_GETKEYBOARDSPEEDSPI_GETMENUDROPALIGNMENTSPI_GETMOUSESPI_GETSCREENSAVEACTIVESPI_GETSCREENSAVETIMEOUTSPI_ICONHORIZONTALSPACINGSPI_ICONVERTICALSPACINGSPI_LANGDRIVERSPI_SETBEEPSPI_SETBORDERSPI_SETDESKPATTERNSPI_SETDESKWALLPAPERSPI_SETDOUBLECLICKTIMESPI_SETDOUBLECLKHEIGHTSPI_SETDOUBLECLKWIDTHSPI_SETFASTTASKSWITCHSPI_SETGRIDGRANULARITYSPI_SETICONTITLELOGFONTSPI_SETICONTITLEWRAPSPI_SETKEYBOARDDELAYSPI_SETKEYBOARDSPEEDSPI_SETMENUDROPALIGNMENTSPI_SETMOUSESPI_SETMOUSEBUTTONSWAPSPI_SETSCREENSAVEACTIVESPI_SETSCREENSAVETIMEOUTUINT wAction,	//System parameter to query or settbUINTwParamUINT wParam,	//Depends on action to be takentbPVOIDlpvParamPVOID lpvParam,	//Depends on action to be takenrbUINTSPIF_UPDATEINIFILESPIF_SENDWININICHANGEUINT fUpdateProfile	//User profile update flag
SystemTimerToTzSpecificLocationBOOL00tbLPTIME_ZONE_INFORMATIONlpTimeZoneInformationLPTIME_ZONE_INFORMATION  lpTimeZoneInformation,	//Pointer to time zone of interesttbLPSYSTEMTIMElpUniversalTimeLPSYSTEMTIME  lpUniversalTime,	//Pointer to universal time of interesttbLPSYSTEMTIMElpLocalTimeLPSYSTEMTIME  lpLocalTime	//Pointer to structure to receive local time
SystemTimeToFileTimeBOOL00tbCONST SYSTEMTIME *lpstCONST SYSTEMTIME * lpst,	//Address of system time to converttbLPFILETIMElpftLPFILETIME lpft	//Address of buffer for converted file time
TabbedTextOutLONG00tbHDChdcHDC hdc,	//Handle of device contexttbintxint x,	//X-coordinate of starting positiontbintyint y,	//Y-coordinate of starting positiontbLPCTSTRlpStringLPCTSTR lpString,	//Address of stringtbLPCTSTRlpStringLPCTSTR lpString,	//Address of stringtbintnTabPositionsint nTabPositions,	//Number of tabs in arraytbLPINTlpnTabStopPositionsLPINT lpnTabStopPositions,	//Address of array for tab positionstbintnTabOriginint nTabOrigin	//X-coordinate for tab expansion
TerminateProcessBOOL00tbHANDLEhProcessHANDLE hProcess,	//Handle to the processtbUINTuExitCodeUINT uExitCode	//Exit code for the process
TextOutBOOL00tbHDChdcHDC hdc,	//Handle of device contexttbintnXStartint nXStart,	//X-coordinate of starting positiontbintnYStartint nYStart,	//Y-coordinate of starting positiontbLPCTSTRlpszStringLPCTSTR lpszString,	//Address of stringtbintcbStringint cbString	//Number of characters in string
timeBeginPeriodMMRESULT00tbUINTcMillisecondsUINT cMilliseconds	//New minimum timer period in milliseconds
timeEndPeriodMMRESULT00tbUINTcMillisecondsUINT cMilliseconds	//Old timer period in milliseconds
timeGetDevCapsMMRESULT00tbLPTIMECAPSlptcLPTIMECAPS lptc,	//Address of structure for returned capabilitiestbUINTcbtcUINT cbtc	//Size of structure in bytes
timeGetSystemTimeMMRESULT00tbLPMMTIMElpmmtLPMMTIME lpmmt,	//Address of structure for returned timetbUINTcbmmtUINT cbmmt	//Size of structure in bytes
timeKillEventMMRESULT00tbUINTIDEventUINT IDEvent	//Identifies event to be destroyed
TimerProcVOID CALLBACK00tbHWNDhwndHWND  hwnd,	//Handle of window for timer messagestbUINTuMsgUINT  uMsg,	//WM_TIMER messagetbUINTidEventUINT  idEvent,	//Timer identifiertbDWORDdwTimeDWORD  dwTime	//Current system time
timeSetEventUINT00tbUINTwDelayUINT wDelay,	//Specifies event periodtbUINTwResolutionUINT wResolution,	//Specifies delay accuracytbLPTIMECALLBACKlptcLPTIMECALLBACK lptc,	//Address of callback functiontbLPTIMECALLBACKlptcLPTIMECALLBACK lptc,	//Address of callback functionrbUINTTIME_ONESHOTTIME_PERIODICUINT fuCallbackType	//Callback type flags
TlsGetValueLPVOID00tbDWORDdwTlsIndexDWORD dwTlsIndex	//TLS index to retrieve value for
TlsSetValueBOOL00tbDWORDdwTlsIndexDWORD dwTlsIndex,	//TLS index to set value fortbLPVOIDlpvTlsValueLPVOID lpvTlsValue	//Value to be stored
ToAsciiint00tbUINTuVirtKeyUINT uVirtKey,	//Virtual-key codetbUINTuScanCodeUINT uScanCode,	//Scan codetbPBYTElpbKeyStatePBYTE lpbKeyState,	//Address of key-state arraytbLPWORDlpwTransKeyLPWORD lpwTransKey,	//Buffer for translated keycbUINTfuState10UINT fuState	//Active-menu flag
ToUnicodeint00tbUINTwVirtKeyUINT wVirtKey,	//Virtual-key codetbUINTwScanCodeUINT wScanCode,	//Scan codetbPBYTElpKeyStatePBYTE lpKeyState,	//Address of key-state arraytbLPWSTRpwszBuffLPWSTR pwszBuff,	//Buffer for translated keytbintcchBuffint cchBuff,	//Size of translated key buffertbUINTwFlagsUINT wFlags	//Set of function-conditioning flags
TrackPopupMenuBOOL00tbHMENUhmenuHMENU hmenu,	//Handle of pop-up menurbUINTTPM_CENTERALIGNTPM_LEFTALIGNTPM_RIGHTALIGNTPM_LEFTBUTTONTPM_RIGHTBUTTONUINT fuFlags,	//Screen-position and mouse-button flagstbintxint x,	//Horizontal screen positiontbintyint y,	//Vertical screen positioncbint0nReservedint nReserved,	//ReservedtbHWNDhwndHWND hwnd,	//Handle of owner windowcbCONST RECT *NULLlprcCONST RECT *lprc	//Address of structure with rectangle
TransactNamedPipeBOOL00tbHANDLEhNamedPipeHANDLE hNamedPipe,	//Handle of named pipetbLPVOIDlpvWriteBufLPVOID lpvWriteBuf,	//Address of the write buffertbDWORDcbWriteBufDWORD cbWriteBuf,	//Size of the write buffer in bytestbLPVOIDlpvReadBufLPVOID lpvReadBuf,	//Address of the read buffertbDWORDcbReadBufDWORD cbReadBuf,	//Size of the read buffer in bytescbLPDWORDlpcbReadNULLLPDWORD lpcbRead,	//Address of variable for bytes actually readcbLPOVERLAPPEDlpoNULLLPOVERLAPPED lpo	//Address of overlapped structure
TranslateAcceleratorint00tbHWNDhwndHWND hwnd,	//Handle of destination windowtbHACCELhacclHACCEL haccl,	//Handle of accelerator tabletbLPMSGlpmsgLPMSG lpmsg	//Address of structure with message
TranslateMDISysAccelBOOL00tbHWNDhwndClientHWND hwndClient,	//Handle of MDI client windowtbLPMSGlpmsgLPMSG lpmsg	//Address of structure with message data
TranslateMessageBOOL00tbCONST MSG *lpmsgCONST MSG *lpmsg	//Address of structure with message
TransmitCommCharBOOL00tbHANDLEhCommDevHANDLE hCommDev,	//Handle of the communications devicetbcharchTransmitchar chTransmit	//Character to transmit
UInt32x32To64DWORDLONG00tbDWORDMultiplierDWORD  Multiplier,	//Specifies first unsigned 32-bit integer for the multiplicationtbDWORDMultiplicandDWORD  Multiplicand	//Specifies second unsigned 32-bit integer for the multiplication
UndeleteFileDWORD00tbHWNDhwndOwnerHWND hwndOwner,	//Handle of File Manager windowtbLPSTRlpszDirLPSTR lpszDir	//Address of name of initial directory
UnhandledExceptionFilterLONG00tbSTRUCT _EXCEPTION_POINTERS * lpexpExceptionInfoSTRUCT _EXCEPTION_POINTERS * lpexpExceptionInfo	//Address of exception info
UnhookWindowsHookBOOL00tbintnCodeint nCode,	//Type of hook to remove procedure fromtbHOOKPROChkprcHOOKPROC hkprc	//Address of hook procedure
UnhookWindowsHookExBOOL00tbHHOOKhhookHHOOK hhook	//Handle of hook procedure to remove
UnionRectBOOL00tbLPRECTlprcDstLPRECT lprcDst,	//Address of structure for uniontbCONST RECT *lprcSrc1CONST RECT *lprcSrc1,	//Address of structure with first rectangletbCONST RECT *lprcSrc2CONST RECT *lprcSrc2	//Address of structure with second rectangle
UnloadKeyboardLayoutBOOL00tbHKLhklHKL hkl	//Handle of keyboard layout
UnlockFileBOOL00tbHANDLEhFileHANDLE hFile,	//Handle of file to unlocktbDWORDdwFileOffsetLowDWORD dwFileOffsetLow,	//Low-order word of lock region offsettbDWORDdwFileOffsetHighDWORD dwFileOffsetHigh,	//High-order word of lock region offsettbDWORDcbUnlockLowDWORD cbUnlockLow,	//Low-order word of length to unlocktbDWORDcbUnlockHighDWORD cbUnlockHigh	//High-order word of length to unlock
UnlockFileExBOOL00tbHANDLEhFileHANDLE hFile,	//Handle of file to lockcbDWORDNULLdwReservedDWORD dwReserved,	//Reserved, must be set to zerotbDWORDnNumberOfBytesToUnlockLowDWORD nNumberOfBytesToUnlockLow,	//Low order 32-bits of length to unlocktbDWORDnNumberOfBytesToUnlockHighDWORD nNumberOfBytesToUnlockHigh,	//High order 32-bits of length to unlocktbLPOVERLAPPEDlpOverlappedLPOVERLAPPED lpOverlapped	//Pointer to struct with unlock region start offset
UnlockServiceDatabaseBOOL00tbSC_LOCKsclLockSC_LOCK sclLock	//Service control manager database lock to be released
UnmapViewOfFileBOOL00tbLPVOIDlpBaseAddressLPVOID lpBaseAddress	//Address where mapped view begins
UnpackDDElParamBOOL00tbUINTuMsgUINT uMsg,	//Posted DDE messagetbLONGlParamLONG lParam,	//LParam of posted DDE messagetbPUINTpuLowPUINT puLow,	//Address of low-order word of lParamtbPUINTpuHighPUINT puHigh	//Address of high-order word of lParam
UnrealizeObjectBOOL00tbHGDIOBJhgdiobjHGDIOBJ hgdiobj	//Logical palette handle
UnregisterClassBOOL00tbLPCTSTRlpszClassLPCTSTR lpszClass,	//Address of class name stringtbHINSTANCEhinstHINSTANCE hinst	//Handle of application instance
UnregisterHotKeyBOOL00tbHWNDhwndHWND hwnd,	//Window associated with hot keytbintidHotKeyint idHotKey	//Identifier of hot key
UpdateColorsBOOL00tbHDChdcHDC hdc	//Handle of device context
UpdateResourceBOOL00tbHANDLEhUpdateFileHANDLE hUpdateFile,	//Update-file handlecbLPCTSTRlpszTypeRT_ACCELERATORRT_BITMAPRT_DIALOGRT_FONTRT_FONTDIRRT_MENURT_RCDATART_STRINGRT_MESSAGETABLERT_CURSORRT_GROUP_CURSORRT_ICONRT_GROUP_ICONRT_VERSIONLPCTSTR lpszType,	//Address of resource type to updatetbLPCTSTRlpszNameLPCTSTR lpszName,	//Address of resource name to updatetbWORDIDLanguageWORD IDLanguage,	//Language identifier of resourcecbLPVOIDlpvDataNULLLPVOID lpvData,	//Address of resource datatbDWORDcbDataDWORD cbData	//Length of resource data, in bytes
UpdateWindowBOOL00tbHWNDhwndHWND hwnd	//Handle of window
ValidateRectBOOL00cbHWNDhwndNULLHWND hwnd,	//Handle of windowcbCONST RECT *&rclprcNULLCONST RECT *lprc	//Address of structure with validation rectangle
ValidateRgnBOOL00tbHWNDhwndHWND hwnd,	//Handle of windowcbHRGNhrgnNULLHRGN hrgn	//Handle of valid region
VerFindFileDWORD00xbDWORDVFFF_ISSHAREDFILEDWORD dwFlags,	//Is this a shared filetbLPTSTRszFileNameLPTSTR szFileName,	//File to installtbLPTSTRszWinDirLPTSTR szWinDir,	//Windows directorytbLPTSTRszAppDirLPTSTR szAppDir,	//Directory for file being installedtbLPTSTRszCurDirLPTSTR szCurDir,	//Current working directorytbPUINTlpuCurDirLenPUINT lpuCurDirLen,	//Size of string in szCurDirtbLPTSTRszDestDirLPTSTR szDestDir,	//Recommended destination directorytbPUINTlpuDestDirLenPUINT lpuDestDirLen	//Size of string in szDestDir
VerInstallFileDWORD00rbDWORDVIFF_FORCEINSTALLVIFF_DONTDELETEOLDDWORD dwFlags,	//Installation typetbLPTSTRszSrcFileNameLPTSTR szSrcFileName,	//File to installtbLPTSTRszDestFileNameLPTSTR szDestFileName,	//New name of file to installtbLPTSTRszSrcDirLPTSTR szSrcDir,	//Directory for file being installedtbLPTSTRszDestDirLPTSTR szDestDir,	//Directory in which to install filetbLPTSTRszCurDirLPTSTR szCurDir,	//Current working directorytbLPTSTRszTmpFileLPTSTR szTmpFile,	//Temp. file used during installtbPUINTlpuTmpFileLenPUINT lpuTmpFileLen	//Size of string in szTmpFile
VerLanguageNameDWORD00tbDWORDidLangDWORD idLang,	//Microsoft language identifiertbLPTSTRlpszLangLPTSTR lpszLang,	//Address of buffer for language stringtbDWORDcbLangDWORD cbLang	//Size of buffer
VerQueryValueBOOL00tbconstLPVOID pBlockconst LPVOID pBlock,	//Address of buffer for version resourcetbLPTSTRlpSubBlockLPTSTR lpSubBlock,	//Address of value to retrievetbLPVOID *lplpBufferLPVOID *lplpBuffer,	//Address of buffer for version pointertbPUINTpuLenPUINT puLen	//Address of version-value length buffer
VirtualAllocLPVOID00cbLPVOIDlpvAddressNULLLPVOID lpvAddress,	//Address of region to reserve or commitcbDWORDcbSizeNULLDWORD cbSize,	//Size of the regionxbDWORDMEM_COMMITMEM_RESERVEMEM_TOP_DOWNDWORD fdwAllocationType,	//Type of allocationxbDWORDPAGE_READONLYPAGE_READWRITEPAGE_WRITECOPYPAGE_EXECUTEPAGE_EXECUTE_READPAGE_EXECUTE_READWRITEPAGE_EXECUTE_WRITECOPYPAGE_GUARDPAGE_NOACCESSPAGE_NOCACHEDWORD fdwProtect	//Type of access protection
VirtualFreeBOOL00tbLPVOIDlpvAddressLPVOID lpvAddress,	//Address of region of committed pagescbDWORDcbSize0DWORD cbSize,	//Size of the regionrbDWORDMEM_DECOMMITMEM_RELEASEDWORD fdwFreeType	//Type of free operation
VirtualLockBOOL00tbLPVOIDlpvAddressLPVOID lpvAddress,	//Address of first byte of range to locktbDWORDcbSizeDWORD cbSize	//Number of bytes in range to lock
VirtualProtectBOOL00tbLPVOIDlpvAddressLPVOID lpvAddress,	//Address of region of committed pagestbDWORDcbSizeDWORD cbSize,	//Size of the regionxbDWORDPAGE_READONLYPAGE_READWRITEPAGE_WRITECOPYPAGE_EXECUTEPAGE_EXECUTE_READPAGE_EXECUTE_READWRITEPAGE_EXECUTE_WRITECOPYPAGE_GUARDPAGE_NOACCESSPAGE_NOCACHEDWORD fdwNewProtect,	//Desired access protectiontbPDWORDpfdwOldProtectPDWORD pfdwOldProtect	//Address of variable to get old protection
VirtualProtectExBOOL00tbHANDLEhProcessHANDLE hProcess,	//Handle of the processtbLPVOIDlpvAddressLPVOID lpvAddress,	//Address of region of committed pagestbDWORDcbSizeDWORD cbSize,	//Size of the regionxbDWORDPAGE_READONLYPAGE_READWRITEPAGE_WRITECOPYPAGE_EXECUTEPAGE_EXECUTE_READPAGE_EXECUTE_READWRITEPAGE_EXECUTE_WRITECOPYPAGE_GUARDPAGE_NOACCESSPAGE_NOCACHEDWORD fdwNewProtect,	//Desired access protectiontbPDWORDpfdwOldProtectPDWORD pfdwOldProtect	//Address of variable to get old protection
VirtualQueryDWORD00tbLPCVOIDlpvAddressLPCVOID lpvAddress,	//Address of regiontbPMEMORY_BASIC_INFORMATIONpmbiBufferPMEMORY_BASIC_INFORMATION pmbiBuffer,	//Address of information buffertbDWORDcbLengthDWORD cbLength	//Size of buffer
VirtualQueryExDWORD00tbHANDLEhProcessHANDLE hProcess,	//Handle of the processtbLPCVOIDlpvAddressLPCVOID lpvAddress,	//Address of regiontbPMEMORY_BASIC_INFORMATIONpmbiBufferPMEMORY_BASIC_INFORMATION pmbiBuffer,	//Address of information buffertbDWORDcbLengthDWORD cbLength	//Size of buffer
VirtualUnlockBOOL00tbLPVOIDlpvAddressLPVOID lpvAddress,	//Address of first byte of rangetbDWORDcbSizeDWORD cbSize	//Number of bytes in range
VkKeyScanSHORT00tbTCHARchTCHAR ch	//Character to translate
WaitCommEventBOOL00tbHANDLEhCommDevHANDLE hCommDev,	//Handle of the communications devicetbLPDWORDlpfdwEvtMaskLPDWORD lpfdwEvtMask,	//Address of variable for event that occurredcbLPOVERLAPPED&polpoNULLLPOVERLAPPED lpo	//Address of overlapped structure
WaitForDebugEventBOOL00tbLPDEBUG_EVENTlpdeLPDEBUG_EVENT lpde,	//Address of structure for event informationtbDWORDdwTimeoutDWORD dwTimeout	//Number of milliseconds to wait for event
WaitForInputIdleDWORD00tbHANDLEhProcessHANDLE hProcess,	//Handle to processtbDWORDdwTimeoutDWORD dwTimeout	//Time-out interval in milliseconds
WaitForMultipleObjectsDWORD00tbDWORDcObjectsDWORD cObjects,	//Number of handles in handle arraytbCONST HANDLE * lphObjectsCONST HANDLE * lphObjects,	//Address of object-handle arraycbBOOLfWaitAllTRUEFALSEBOOL fWaitAll,	//Wait flagtbDWORDdwTimeoutDWORD dwTimeout	//Time-out interval in milliseconds
WaitForMultipleObjectsExDWORD00tbDWORDcObjectsDWORD cObjects,	//Number of handles in handle arraytbCONST HANDLE * lphObjectsCONST HANDLE * lphObjects,	//Address of object-handle arraycbBOOLfWaitAllTRUEFALSEBOOL fWaitAll,	//Wait flagcbDWORD0INFINITEdwTimeoutDWORD dwTimeout,	//Time-out interval in millisecondscbBOOLfAlertableTRUEFALSEBOOL fAlertable	//Alertable wait flag
WaitForPrinterChangeDWORD00tbHANDLEhPrinterHANDLE hPrinter,	//Handle of printer objectxbDWORDPRINTER_CHANGE_PRINTERPRINTER_CHANGE_JOBPRINTER_CHANGE_FORMPRINTER_CHANGE_PORTPRINTER_CHANGE_PRINT_PROCESSORPRINTER_CHANGE_PRINTER_DRIVERPRINTER_CHANGE_ADD_PRINTERPRINTER_CHANGE_SET_PRINTERPRINTER_CHANGE_DELETE_PRINTERPRINTER_CHANGE_ADD_JOBPRINTER_CHANGE_SET_JOBPRINTER_CHANGE_DELETE_JOBPRINTER_CHANGE_WRITE_JOBPRINTER_CHANGE_ADD_FORMPRINTER_CHANGE_SET_FORMPRINTER_CHANGE_DELETE_FORMPRINTER_CHANGE_ADD_PORTPRINTER_CHANGE_CONFIGURE_PORTPRINTER_CHANGE_DELETE_PORTPRINTER_CHANGE_ADD_PRINT_PROCESSORPRINTER_CHANGE_DELETE_PRINT_PROCESSORPRINTER_CHANGE_ADD_PRINTER_DRIVERPRINTER_CHANGE_DELETE_PRINTER_DRIVERPRINTER_CHANGE_TIMEOUTDWORD Flags	//Bit mask specifying changes to wait for
WaitForSingleObjectDWORD00tbHANDLEhObjectHANDLE hObject,	//Handle of object to wait forcbDWORDdwTimeout0INFINITEDWORD dwTimeout	//Time-out interval in milliseconds
WaitForSingleObjectExDWORD00tbHANDLEhObjectHANDLE hObject,	//Handle of object to wait forcbDWORDdwTimeout0INFINITEDWORD dwTimeout,	//Time-out interval in millisecondscbBOOLfAlertableTRUEFALSEBOOL fAlertable	//Return to execute I/O completion routine if TRUE
waveInGetErrorTextMMRESULT00tbMMRESULTmmrErrorMMRESULT mmrError,	//Error codetbLPTSTRlpszDescLPTSTR lpszDesc,	//Address of buffer for text descriptiontbUINTcchDescUINT cchDesc	//Size of buffer, in characters
waveInCloseMMRESULT00tbHWAVEINhWaveInHWAVEIN hWaveIn	//Handle of device to close
waveInGetDevCapsMMRESULT00tbUINTIDDeviceUINT IDDevice,	//Identifiee of the device to querytbLPWAVEINCAPSlpwicLPWAVEINCAPS lpwic,	//Address of structure for capabilitiestbUINTcbwicUINT cbwic	//Size of structure, in bytes
waveInGetErrorTextMMRESULT00tbMMRESULTmmrErrorMMRESULT mmrError,	//Error codetbLPTSTRlpszDescLPTSTR lpszDesc,	//Address of buffer for text descriptiontbUINTcchDescUINT cchDesc	//Size of buffer, in characters
waveInGetIDMMRESULT00tbHWAVEINhWaveInHWAVEIN hWaveIn,	//Handle of the devicetbPUINTlpIDDevicePUINT lpIDDevice	//Address of variable for device ID
waveInMessageMMRESULT00tbHWAVEINhWaveInHWAVEIN hWaveIn,	//Handle of device to send message totbUINTuMsgUINT uMsg,	//Specifies messagetbDWORDdwParameter1DWORD dwParameter1,	//Application-defined parametertbDWORDdwParameter2DWORD dwParameter2	//Application-defined parameter
waveInOpenMMRESULT00cbLPHWAVEINlphWaveInNULLLPHWAVEIN lphWaveIn,	//Variable to receive a handle to the input devicetbUINTIDDeviceUINT IDDevice,	//Identifier of the devicecbLPWAVEFORMAT&wflpwfLPWAVEFORMAT lpwf,	//Address of structure with device formatcbDWORDdwCallbackNULLDWORD dwCallback,	//Address of callback or window handletbDWORDdwCallbackInstanceDWORD dwCallbackInstance,	//Instance dataxbDWORDWAVE_FORMAT_QUERYWAVE_ALLOWSYNCCALLBACK_WINDOWCALLBACK_FUNCTIONDWORD fdwOpen	//Open option
waveInPrepareHeaderMMRESULT00tbHWAVEINhWaveInHWAVEIN hWaveIn,	//Handle of waveform devicetbLPWAVEHDRlpwhLPWAVEHDR lpwh,	//Address of structure with device informationtbUINTcbwhUINT cbwh	//Size of structure, in bytes
waveInResetMMRESULT00tbHWAVEINhWaveInHWAVEIN hWaveIn	//Handle of device to reset
waveInStartMMRESULT00tbHWAVEINhWaveInHWAVEIN hWaveIn	//Handle of device to start
waveInStopMMRESULT00tbHWAVEINhWaveInHWAVEIN hWaveIn	//Handle of device to stop
waveInUnprepareHeaderMMRESULT00tbHWAVEINhWaveInHWAVEIN hWaveIn,	//Handle of input devicetbLPWAVEHDRlpwhLPWAVEHDR lpwh,	//Address of structure identifying buffertbUINTwhUINT wh	//Size of structure, in bytes
waveOutBreakLoopMMRESULT00tbHWAVEOUThWaveOutHWAVEOUT hWaveOut	//Handle of output device
waveOutCloseMMRESULT00tbHWAVEOUThWaveOutHWAVEOUT hWaveOut	//Handle of device to close
waveOutGetDevCapsMMRESULT00tbUINTIDDeviceUINT IDDevice,	//Identifier of output devicetbLPWAVEOUTCAPSlpwocLPWAVEOUTCAPS lpwoc,	//Address of structure for device capabilitiestbUINTcbwocUINT cbwoc	//Size of structure, in bytes
waveOutGetErrorTextMMRESULT00tbMMRESULTmmrErrorMMRESULT mmrError,	//Error codetbLPTSTRlpszDescLPTSTR lpszDesc,	//Address of buffer for text descriptiontbUINTcchDescUINT cchDesc	//Size of buffer, in characters
waveOutGetIDMMRESULT00tbHWAVEOUThWaveOutHWAVEOUT hWaveOut,	//Handle of the devicetbPUINTlpIDDevicePUINT lpIDDevice	//Address of buffer for device ID
waveOutGetPlaybackRateMMRESULT00tbHWAVEOUThWaveOutHWAVEOUT hWaveOut,	//Handle of output devicetbLPDWORDlpdwRateLPDWORD lpdwRate	//Address of buffer for playback rate
waveOutGetPositionMMRESULT00tbHWAVEOUThWaveOutHWAVEOUT hWaveOut,	//Handle of output devicetbLPMMTIMElpmmtLPMMTIME lpmmt,	//Address of structure for current positiontbUINTcbmmtUINT cbmmt	//Size of structure, in bytes
waveOutGetVolumeMMRESULT00tbUINTIDDeviceUINT IDDevice,	//Identifier of output devicetbLPDWORDlpdwVolumeLPDWORD lpdwVolume	//Address of buffer for volume
waveOutMessageMMRESULT00tbHWAVEOUThWaveOutHWAVEOUT hWaveOut,	//Handle of output devicetbUINTuMsgUINT uMsg,	//MessagetbDWORDdwParameter1DWORD dwParameter1,	//Application-defined parametertbDWORDdwParameter2DWORD dwParameter2	//Application-defined parameter
waveOutOpenMMRESULT00tbLPHWAVEOUTlphWaveOutLPHWAVEOUT lphWaveOut,	//Variable to receive a handle of output devicetbUINTIDDeviceUINT IDDevice,	//Identifier of devicetbLPWAVEFORMATlpwfLPWAVEFORMAT lpwf,	//Address of structure with device formatcbDWORDdwCallbackNULLDWORD dwCallback,	//Address of callback or window handletbDWORDdwCallbackInstanceDWORD dwCallbackInstance,	//Instance dataxbDWORDWAVE_FORMAT_QUERYWAVE_ALLOWSYNCCALLBACK_WINDOWCALLBACK_FUNCTIONDWORD fdwOpen	//Open option
waveOutPauseMMRESULT00tbHWAVEOUThWaveOutHWAVEOUT hWaveOut	//Handle of output device
waveOutPrepareHeaderMMRESULT00tbHWAVEOUThWaveOutHWAVEOUT hWaveOut,	//Handle of output devicetbLPWAVEHDRlpwhLPWAVEHDR lpwh,	//Address of structure with buffer informationtbUINTcbwhUINT cbwh	//Size of structure, in bytes
waveOutResetMMRESULT00tbHWAVEOUThWaveOutHWAVEOUT hWaveOut	//Handle of device to reset
waveOutRestartMMRESULT00tbHWAVEOUThWaveOutHWAVEOUT hWaveOut	//Handle of device to restart
waveOutSetPitchMMRESULT00tbHWAVEOUThWaveOutHWAVEOUT hWaveOut,	//Handle of device to set pitch fortbDWORDdwPitchDWORD dwPitch	//New pitch
waveOutSetVolumeMMRESULT00tbUINTIDDeviceUINT IDDevice,	//Handle of device to set volume fortbDWORDdwVolumeDWORD dwVolume	//New volume
waveOutUnprepareHeaderMMRESULT00tbHWAVEOUThWaveOutHWAVEOUT hWaveOut,	//Handle of wave devicetbLPWAVEHDRlpwhLPWAVEHDR lpwh,	//Address of structure with buffer informationtbUINTcbwhUINT cbwh	//Size of structure, in bytes
waveOutWriteMMRESULT00tbHWAVEOUThWaveOutHWAVEOUT hWaveOut,	//Handle of device to write totbLPWAVEHDRlpwhLPWAVEHDR lpwh,	//Address of structure with buffer informationtbUINTcbwhUINT cbwh	//Size of structure, in bytes
WaveProcvoid00tbHWAVEhWaveHWAVE hWave,	//Handle of waveform devicetbUINTuMsgUINT uMsg,	//Sent messagetbDWORDdwInstanceDWORD dwInstance,	//Instance datatbDWORDdwParam1DWORD dwParam1,	//Application-defined parametertbDWORDdwParam2DWORD dwParam2	//Application-defined parameter
WideCharToMultiByteint00cbUINTuCodePageCP_ACPCP_OEMCPUINT uCodePage,	//Code pagexbDWORDWC_DISCARDNSWC_SEPCHARSWC_DEFAULTCHARDWORD dwFlags,	//Performance and mapping flagstbintcchWideCharint cchWideChar,	//Number of characters in stringtbLPSTRlpMultiByteStrLPSTR lpMultiByteStr,	//Address of buffer for new stringtbLPSTRlpMultiByteStrLPSTR lpMultiByteStr,	//Address of buffer for new stringcbLPCSTRlpDefaultCharNULLLPCSTR lpDefaultChar,	//Address of default for unmappable characterscbLPBOOLlpfUsedDefaultCharNULLLPBOOL lpfUsedDefaultChar	//Address of flag set when default char. usedtb
WidenPathBOOL00tbHDChdcHDC hdc	//Handle of device context
WindowFromDCHWND00tbHDChdcHDC hdc	//Handle of window
WindowFromPointHWND00tbPOINTptPOINT pt	//Structure with point
WindowProcLRESULT CALLBACK00tbHWNDhwndHWND hwnd,	//Handle of windowtbUINTuMsgUINT uMsg,	//Message identifiertbWPARAMwParamWPARAM wParam,	//First message parametertbLPARAMlParamLPARAM lParam	//Second message parameter
WinExecUINT00tbLPCSTRlpszCmdLineLPCSTR lpszCmdLine,	//Address of command linetbUINTfuCmdShowUINT fuCmdShow	//Window style for new app
WinHelpBOOL00tbHWNDhwndHWND hwnd,	//Handle of window requesting HelptbLPCTSTRlpszHelpFileLPCTSTR lpszHelpFile,	//Address of directory-path stringtbUINTfuCommandUINT fuCommand,	//Type of HelptbDWORDdwDataDWORD dwData	//Additional data
WinMainint00tbHINSTANCEhInstanceHINSTANCE hInstance,	//Handle of current instancecbHINSTANCEhPrevInstanceNULLHINSTANCE hPrevInstance,	//Handle of previous instancetbLPSTRlpszCmdLineLPSTR lpszCmdLine,	//Address of command linerbintSW_HIDESW_MINIMIZESW_RESTORESW_SHOWSW_SHOWMAXIMIZEDSW_SHOWMINIMIZEDSW_SHOWMINNOACTIVESW_SHOWNASW_SHOWNOACTIVATESW_SHOWNORMALint nCmdShow	//Show state of window
WNetAddConnectionDWORD00tbLPTSTRlpszRemoteNameLPTSTR lpszRemoteName,	//Address of network device namecbLPTSTRlpszPasswordNULLLPTSTR lpszPassword,	//Address of passwordcbLPTSTRlpszLocalNameNULLLPTSTR lpszLocalName	//Address of local device name
WNetAddConnection2DWORD00tbLPNETRESOURCElpNetResourceLPNETRESOURCE lpNetResource,	//Address of net resourcecbLPTSTRlpszPasswordNULLLPTSTR lpszPassword,	//Address of passwordcbLPTSTRlpszUserNameNULLLPTSTR lpszUserName,	//Address of user namerbDWORD0CONNECT_UPDATE_PROFILEDWORD fdwConnection	//Connection-type flags
WNetAddConnection300
WNetCancelConnectionDWORD00tbLPTSTRlpszNameLPTSTR lpszName,	//Address of resource name to disconnectcbBOOLfForceTRUEFALSEBOOL fForce	//Flag for unconditional disconnect
WNetCancelConnection2DWORD00tbLPTSTRlpszNameLPTSTR lpszName,	//Address of resource name to disconnectrbDWORD0CONNECT_UPDATE_PROFILEDWORD fdwConnection,	//Connection-type flagscbBOOLfForceTRUEFALSEBOOL fForce	//Flag for unconditional disconnect
WNetCloseEnumDWORD00tbHANDLEhEnumHANDLE hEnum	//Handle of enumeration
WNetConnectionDialogDWORD00tbHWNDhwndHWND hwnd,	//Handle of window owning dialog boxxbDWORDRESOURCETYPE_DISKDWORD fdwResourceType	//Resource type to allow connections to
WNetDisconnectDialogDWORD00tbHWNDhwndHWND hwnd,	//Handle of window owning dialog boxrbDWORDRESOURCETYPE_DISKRESOURCETYPE_PRINTDWORD fdwResourceType	//Resource type to disconnect from
WNetEnumResourceDWORD00tbHANDLEhEnumHANDLE hEnum,	//Handle of enumerationcbLPDWORDlpcEntries0xFFFFFFFFLPDWORD lpcEntries,	//Address of entries to listtbLPVOIDlpvBufferLPVOID lpvBuffer,	//Address of buffer for resultstbLPDWORDlpcbBufferLPDWORD lpcbBuffer	//Address of buffer-size variable
WNetGetConnectionDWORD00tbLPTSTRlpszLocalNameLPTSTR lpszLocalName,	//Address of local nametbLPTSTRlpszRemoteNameLPTSTR lpszRemoteName,	//Address of buffer for remote nametbLPDWORDlpcchBufferLPDWORD lpcchBuffer	//Address of buffer size, in characters
WNetGetLastErrorDWORD00tbLPDWORDlpdwErrorCodeLPDWORD lpdwErrorCode,	//Address of error codetbLPTSTRlpszDescriptionLPTSTR lpszDescription,	//Address of string describing errortbDWORDcchDescriptionDWORD cchDescription,	//Size of the description buffer, in characterstbLPTSTRlpszNameLPTSTR lpszName,	//Address of buffer for provider nametbDWORDcchNameDWORD cchName	//Size of the provider-name buffer
WNetGetUniversalName00
WNetGetUserDWORD00cbLPTSTRlpszLocalNameNULLLPTSTR lpszLocalName,	//Address of local name to get user name fortbLPTSTRlpszUserNameLPTSTR lpszUserName,	//Address of buffer for user nametbLPDWORDlpcchBufferLPDWORD lpcchBuffer	//Address of buffer-size variable
WNetOpenEnumDWORD00rbDWORDRESOURCE_CONNECTEDRESOURCE_GLOBALNETRESOURCE_REMEMBEREDDWORD fdwScope,	//Scope of enumerationrbDWORDRESOURCETYPE_ANYRESOURCETYPE_DISKRESOURCETYPE_PRINTDWORD fdwType,	//Resource types to listrbDWORD0RESOURCEUSAGE_CONNECTABLERESOURCEUSAGE_CONTAINERDWORD fdwUsage,	//Resource usage to listtbLPNETRESOURCElpNetResourceLPNETRESOURCE lpNetResource,	//Address of resource structuretbLPHANDLElphEnumLPHANDLE lphEnum	//Address of enumeration handle buffer
WriteConsoleBOOL00tbHANDLEhConsoleOutputHANDLE hConsoleOutput,	//Handle of a console screen buffertbCONST VOID *lpvBufferCONST VOID *lpvBuffer,	//Address of buffer to write fromtbDWORDcchToWriteDWORD cchToWrite,	//Number of characters to writetbLPDWORDlpcchWrittenLPDWORD lpcchWritten	//Address of number of characters writtencbLPVOIDlpvReservedNULLLPVOID lpvReserved	//Reserved
WriteConsoleInputBOOL00tbHANDLEhConsoleInputHANDLE hConsoleInput,	//Handle of a console input buffertbPINPUT_RECORDpirBufferPINPUT_RECORD pirBuffer,	//Address of the buffer for write datatbDWORDcInRecordsDWORD cInRecords,	//Number of records to writetbLPDWORDlpcWrittenLPDWORD lpcWritten	//Address of number of records written
WriteConsoleOutputBOOL00tbHANDLEhConsoleOutputHANDLE hConsoleOutput,	//Handle of a console screen buffertbPCHAR_INFOpchiSrcBufferPCHAR_INFO pchiSrcBuffer,	//Address of buffer with data to writetbCOORDcoordSrcBufferSizeCOORD coordSrcBufferSize,	//Column-row size of source buffertbCOORDcoordSrcBufferCoordCOORD coordSrcBufferCoord,	//Upper left cell to write fromtbPSMALL_RECTpsrctDestRectPSMALL_RECT psrctDestRect	//Address of rectangle to write to
WriteConsoleOutputAttributeBOOL00tbHANDLEhConsoleOutputHANDLE hConsoleOutput,	//Handle of a console screen buffertbLPWORDlpwAttributeLPWORD lpwAttribute,	//Address of buffer to write attributes fromtbDWORDcWriteCellsDWORD cWriteCells,	//Number of character cells to write totbCOORDcoordWriteCOORD coordWrite,	//Coordinates of first cell to write totbLPDWORDlpcWrittenLPDWORD lpcWritten	//Address of number of cells written to
WriteFileBOOL00tbHANDLEhFileHANDLE hFile,	//File to write totbLPCVOIDlpBufferLPCVOID lpBuffer,	//Address of data to write to filetbDWORDnNumberOfBytesToWriteDWORD nNumberOfBytesToWrite,	//Number of bytes to writetbLPDWORDlpNumberOfBytesWrittenLPDWORD lpNumberOfBytesWritten,	//Address of number of bytes writtentbLPOVERLAPPEDlpOverlappedLPOVERLAPPED lpOverlapped	//Addr. of structure needed for overlapped I/O
WritePrinterBOOL00tbHANDLEhPrinterHANDLE hPrinter,	//Handle of printer objecttbLPVOIDpBufLPVOID pBuf,	//Address of array that contains printer datatbDWORDcbBufDWORD cbBuf,	//Size, in bytes, of arraytbLPDWORDlpdwWrittenLPDWORD lpdwWritten	//Addr. of variable with count of bytes written
WritePrivateProfileSectionBOOL00tbLPCTSTRlpszSectionLPCTSTR lpszSection,	//Address of string with section nametbLPCTSTRlpszKeysAndValuesLPCTSTR lpszKeysAndValues,	//Address of string with datatbLPCTSTRlpszFileLPCTSTR lpszFile	//Address of string with filename
WriteProfileStringBOOL00tbLPCTSTRlpszSectionLPCTSTR lpszSection,	//Address of section namecbLPCTSTRlpszKeyNULLLPCTSTR lpszKey,	//Address of key namecbLPCTSTRlpszStringNULLLPCTSTR lpszString,	//Address of string to write
WriteTapemarkDWORD00tbHANDLEhDeviceHANDLE hDevice,	//Handle of open devicetbDWORDTAPE_FILEMARKSTAPE_LONG_FILEMARKSTAPE_SETMARKSTAPE_SHORT_FILEMARKSDWORD dwTapemarkType,	//Type of tapemarks to writetbDWORDdwTapemarkCountDWORD dwTapemarkCount,	//Number of tapemarks to writecbBOOLbImmediateTRUEFALSEBOOL bImmediate	//Return after write begins
wsprintfint00tbLPTSTRlpOutLPTSTR lpOut,	//Address of buffer for outputtbLPCTSTRlpFmtLPCTSTR lpFmt	//Address of format-control string
wvsprintfint00tbLPTSTRlpOutputLPTSTR lpOutput,	//Address of buffer for outputtbLPCTSTRlpFormatLPCTSTR lpFormat,	//Address of format-control stringtbva_listarglistva_list arglist	//Variable argument list of format-control arguments
ZeroMemoryVOID00tbPVOIDDestinationPVOID Destination,	//Address of block to fill with zeroestbDWORDLengthDWORD Length	//Size in bytes of block to fill with zeroes
_hreadlong00tbHFILEhfileHFILE hfile,	//Handle of filetbLPVOIDlpBufferLPVOID lpBuffer,	//Address of buffer for read datatblonglByteslong lBytes,	//Length of read data in bytes
_hwritelong00tbHFILEhFileHFILE hFile,	//Handle of file
_lcloseHFILE00tbHFILEhFileHFILE hFile	//Handle of the file to close
_lcreatHFILE00tbLPCSTRlpszFileNameLPCSTR lpszFileName,	//Address of name of the file to opentbintfnAttributeint fnAttribute	//File Attribute
_llseekLONG00tbHFILEhFileHFILE hFile,	//Handle of filetbLONGlOffsetLONG lOffset,	//Number of bytes to movetbintnOriginint nOrigin	//Position to move from
_lopenHFILE00tbLPCSTRlpszFileNameLPCSTR lpszFileName,	//Address of filename to openxbintOF_READOF_READWRITEOF_WRITEOF_SHARE_COMPATOF_SHARE_DENY_NONEOF_SHARE_DENY_READOF_SHARE_DENY_WRITEOF_SHARE_EXCLUSIVEint fnOpenMode	//File access mode
_lreadUINT00tbHFILEhFileHFILE hFile,	//Handle of filetbLPVOIDlpBufferLPVOID lpBuffer,	//Address of buffer for read datatbUINTcbRead        UINT cbRead	//length of data buffer in bytes
_lwriteUINT00tbHFILEhFileHFILE hFile,	//Handle of filetbLPCSTRlpBufferLPCSTR lpBuffer,	//Address of buffer for data to be writtentbUINTcbWriteUINT cbWrite	//Number of bytes to write
